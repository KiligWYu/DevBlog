<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>𝕶𝖎𝖑𝖎𝖌&#39;𝖘 𝕭𝖑𝖔𝖌</title>
  
  <subtitle>代码之外</subtitle>
  <link href="http://kiligwyu.com/atom.xml" rel="self"/>
  
  <link href="http://kiligwyu.com/"/>
  <updated>2024-06-16T14:14:10.699Z</updated>
  <id>http://kiligwyu.com/</id>
  
  <author>
    <name>𝕶𝖎𝖑𝖎𝖌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Combine 备忘清单</title>
    <link href="http://kiligwyu.com/combine/"/>
    <id>http://kiligwyu.com/combine/</id>
    <published>2024-06-16T13:29:39.000Z</published>
    <updated>2024-06-16T14:14:10.699Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#publishers-subscribers">Publishers &amp; Subscribers</a><ul><li><a href="#publisher">Publisher</a></li><li><a href="#subscriber">Subscriber</a></li><li><a href="#cancellable">Cancellable</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%A2%E9%98%85%E8%80%85">创建自定义订阅者</a></li><li><a href="#future">Future</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4type-erasure">类型擦除（Type erasure）</a></li></ul></li><li><a href="#operators">Operators</a><ul><li><a href="#transforming-operators">Transforming Operators</a><ul><li><a href="#collect">collect()</a></li><li><a href="#map_">map(_:)</a><ul><li><a href="#mapping-key-paths">Mapping key paths</a></li><li><a href="#trymap_">tryMap(_:)</a></li></ul></li><li><a href="#flatmapmaxpublishers_">flatMap(maxPublishers:_:)</a></li><li><a href="#replacenilwith">replaceNil(with:)</a></li><li><a href="#replaceemptywith">replaceEmpty(with:)</a></li><li><a href="#scan__">scan(_:_:)</a></li></ul></li><li><a href="#filtering-operators">Filtering Operators</a><ul><li><a href="#filtering">Filtering</a><ul><li><a href="#filter">filter</a></li><li><a href="#removeduplicates">removeDuplicates</a></li></ul></li><li><a href="#compacting-and-ignoring">Compacting and ignoring</a><ul><li><a href="#compactmap">compactMap</a></li><li><a href="#ignoreoutput">ignoreOutput</a></li></ul></li><li><a href="#finding-values">Finding values</a><ul><li><a href="#firstwhere">firstWhere</a></li><li><a href="#lastwhere">lastWhere</a></li></ul></li><li><a href="#dropping-values">Dropping values</a><ul><li><a href="#dropfirst">dropFirst</a></li><li><a href="#dropwhile">dropWhile</a></li><li><a href="#dropuntiloutputfrom">dropUntilOutputFrom</a></li></ul></li><li><a href="#limiting-values">Limiting values</a><ul><li><a href="#prefix">prefix</a></li><li><a href="#prefixwhile">prefixWhile</a></li><li><a href="#prefixuntiloutputfrom">prefixUntilOutputFrom</a></li></ul></li></ul></li><li><a href="#combining-operators">Combining Operators</a><ul><li><a href="#prepending">Prepending</a><ul><li><a href="#prependoutput">prepend(Output…)</a></li><li><a href="#prependsequence">prepend(Sequence)</a></li><li><a href="#prependpublisher">prepend(Publisher)</a></li></ul></li><li><a href="#appending">Appending</a><ul><li><a href="#appendoutput">append(Output…)</a></li><li><a href="#appendsequence">append(Sequence)</a></li><li><a href="#appendpublisher">append(Publisher)</a></li></ul></li><li><a href="#advanced-combining">Advanced combining</a><ul><li><a href="#switchtolatest">switchToLatest</a></li><li><a href="#mergewith">merge(with:)</a></li><li><a href="#combinelatest">combineLatest</a></li><li><a href="#zip">zip</a></li></ul></li></ul></li><li><a href="#time-manipulation-operators">Time Manipulation Operators</a><ul><li><a href="#shifting-time">Shifting time</a></li><li><a href="#collecting-values">Collecting values</a></li><li><a href="#holding-off-on-events">Holding off on events</a><ul><li><a href="#debounce">Debounce</a></li><li><a href="#throttle">Throttle</a></li><li><a href="#timing-out">Timing out</a></li></ul></li><li><a href="#measuring-time">Measuring time</a></li></ul></li><li><a href="#sequence-operators">Sequence Operators</a><ul><li><a href="#finding-values">Finding values</a><ul><li><a href="#min">min</a></li><li><a href="#max">max</a></li><li><a href="#first">first</a></li><li><a href="#last">last</a></li><li><a href="#outputat">output(at:)</a></li><li><a href="#outputin">output(in:)</a></li></ul></li><li><a href="#querying-the-publisher">Querying the publisher</a><ul><li><a href="#count">count</a></li><li><a href="#contains">contains</a></li><li><a href="#allsatisfy">allSatisfy</a></li><li><a href="#reduce">reduce</a></li></ul></li></ul></li></ul></li><li><a href="#action">Action</a><ul><li><a href="#debugging">Debugging</a><ul><li><a href="#printing-events">Printing events</a></li><li><a href="#acting-on-events-performing-side-effects">Acting on events — performing side effects</a></li><li><a href="#using-the-debugger-as-a-last-resort">Using the debugger as a last resort</a></li></ul></li><li><a href="#timers">Timers</a><ul><li><a href="#using-runloop">Using RunLoop</a></li><li><a href="#using-the-timer-class">Using the Timer class</a></li><li><a href="#using-dispatchqueue">Using DispatchQueue</a></li></ul></li><li><a href="#key-value-observing">Key-Value Observing</a><ul><li><a href="#publisherforoptions">publisher(for:options:)</a></li><li><a href="#observation-options">Observation options</a></li></ul></li><li><a href="#resource-management">Resource Management</a><ul><li><a href="#the-share-operator">The share() operator</a></li><li><a href="#the-multicast_-operator">The multicast(_:) operator</a></li><li><a href="#future">Future</a></li></ul></li></ul></li><li><a href="#error-handling">Error Handling</a><ul><li><a href="#never">Never</a></li><li><a href="#setfailuretype">setFailureType</a></li><li><a href="#assigntoon">assign(to:on:)</a></li><li><a href="#assignto">assign(to:)</a></li><li><a href="#assertnofailure">assertNoFailure</a></li><li><a href="#catching-and-retrying">Catching and retrying</a></li></ul></li><li><a href="#schedulers">Schedulers</a><ul><li><a href="#subscribeon-%E5%92%8C-receiveon">subscribe(on:) 和 receive(on:)</a></li><li><a href="#scheduler-implementations">Scheduler implementations</a></li><li><a href="#runloopmain-vs-dispatchqueuemain">RunLoop.main vs DispatchQueue.main</a></li></ul></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><p>Combine 是一个声明式、响应式框架，用于随着时间的推移处理异步事件。支持 iOS 13、macOS 10.15、watchOS 6 及之后的系统。这里是我学习 Combine 时的笔记，只是列出要点，没有详细的解释，权当备忘清单。</p><blockquote><p>The Combine framework provides a declarative approach for how your app processes events. Rather than potentially implementing multiple delegate callbacks or completion handler closures, you can create a single processing chain for a given event source. Each part of the chain is a Combine operator that performs a distinct action on the elements received from the previous step.</p></blockquote><h2 id="publishers-subscribers"><a class="markdownIt-Anchor" href="#publishers-subscribers"></a> Publishers &amp; Subscribers</h2><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162153303.png" alt="Publishers &amp; Subscribers" /></p><h3 id="publisher"><a class="markdownIt-Anchor" href="#publisher"></a> Publisher</h3><p><code>Publisher</code> 协议声明类型可以随着时间的推移传输一系列值。</p><p>发布者可以发出两种事件，值和完成事件。它可以发出零个或多个值，但只能发出一个完成事件，该事件可以是正常完成事件，也可以是错误。一旦发布者发出完成事件，它就完成了并且不能再发出任何事件。</p><h3 id="subscriber"><a class="markdownIt-Anchor" href="#subscriber"></a> Subscriber</h3><p><code>Subscriber</code> 协议声明类型可以从发布者接收输入。如果没有订阅者来接收输出，则发布者不会发出任何值。</p><p>Combine 提供两个内置订阅者：</p><ul><li><code>sink(_:_:)</code>：允许你使用闭包来处理输出值</li><li><code>assign(to:on:)</code>：将结果输出绑定到数据模型或 UI 控件上的某些属性</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> just <span class="operator">=</span> <span class="type">Just</span>(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">_</span> <span class="operator">=</span> just</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Received completion&quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveValue: &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Received value&quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeObject</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> value: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object <span class="operator">=</span> <span class="type">SomeObject</span>()</span><br><span class="line"><span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world!&quot;</span>].publisher</span><br><span class="line"><span class="keyword">_</span> <span class="operator">=</span> publisher</span><br><span class="line">  .assign(to: \.value, on: object)</span><br></pre></td></tr></table></figure><h3 id="cancellable"><a class="markdownIt-Anchor" href="#cancellable"></a> Cancellable</h3><p><code>Subscription</code> 协议继承自 <code>Cancellable</code> 协议，当订阅者完成其工作并且不再希望从发布者接收值时，可以调用 <code>cancel()</code> 以取消订阅。<br />如果你没有在订阅上明确调用 <code>cancel()</code>，它将持续到发布者完成，或直到正常内存管理导致存储的订阅非初始化。到那时，它会为你取消订阅。</p><h3 id="创建自定义订阅者"><a class="markdownIt-Anchor" href="#创建自定义订阅者"></a> 创建自定义订阅者</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> publisher <span class="operator">=</span> (<span class="number">1</span> <span class="operator">...</span> <span class="number">6</span>).publisher</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">IntSubscriber</span>: <span class="title class_">Subscriber</span> &#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Input</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Failure</span> <span class="operator">=</span> <span class="type">Never</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">subscription</span>: <span class="type">Subscription</span>) &#123;</span><br><span class="line">    subscription.request(.max(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Subscribers</span>.<span class="type">Demand</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received value&quot;</span>, input)</span><br><span class="line">    <span class="keyword">return</span> .none</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">completion</span>: <span class="type">Subscribers</span>.<span class="type">Completion</span>&lt;<span class="type">Never</span>&gt;) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received completion&quot;</span>, completion)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="future"><a class="markdownIt-Anchor" href="#future"></a> Future</h3><p>就像可以使用 <code>Just</code> 创建向订阅者发出单个值然后完成的发布者一样， <code>Future</code> 可用于异步生成单个结果然后完成。</p><p><code> Future</code> 是贪婪的，也就是说一旦创建就会执行。它不需要像普通发布者那样懒惰的订阅者。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscriptions <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">futureIncrement</span>(</span><br><span class="line">  <span class="params">integer</span>: <span class="type">Int</span>,</span><br><span class="line">  <span class="params">afterDelay</span> <span class="params">delay</span>: <span class="type">TimeInterval</span>) -&gt; <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt; &#123; promise <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Original&quot;</span>)</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().asyncAfter(deadline: .now() <span class="operator">+</span> delay) &#123;</span><br><span class="line">      promise(.success(integer <span class="operator">+</span> <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> future <span class="operator">=</span> futureIncrement(integer: <span class="number">1</span>, afterDelay: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">future</span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的延迟之后，第二个订阅会收到相同的值</span></span><br><span class="line"><span class="comment">// feature 不会重新履行诺言；相反，它共享或重放其输出</span></span><br><span class="line">future</span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;Second&quot;</span>, <span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Second&quot;</span>, <span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类型擦除type-erasure"><a class="markdownIt-Anchor" href="#类型擦除type-erasure"></a> 类型擦除（Type erasure）</h3><p>有时，你希望让订阅者订阅以接收来自发布者的事件，但无法访问有关该发布者的其他详细信息，这时可以使用类型擦除 <code>eraseToAnyPublisher</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscriptions <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> publisher <span class="operator">=</span> subject.eraseToAnyPublisher()</span><br><span class="line">  </span><br><span class="line">publisher</span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">  </span><br><span class="line">subject.send(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// error: Value of type &#x27;AnyPublisher&lt;Int, Never&gt;&#x27; has no member &#x27;send&#x27;</span></span><br><span class="line">publisher.send(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="operators"><a class="markdownIt-Anchor" href="#operators"></a> Operators</h2><h3 id="transforming-operators"><a class="markdownIt-Anchor" href="#transforming-operators"></a> Transforming Operators</h3><h4 id="collect"><a class="markdownIt-Anchor" href="#collect"></a> collect()</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162153420.png" alt="collect()" /></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>].publisher</span><br><span class="line">  .collect()</span><br><span class="line">  <span class="comment">// .collect(2)</span></span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="map_"><a class="markdownIt-Anchor" href="#map_"></a> map(_:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162154662.png" alt="map(_:)" /></p><h5 id="mapping-key-paths"><a class="markdownIt-Anchor" href="#mapping-key-paths"></a> Mapping key paths</h5><ul><li><code>map&lt;T&gt;(_:)</code></li><li><code>map&lt;T0, T1&gt;(_:_:)</code></li><li><code>map&lt;T0, T1, T2&gt;(_:_:_:)</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">publisher</span><br><span class="line">  .map(\.x, \.y)</span><br><span class="line">  .sink(receiveValue: &#123; x, y <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">      <span class="string">&quot;The coordinate at (<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) is in quadrant&quot;</span>,</span><br><span class="line">      quadrantOf(x: x, y: y)</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line"></span><br><span class="line">publisher.send(<span class="type">Coordinate</span>(x: <span class="number">10</span>, y: <span class="operator">-</span><span class="number">8</span>))</span><br><span class="line">publisher.send(<span class="type">Coordinate</span>(x: <span class="number">0</span>, y: <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h5 id="trymap_"><a class="markdownIt-Anchor" href="#trymap_"></a> tryMap(_:)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Just</span>(<span class="string">&quot;Directory name that does not exist&quot;</span>)</span><br><span class="line">  .tryMap &#123; <span class="keyword">try</span> <span class="type">FileManager</span>.default.contentsOfDirectory(atPath: <span class="variable">$0</span>) &#125;</span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="flatmapmaxpublishers_"><a class="markdownIt-Anchor" href="#flatmapmaxpublishers_"></a> flatMap(maxPublishers:_:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162155701.png" alt="flatMap(maxPublishers:_:)" /></p><p><code>flatMap</code> 接收三个发布者： <code>P1</code> 、 <code>P2</code> 和 <code>P3</code> 。 <code>flatMap</code> 从 <code>P1</code> 和 <code>P2</code> 发出发布者的值，但忽略 <code>P3</code> 因为 <code>maxPublishers</code> 设置为 2 。</p><h4 id="replacenilwith"><a class="markdownIt-Anchor" href="#replacenilwith"></a> replaceNil(with:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162156246.png" alt="replaceNil(with:)" /></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;A&quot;</span>, <span class="literal">nil</span>, <span class="string">&quot;C&quot;</span>].publisher</span><br><span class="line">  .eraseToAnyPublisher()</span><br><span class="line">  .replaceNil(with: <span class="string">&quot;-&quot;</span>)</span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="replaceemptywith"><a class="markdownIt-Anchor" href="#replaceemptywith"></a> replaceEmpty(with:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162156738.png" alt="replaceEmpty(with:)" /></p><h4 id="scan__"><a class="markdownIt-Anchor" href="#scan__"></a> scan(_:_:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162156933.png" alt="scan" /></p><h3 id="filtering-operators"><a class="markdownIt-Anchor" href="#filtering-operators"></a> Filtering Operators</h3><h4 id="filtering"><a class="markdownIt-Anchor" href="#filtering"></a> Filtering</h4><h5 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162157534.png" alt="filter" /></p><h5 id="removeduplicates"><a class="markdownIt-Anchor" href="#removeduplicates"></a> removeDuplicates</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162157326.png" alt="removeDuplicates" /></p><h4 id="compacting-and-ignoring"><a class="markdownIt-Anchor" href="#compacting-and-ignoring"></a> Compacting and ignoring</h4><h5 id="compactmap"><a class="markdownIt-Anchor" href="#compactmap"></a> compactMap</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162157275.png" alt="compactMap" /></p><h5 id="ignoreoutput"><a class="markdownIt-Anchor" href="#ignoreoutput"></a> ignoreOutput</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158611.png" alt="ignoreOutput" /></p><h4 id="finding-values"><a class="markdownIt-Anchor" href="#finding-values"></a> Finding values</h4><h5 id="firstwhere"><a class="markdownIt-Anchor" href="#firstwhere"></a> firstWhere</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158592.png" alt="firstWhere" /></p><h5 id="lastwhere"><a class="markdownIt-Anchor" href="#lastwhere"></a> lastWhere</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158996.png" alt="lastWhere" /></p><h4 id="dropping-values"><a class="markdownIt-Anchor" href="#dropping-values"></a> Dropping values</h4><h5 id="dropfirst"><a class="markdownIt-Anchor" href="#dropfirst"></a> dropFirst</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158483.png" alt="dropFirst" /></p><h5 id="dropwhile"><a class="markdownIt-Anchor" href="#dropwhile"></a> dropWhile</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158242.png" alt="dropWhile" /></p><h5 id="dropuntiloutputfrom"><a class="markdownIt-Anchor" href="#dropuntiloutputfrom"></a> dropUntilOutputFrom</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159634.png" alt="dropUntilOutputFrom" /></p><h4 id="limiting-values"><a class="markdownIt-Anchor" href="#limiting-values"></a> Limiting values</h4><h5 id="prefix"><a class="markdownIt-Anchor" href="#prefix"></a> prefix</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159971.png" alt="prefix" /></p><h5 id="prefixwhile"><a class="markdownIt-Anchor" href="#prefixwhile"></a> prefixWhile</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159211.png" alt="prefixWhile" /></p><h5 id="prefixuntiloutputfrom"><a class="markdownIt-Anchor" href="#prefixuntiloutputfrom"></a> prefixUntilOutputFrom</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159149.png" alt="prefixUntilOutputFrom" /></p><h3 id="combining-operators"><a class="markdownIt-Anchor" href="#combining-operators"></a> Combining Operators</h3><h4 id="prepending"><a class="markdownIt-Anchor" href="#prepending"></a> Prepending</h4><h5 id="prependoutput"><a class="markdownIt-Anchor" href="#prependoutput"></a> prepend(Output…)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159017.png" alt="prepend(Output…)" /></p><p>The last prepend affects the upstream first. The same below.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">.prepend(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">.prepend(<span class="operator">-</span><span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output: -1 0 1 2</span></span><br></pre></td></tr></table></figure><h5 id="prependsequence"><a class="markdownIt-Anchor" href="#prependsequence"></a> prepend(Sequence)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200197.png" alt="prepend(Sequence)" /></p><h5 id="prependpublisher"><a class="markdownIt-Anchor" href="#prependpublisher"></a> prepend(Publisher)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200927.png" alt="prepend(Publisher)" /></p><h4 id="appending"><a class="markdownIt-Anchor" href="#appending"></a> Appending</h4><h5 id="appendoutput"><a class="markdownIt-Anchor" href="#appendoutput"></a> append(Output…)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200181.png" alt="append(Output…)" /></p><h5 id="appendsequence"><a class="markdownIt-Anchor" href="#appendsequence"></a> append(Sequence)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200285.png" alt="append(Sequence)" /></p><h5 id="appendpublisher"><a class="markdownIt-Anchor" href="#appendpublisher"></a> append(Publisher)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162203782.png" alt="append(Publisher)" /></p><h4 id="advanced-combining"><a class="markdownIt-Anchor" href="#advanced-combining"></a> Advanced combining</h4><h5 id="switchtolatest"><a class="markdownIt-Anchor" href="#switchtolatest"></a> switchToLatest</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162203240.png" alt="switchToLatest" /></p><h5 id="mergewith"><a class="markdownIt-Anchor" href="#mergewith"></a> merge(with:)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204130.png" alt="merge(with:)" /></p><h5 id="combinelatest"><a class="markdownIt-Anchor" href="#combinelatest"></a> combineLatest</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204136.png" alt="combineLatestPublisher" /></p><h5 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> zip</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204021.png" alt="zip" /></p><h3 id="time-manipulation-operators"><a class="markdownIt-Anchor" href="#time-manipulation-operators"></a> Time Manipulation Operators</h3><h4 id="shifting-time"><a class="markdownIt-Anchor" href="#shifting-time"></a> Shifting time</h4><p><code>delay(for:tolerance:scheduler:options)</code> 运算符对整个值序列进行时间偏移。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204606.png" alt="1.5s delay" /></p><h4 id="collecting-values"><a class="markdownIt-Anchor" href="#collecting-values"></a> Collecting values</h4><p><code>collect(_ strategy:options:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collectMaxCount <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> collectTimeStride <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sourcePublisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Date</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collectedPublisher <span class="operator">=</span> sourcePublisher</span><br><span class="line">  <span class="comment">// 按指定的时间间隔从发布者收集值</span></span><br><span class="line">  .collect(.byTime(<span class="type">DispatchQueue</span>.main, .seconds(collectTimeStride)))</span><br><span class="line">  .flatMap &#123; dates <span class="keyword">in</span> dates.publisher &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collectedPublisher2 <span class="operator">=</span> sourcePublisher</span><br><span class="line">  <span class="comment">// 按指定的时间间隔从发布者收集值并限制收集的值的数量</span></span><br><span class="line">  .collect(.byTimeOrCount(<span class="type">DispatchQueue</span>.main,</span><br><span class="line">                          .seconds(collectTimeStride),</span><br><span class="line">                          collectMaxCount))</span><br><span class="line">  .flatMap &#123; dates <span class="keyword">in</span> dates.publisher &#125;</span><br></pre></td></tr></table></figure><h4 id="holding-off-on-events"><a class="markdownIt-Anchor" href="#holding-off-on-events"></a> Holding off on events</h4><h5 id="debounce"><a class="markdownIt-Anchor" href="#debounce"></a> Debounce</h5><p><code>.debounce(for:scheduler:options:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounced <span class="operator">=</span> subject</span><br><span class="line">  <span class="comment">// 每秒最多允许发送一个值，发送该一秒间隔内发送的最后一个值（如果有）</span></span><br><span class="line">  .debounce(for: .seconds(<span class="number">1.0</span>), scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">  .share()</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note:</strong> One thing to watch out for is the publisher’s completion. If your publisher completes right after the last value was emitted, but before the time configured for <code>debounce</code> elapses, you will never see the last value in the debounced publisher!</p></blockquote><h5 id="throttle"><a class="markdownIt-Anchor" href="#throttle"></a> Throttle</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> throttleDelay <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> throttled <span class="operator">=</span> subject</span><br><span class="line">  .throttle(for: .seconds(throttleDelay), scheduler: <span class="type">DispatchQueue</span>.main, latest: <span class="literal">false</span>)</span><br><span class="line">  .share()</span><br></pre></td></tr></table></figure><p>和 <code>debounce</code> 的区别是：</p><ul><li><code>debounce</code> 等待接收到的值暂停，然后在指定的时间间隔后发出最新的值。</li><li><code>throttle</code> 等待指定的时间间隔，然后发出在该时间间隔内收到的第一个或最新的值。它不关心暂停。</li></ul><h5 id="timing-out"><a class="markdownIt-Anchor" href="#timing-out"></a> Timing out</h5><p><code>timeout(_:scheduler:options:customError:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> timedOutSubject <span class="operator">=</span> subject.timeout(.seconds(<span class="number">5</span>), scheduler: <span class="type">DispatchQueue</span>.main)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TimeoutError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> timedOut</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">TimeoutError</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> timedOutSubject <span class="operator">=</span> subject.timeout(.seconds(<span class="number">5</span>),</span><br><span class="line">                                      scheduler: <span class="type">DispatchQueue</span>.main,</span><br><span class="line">                                      customError: &#123; .timedOut &#125;)</span><br></pre></td></tr></table></figure><h4 id="measuring-time"><a class="markdownIt-Anchor" href="#measuring-time"></a> Measuring time</h4><p><code>measureInterval(using:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="comment">// 在 `DispatchQueue` 的情况下， `TimeInterval` 被定义为“使用该类型的值（以纳秒为单位）创建的 `DispatchTimeInterval` ”</span></span><br><span class="line"><span class="keyword">let</span> measureSubject <span class="operator">=</span> subject.measureInterval(using: <span class="type">DispatchQueue</span>.main)</span><br><span class="line"><span class="comment">// 在 `RunLoop` 调度程序的输出，其大小直接以秒表示</span></span><br><span class="line"><span class="keyword">let</span> measureSubject2 <span class="operator">=</span> subject.measureInterval(using: <span class="type">RunLoop</span>.main)</span><br></pre></td></tr></table></figure><h3 id="sequence-operators"><a class="markdownIt-Anchor" href="#sequence-operators"></a> Sequence Operators</h3><h4 id="finding-values-2"><a class="markdownIt-Anchor" href="#finding-values-2"></a> Finding values</h4><h5 id="min"><a class="markdownIt-Anchor" href="#min"></a> min</h5><p><code>min</code> 运算符可让你找到发布者发出的最小值。它是贪婪的，这意味着它必须等待发布者发送 <code>.finished</code> 完成事件。发布者完成后，运算符仅发出最小值。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204243.png" alt="min" /></p><h5 id="max"><a class="markdownIt-Anchor" href="#max"></a> max</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205987.png" alt="max" /></p><h5 id="first"><a class="markdownIt-Anchor" href="#first"></a> first</h5><p>不会等待上游发布者完成，而是在收到第一个发出的值时取消订阅。<br />还可以使用 <code>first(where:)</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205218.png" alt="first" /></p><h5 id="last"><a class="markdownIt-Anchor" href="#last"></a> last</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205815.png" alt="last" /></p><h5 id="outputat"><a class="markdownIt-Anchor" href="#outputat"></a> output(at:)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205008.png" alt="output(at:)" /></p><h5 id="outputin"><a class="markdownIt-Anchor" href="#outputin"></a> output(in:)</h5><p>该运算符发出索引范围内的各个值，而不是它们的集合。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206858.png" alt="output(in:)" /></p><h4 id="querying-the-publisher"><a class="markdownIt-Anchor" href="#querying-the-publisher"></a> Querying the publisher</h4><h5 id="count"><a class="markdownIt-Anchor" href="#count"></a> count</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206769.png" alt="count" /></p><h5 id="contains"><a class="markdownIt-Anchor" href="#contains"></a> contains</h5><p>如果上游发布者发出指定的值，则 <code>contains</code> 运算符将发出 <code>true</code> 并取消订阅。<br />还可以使用 <code>contains(where:)</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206766.png" alt="contains" /></p><h5 id="allsatisfy"><a class="markdownIt-Anchor" href="#allsatisfy"></a> allSatisfy</h5><p>一旦不满足条件，<code>allSatisfy</code> 发出 <code>false</code> 就立即取消订阅。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206780.png" alt="allSatisfy" /></p><h5 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> reduce</h5><p><code>scan</code> 和 <code>reduce</code> 具有相同的功能，主要区别在于 <code>scan</code> 为每个发出的值发出累积值，而 <code>reduce</code> 一旦上游发布者发送 <code>.finished</code> 完成事件，就会发出单个累积值。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206410.png" alt="reduce" /></p><h2 id="action"><a class="markdownIt-Anchor" href="#action"></a> Action</h2><h3 id="debugging"><a class="markdownIt-Anchor" href="#debugging"></a> Debugging</h3><h4 id="printing-events"><a class="markdownIt-Anchor" href="#printing-events"></a> Printing events</h4><p><code>print(:to:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">3</span>).publisher</span><br><span class="line">  .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">  .sink &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="acting-on-events-performing-side-effects"><a class="markdownIt-Anchor" href="#acting-on-events-performing-side-effects"></a> Acting on events — performing side effects</h4><p>除了打印信息之外，对特定事件执行操作通常也很有用。我们称之为<strong>执行副作用</strong>，因为您“在侧面”采取的操作不会直接影响下游的其他发布者，但可能会产生类似于修改外部变量的效果。</p><p><code>handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)</code></p><h4 id="using-the-debugger-as-a-last-resort"><a class="markdownIt-Anchor" href="#using-the-debugger-as-a-last-resort"></a> Using the debugger as a last resort</h4><p><code>breakpointOnError()</code><br /><code>breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.breakpoint(receiveOutput: &#123; value <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> value <span class="operator">&gt;</span> <span class="number">10</span> <span class="operator">&amp;&amp;</span> value <span class="operator">&lt;</span> <span class="number">15</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="timers"><a class="markdownIt-Anchor" href="#timers"></a> Timers</h3><h4 id="using-runloop"><a class="markdownIt-Anchor" href="#using-runloop"></a> Using RunLoop</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> runLoop <span class="operator">=</span> <span class="type">RunLoop</span>.main</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> runLoop.schedule(</span><br><span class="line">  after: runLoop.now,</span><br><span class="line">  interval: .seconds(<span class="number">1</span>),</span><br><span class="line">  tolerance: .milliseconds(<span class="number">100</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Timer fired&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runLoop.schedule(after: .<span class="keyword">init</span>(<span class="type">Date</span>(timeIntervalSinceNow: <span class="number">3.0</span>))) &#123;</span><br><span class="line">  subscription.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="using-the-timer-class"><a class="markdownIt-Anchor" href="#using-the-timer-class"></a> Using the Timer class</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> <span class="type">Timer</span></span><br><span class="line">  .publish(every: <span class="number">1.0</span>, on: .main, in: .common)</span><br><span class="line">  .autoconnect()</span><br><span class="line">  .scan(<span class="number">0</span>) &#123; counter, <span class="keyword">_</span> <span class="keyword">in</span> counter <span class="operator">+</span> <span class="number">1</span> &#125;</span><br><span class="line">  .sink &#123; counter <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Counter is <span class="subst">\(counter)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="using-dispatchqueue"><a class="markdownIt-Anchor" href="#using-dispatchqueue"></a> Using DispatchQueue</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>.main</span><br><span class="line"><span class="keyword">let</span> source <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> counter <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> queue.schedule(</span><br><span class="line">  after: queue.now,</span><br><span class="line">  interval: .seconds(<span class="number">1</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  source.send(counter)</span><br><span class="line">  counter <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> source.sink &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Timer emitted <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="key-value-observing"><a class="markdownIt-Anchor" href="#key-value-observing"></a> Key-Value Observing</h3><h4 id="publisherforoptions"><a class="markdownIt-Anchor" href="#publisherforoptions"></a> publisher(for:options:)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">OperationQueue</span>()</span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> queue.publisher(for: \.operationCount)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Outstanding operations in queue: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestObject</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> integerProperty: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> stringProperty: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> arrayProperty: [<span class="type">Float</span>] <span class="operator">=</span> []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">TestObject</span>()</span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> obj.publisher(for: \.integerProperty)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;integerProperty changes to <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> obj.publisher(for: \.stringProperty)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stringProperty changes to <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">let</span> subscription3 <span class="operator">=</span> obj.publisher(for: \.arrayProperty)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arrayProperty changes to <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">obj.integerProperty <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">obj.integerProperty <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">obj.stringProperty <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">obj.arrayProperty <span class="operator">=</span> [<span class="number">1.0</span>]</span><br><span class="line">obj.stringProperty <span class="operator">=</span> <span class="string">&quot;World&quot;</span></span><br><span class="line">obj.arrayProperty <span class="operator">=</span> [<span class="number">1.0</span>, <span class="number">2.0</span>]</span><br></pre></td></tr></table></figure><h4 id="observation-options"><a class="markdownIt-Anchor" href="#observation-options"></a> Observation options</h4><p><code>options</code> 参数是一个具有四个值的选项集： <code>.initial</code> 、 <code>.prior</code> 、 <code>.old</code> 和 <code>.new</code> 。默认值为 <code>[.initial] </code>。</p><h3 id="resource-management"><a class="markdownIt-Anchor" href="#resource-management"></a> Resource Management</h3><h4 id="the-share-operator"><a class="markdownIt-Anchor" href="#the-share-operator"></a> The share() operator</h4><p><code>share()</code> 运算符的目的是让你通过引用而不是通过值获取发布者。<br /><code>share()</code> 运算符返回 <code>Publishers.Share</code> 类的实例。这个新发布者“共享”上游发布者。</p><p>例如，你正在执行一个网络请求，希望多个订阅者接收结果而不需要多次请求。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">URLSession</span>.shared</span><br><span class="line">  .dataTaskPublisher(for: <span class="type">URL</span>(string: <span class="string">&quot;https://www.kodeco.com&quot;</span>)<span class="operator">!</span>)</span><br><span class="line">  .map(\.data)</span><br><span class="line">  .print(<span class="string">&quot;shared&quot;</span>)</span><br><span class="line">  .share()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;subscribing first&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> shared.sink(</span><br><span class="line">  receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">  receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription1 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;subscribing second&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> shared.sink(</span><br><span class="line">  receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">  receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription2 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="the-multicast_-operator"><a class="markdownIt-Anchor" href="#the-multicast_-operator"></a> The multicast(_:) operator</h4><p><code>multicast(_:)</code> 的独特特征是它返回的发布者是 <code>ConnectablePublisher</code> 。这意味着在调用其 <code>connect()</code> 方法之前，它不会订阅上游发布者。这使你有足够的时间来设置所需的所有订阅者，然后再让它连接到上游发布者并开始工作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Data</span>, <span class="type">URLError</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> multicasted <span class="operator">=</span> <span class="type">URLSession</span>.shared</span><br><span class="line">  .dataTaskPublisher(for: <span class="type">URL</span>(string: <span class="string">&quot;https://www.raywenderlich.com&quot;</span>)<span class="operator">!</span>)</span><br><span class="line">  .map(\.data)</span><br><span class="line">  .print(<span class="string">&quot;multicast&quot;</span>)</span><br><span class="line">  .multicast(subject: subject)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> multicasted</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription1 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> multicasted</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription2 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> multicasted.connect()</span><br></pre></td></tr></table></figure><h4 id="future-2"><a class="markdownIt-Anchor" href="#future-2"></a> Future</h4><p><code>Future</code> 是一个类，而不是一个结构。创建后，立即执行，存储已完成的 <code>Promise</code> 的结果并将其传递给当前和未来的订阅者。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">performSomeWork</span>() <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Performing some work and returning a result&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> future <span class="operator">=</span> <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Error</span>&gt; &#123; fulfill <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> performSomeWork()</span><br><span class="line">    fulfill(.success(result))</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    fulfill(.failure(error))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Subscribing to future...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> future</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;subscription1 completed&quot;</span>) &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription1 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> future</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;subscription2 completed&quot;</span>) &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription2 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="advanced-combine"><a class="markdownIt-Anchor" href="#advanced-combine"></a> Advanced Combine</h2><h3 id="error-handling"><a class="markdownIt-Anchor" href="#error-handling"></a> Error Handling</h3><h4 id="never"><a class="markdownIt-Anchor" href="#never"></a> Never</h4><p><code>Failure</code> 类型为 <code>Never</code> 的发布者表明该发布者永远不会失败。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162207260.png" alt="Never" /></p><p><code>Just</code> 始终声明 <code>Failure</code> 为 <code>Never</code> 。</p><h4 id="setfailuretype"><a class="markdownIt-Anchor" href="#setfailuretype"></a> setFailureType</h4><p>将绝对正确的发布者转变为会发出错误的发布者的第一种方法是使用 <code>setFailureType</code> 。这是另一个仅适用于失败类型为 <code>Never</code> 的发布者的运算符。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MyError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ohNo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Just</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  .setFailureType(to: <span class="type">MyError</span>.<span class="keyword">self</span>)</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; completion <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">switch</span> completion &#123;</span><br><span class="line">      <span class="keyword">case</span> .failure(.ohNo):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Finished with Oh No!&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> .finished:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Finished successfully!&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveValue: &#123; value <span class="keyword">in</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Got value: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="assigntoon"><a class="markdownIt-Anchor" href="#assigntoon"></a> assign(to:on:)</h4><p><code>assign</code> 运算符仅适用于不会失败的发布者，与 <code>setFailureType</code> 相同。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">  <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>, person.name)</span><br><span class="line"></span><br><span class="line"><span class="type">Just</span>(<span class="string">&quot;Shai&quot;</span>)</span><br><span class="line">  .handleEvents(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>, person.name) &#125;</span><br><span class="line">  )</span><br><span class="line">  .assign(to: \.name, on: person)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="assignto"><a class="markdownIt-Anchor" href="#assignto"></a> assign(to:)</h4><p><code>assign(to:on:)</code> 会强引用 <code>on</code> 参数的对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="type">Timer</span>.publish(every: <span class="number">1</span>, on: .main, in: .common)</span><br><span class="line">      .autoconnect()</span><br><span class="line">      .prefix(<span class="number">3</span>)</span><br><span class="line">      .assign(to: <span class="operator">&amp;</span><span class="variable">$currentDate</span>)</span><br><span class="line">    <span class="comment">// 下面两行会造成循环引用</span></span><br><span class="line">    <span class="comment">// .assign(to: \.currentDate, on: self)</span></span><br><span class="line">    <span class="comment">// .store(in: &amp;subscriptions)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm <span class="operator">=</span> <span class="type">MyViewModel</span>()</span><br><span class="line">vm.<span class="variable">$currentDate</span></span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="assertnofailure"><a class="markdownIt-Anchor" href="#assertnofailure"></a> assertNoFailure</h4><p>在开发过程中，为确认发布者无法以失败事件完成时，<code>assertNoFailure</code> 运算符非常有用。它不会阻止上游发出故障事件。但是，如果检测到错误，它会崩溃并显示 <code>fatalError</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MyError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ohNo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Just</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  .setFailureType(to: <span class="type">MyError</span>.<span class="keyword">self</span>)</span><br><span class="line">  .tryMap &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="keyword">throw</span> <span class="type">MyError</span>.ohNo &#125;</span><br><span class="line">  .assertNoFailure()</span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Got value: <span class="subst">\(<span class="variable">$0</span>)</span> &quot;</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="catching-and-retrying"><a class="markdownIt-Anchor" href="#catching-and-retrying"></a> Catching and retrying</h4><p><code>retry</code> 运算符接受一个数字。如果发布者失败，它将重新订阅上游并重试最多您指定的次数。如果所有重试都失败，它只会将错误推送到下游。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> photoService <span class="operator">=</span> <span class="type">PhotoService</span>()</span><br><span class="line"></span><br><span class="line">photoService</span><br><span class="line">  .fetchPhoto(quality: .high, failingTimes: <span class="number">2</span>)</span><br><span class="line">  .handleEvents(</span><br><span class="line">    receiveSubscription: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Trying ...&quot;</span>) &#125;,</span><br><span class="line">    receiveCompletion: &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">case</span> .failure(<span class="keyword">let</span> error) <span class="operator">=</span> <span class="variable">$0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Got error: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="operator">+</span> .retry(<span class="number">3</span>)</span><br><span class="line"><span class="operator">+</span> .catch &#123; <span class="keyword">_</span> -&gt; <span class="type">PhotoService</span>.<span class="type">Publisher</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed fetching high quality, falling back to low quality&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> photoService.fetchPhoto(quality: .low)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="operator">+</span> .replaceError(with: <span class="type">UIImage</span>(named: <span class="string">&quot;na.jpg&quot;</span>)<span class="operator">!</span>)</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">    receiveValue: &#123; image <span class="keyword">in</span></span><br><span class="line">      image</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Got image: <span class="subst">\(image)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h3 id="schedulers"><a class="markdownIt-Anchor" href="#schedulers"></a> Schedulers</h3><p>Combine 框架提供了两个与调度程序一起使用的基本运算符：</p><ul><li><code>subscribe(on:)</code> 和 <code>subscribe(on:options:)</code> 在指定的调度程序上创建订阅（开始工作）。</li><li><code>receive(on:)</code> 和 <code>receive(on:options:)</code> 在指定的调度程序上传递值。</li></ul><p>此外，以下运算符将调度程序和调度程序选项作为参数。</p><ul><li><code>debounce(for:scheduler:options:)</code></li><li><code>delay(for:tolerance:scheduler:options:)</code></li><li><code>measureInterval(using:options:)</code></li><li><code>throttle(for:scheduler:latest:)</code></li><li><code>timeout(_:scheduler:options:customError:)</code></li></ul><h4 id="subscribeon-和-receiveon"><a class="markdownIt-Anchor" href="#subscribeon-和-receiveon"></a> subscribe(on:) 和 receive(on:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162208298.png" alt="subscribe(on:) 和 receive(on:)" /></p><ol><li><code>Publisher</code> 接收订阅者并创建一个 <code>Subscription</code></li><li><code>Subscriber</code> 接收订阅并请求来自发布者的值（虚线）</li><li><code>Publisher</code> 开始工作（通过 <code>Subscription</code> ）</li><li><code>Publisher</code> 发出值（通过 <code>Subscription</code> ）</li><li>运算符转换值</li><li><code>Subscriber</code> 接收最终值</li></ol><p>步骤一、二和三通常发生在代码订阅发布者时当前的线程上。但是当您使用 <code>subscribe(on:)</code> 运算符时，所有这些操作都在您指定的调度程序上运行。例如，发布者在后台执行一些昂贵的计算时，以避免阻塞主线程，执行此操作的简单方法是使用 <code>subscribe(on:)</code>。</p><p><code>receive(on:)</code> 允许你指定应使用哪个调度程序来向订阅者传递值。例如在主线程接收值以更新 UI。</p><h4 id="scheduler-implementations"><a class="markdownIt-Anchor" href="#scheduler-implementations"></a> Scheduler implementations</h4><ul><li><code>ImmediateScheduler</code>：立即在当前线程上执行代码，这是默认的执行上下文</li><li><code>RunLoop</code>：绑定到 <code>Foundation</code> 的 <code>Thread</code> 对象</li><li><code>DispatchQueue</code>：可以是串行的也可以是并发的</li><li><code>OperationQueue</code>：调节工作项执行的队列</li><li><code>TestScheduler</code>：一个虚拟的、模拟的调度程序，用于测试</li></ul><h5 id="runloopmain-vs-dispatchqueuemain"><a class="markdownIt-Anchor" href="#runloopmain-vs-dispatchqueuemain"></a> RunLoop.main vs DispatchQueue.main</h5><blockquote><p>RunLoop 是管理输入源（例如应用程序的触摸）的对象的编程接口。 RunLoop 由系统创建和管理，系统还负责为每个线程对象创建一个 RunLoop 对象。系统还负责创建代表主线程的主运行循环。</p><p><code>DispatchQueue.main</code> 是与当前进程的主线程关联的调度队列。系统负责生成代表主线程的队列。调度队列在其关联的线程上串行或并发地执行任务。</p><p><code>RunLoop.main</code> 和 <code>DispatchQueue.main</code> 都在主线程上执行其代码，这意味着您可以使用两者来更新用户界面。</p><p><code>RunLoop.main</code> 和 <code>DispatchQueue.main</code> 之间最显着的区别是后者即使在 RunLoop 繁忙时也能直接执行。例如，在使用 <code>DispatchQueue.main</code> 作为调度程序时，下载的图像即使在滚动时也会立即显示，而使用 <code>RunLoop.main</code> 时图像仅在滚动后显示。换句话说：只要发生用户交互，主运行循环上计划的闭包的执行就会被延迟执行。</p></blockquote><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://developer.apple.com/documentation/combine">Combine</a></li><li><a href="https://www.kodeco.com/books/combine-asynchronous-programming-with-swift/v1.0/">Combine: Asynchronous Programming with Swift</a></li><li><a href="https://www.avanderlee.com/combine/runloop-main-vs-dispatchqueue-main/">RunLoop.main vs DispatchQueue.main: The differences explained</a></li></ul>]]></content>
    
    
    <summary type="html">Combine 是一个声明式、响应式框架，用于随着时间的推移处理异步事件。支持 iOS 13、macOS 10.15、watchOS 6 及之后的系统。这里是我学习 Combine 时的笔记，只是列出要点，没有详细的解释，权当备忘清单。</summary>
    
    
    
    
    <category term="Combine" scheme="http://kiligwyu.com/tags/Combine/"/>
    
  </entry>
  
  <entry>
    <title>Git 备忘清单</title>
    <link href="http://kiligwyu.com/git/"/>
    <id>http://kiligwyu.com/git/</id>
    <published>2024-06-07T10:30:01.000Z</published>
    <updated>2024-06-13T14:19:56.593Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E9%85%8D%E7%BD%AE">配置</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE">查看配置</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E6%9D%A5%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE">使用文本编辑器来编辑配置</a></li><li><a href="#%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1">用户名和邮箱</a></li><li><a href="#%E9%BB%98%E8%AE%A4%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF-%E6%A8%A1%E6%9D%BF">默认提交信息 / 模板</a></li><li><a href="#%E5%88%AB%E5%90%8D">别名</a></li><li><a href="#%E4%BB%A3%E7%90%86">代理</a><ul><li><a href="#%E9%85%8D%E7%BD%AE-git-%E4%BB%A3%E7%90%86">配置 Git 代理</a></li><li><a href="#%E9%85%8D%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86">配置 SSH 代理</a></li></ul></li><li><a href="#%E5%88%A0%E9%99%A4%E9%85%8D%E7%BD%AE">删除配置</a></li></ul></li><li><a href="#%E4%BB%93%E5%BA%93">仓库</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%85%8B%E9%9A%86">创建与克隆</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6">忽略文件</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">远程仓库</a></li><li><a href="#%E5%90%8C%E6%AD%A5">同步</a></li><li><a href="#%E8%A7%82%E5%AF%9F%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93">观察你的仓库</a></li></ul></li><li><a href="#%E5%88%86%E6%94%AF">分支</a></li><li><a href="#%E6%8F%90%E4%BA%A4">提交</a><ul><li><a href="#%E5%81%9A%E5%87%BA%E6%94%B9%E5%8F%98">做出改变</a></li><li><a href="#%E4%B8%B4%E6%97%B6%E6%8F%90%E4%BA%A4">临时提交</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">提交到远程仓库</a></li></ul></li><li><a href="#%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">其他常用操作</a><ul><li><a href="#rebase-merge-reset-revert">rebase、merge、reset、revert</a><ul><li><a href="#git-rebase">git rebase</a></li><li><a href="#git-merge">git merge</a></li><li><a href="#git-reset">git reset</a></li><li><a href="#git-revert">git revert</a></li></ul></li><li><a href="#%E6%94%BE%E5%BC%83%E6%9B%B4%E6%94%B9">放弃更改</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF">重命名分支</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B-commit-%E8%AE%B0%E5%BD%95">修改远程 Commit 记录</a></li><li><a href="#worktree">Worktree</a></li><li><a href="#fork-%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5%E4%B8%8A%E6%B8%B8%E4%BB%93%E5%BA%93">Fork 仓库同步上游仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E6%AC%A1%E6%95%B0%E7%BB%9F%E8%AE%A1">提交次数统计</a></li><li><a href="#%E4%BB%93%E5%BA%93%E5%A4%A7%E5%B0%8F">仓库大小</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li><li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 .gitignore 文件中记录的文件</a></li><li><a href="#%E5%AD%A4%E7%AB%8B%E5%88%86%E6%94%AF">孤立分支</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%9C%80%E5%90%8E%E7%9A%84%E6%8F%90%E4%BA%A4">修改最后的提交</a></li></ul></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><p>在的代码管理版本控制工具几乎都是 Git 了，虽然有很多好看好用的 GUI 客户端（推荐 <a href="https://fork.dev">Fork</a>），但常用的命令还是得要了然于心，这里只是列出常用的 Git 命令行指令，以供速查参考。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>本地全局配置文件的路径（macOS）为：<code>~/.gitconfig</code>，本地仓库的配置路径为：<code>[仓库路径]/.git/config</code>。</p><h3 id="查看配置"><a class="markdownIt-Anchor" href="#查看配置"></a> 查看配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示全局 / 仓库配置，在仓库目录下执行该命令则显示当前仓库的配置，在非仓库目录下则显示为全局配置。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config -l` <span class="comment"># -l, --list</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看单项配置 e.g. <span class="string">&#x27;$ git config --get user.name&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --get &lt;key&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用文本编辑器来编辑配置"><a class="markdownIt-Anchor" href="#使用文本编辑器来编辑配置"></a> 使用文本编辑器来编辑配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认的文本编辑器，默认使用 `vim`</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor &lt;editor&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Visual Studio Code</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 CotEditor</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;cot -w&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Sublime Text</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;subl -w&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Xcode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&#x27;xed -w&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Zed</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&#x27;zed -w&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文本编辑器中编辑配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global -e <span class="comment"># -e, --edit</span></span></span><br></pre></td></tr></table></figure><h3 id="用户名和邮箱"><a class="markdownIt-Anchor" href="#用户名和邮箱"></a> 用户名和邮箱</h3><p>添加 <code>--global</code> 参数，则为全局设置；不加则为当前仓库设置，需要在当前仓库目录下执行该命令。（下同）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局设置用户名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局设置邮箱</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email &lt;email&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认提交信息-模板"><a class="markdownIt-Anchor" href="#默认提交信息-模板"></a> 默认提交信息 / 模板</h3><p><code>$ git config --global commit.template &lt;template-file-path&gt;</code></p><p>在提交时，编辑器中就会显示模板文件中的信息，这里推荐 <a href="https://open.leancloud.cn/git-commit-message/">Git Commit 日志风格指南</a> 中的模板。</p><h3 id="别名"><a class="markdownIt-Anchor" href="#别名"></a> 别名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.co checkout</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.br branch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.cm commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.st status</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 配置好后，再输入 git 命令的时候就可以用别名来简化输入了，例如我们要查看状态，只需：&#x27;$ git st&#x27;</span></span></span><br></pre></td></tr></table></figure><h3 id="代理"><a class="markdownIt-Anchor" href="#代理"></a> 代理</h3><p>由于众所周知的原因，国内访问 GitHub 都巨慢，配置代理可以加快访问速度。</p><h4 id="配置-git-代理"><a class="markdownIt-Anchor" href="#配置-git-代理"></a> 配置 Git 代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global socks.proxy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置代理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy http://127.0.0.1:8888</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy http://127.0.0.1:8888</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global socks.proxy 127.0.0.1:8889</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> http.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> https.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> socks.proxy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只对 github.com 设置代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.https://github.com.proxy socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消 github.com 代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> https.https://github.com.proxy</span></span><br></pre></td></tr></table></figure><h4 id="配置-ssh-代理"><a class="markdownIt-Anchor" href="#配置-ssh-代理"></a> 配置 SSH 代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 ~/.ssh/config 文件</span></span><br><span class="line">Host github.com</span><br><span class="line">  ProxyCommand nc -X 5 -x 127.0.0.1:8889 %h %p</span><br></pre></td></tr></table></figure><h3 id="删除配置"><a class="markdownIt-Anchor" href="#删除配置"></a> 删除配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> &lt;key&gt;</span></span><br></pre></td></tr></table></figure><h2 id="仓库"><a class="markdownIt-Anchor" href="#仓库"></a> 仓库</h2><h3 id="创建与克隆"><a class="markdownIt-Anchor" href="#创建与克隆"></a> 创建与克隆</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的本地仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init &lt;repo-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浅克隆</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> --depth 1 &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将仓库克隆到指定目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;git-url&gt; &lt;path&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将仓库克隆到指定目录，并指定分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;git-url&gt; -b &lt;branch-name&gt; &lt;path&gt; <span class="comment"># -b, --branch</span></span></span><br></pre></td></tr></table></figure><h3 id="忽略文件"><a class="markdownIt-Anchor" href="#忽略文件"></a> 忽略文件</h3><p>文件 <code>.gitignore</code> 指定了 Git 应该忽略的未跟踪的文件，这里推荐 <a href="https://github.com/github/gitignore">github/gitignore</a> 模板。</p><table><thead><tr><th style="text-align:center">符号</th><th>规则</th></tr></thead><tbody><tr><td style="text-align:center">行首 <code>#</code></td><td>全行注释，不支持行尾类注释 (转义 <code>\#</code>)</td></tr><tr><td style="text-align:center">行首 <code>!</code></td><td>否定模式 (转义 <code>\!</code>)</td></tr><tr><td style="text-align:center"><code>**</code></td><td>匹配任意路径</td></tr><tr><td style="text-align:center"><code>*</code></td><td>匹配任意多个字符</td></tr><tr><td style="text-align:center"><code>?</code></td><td>匹配任意一个字符</td></tr><tr><td style="text-align:center"><code>doc/**</code></td><td>匹配 doc 文件夹下的全部内容</td></tr><tr><td style="text-align:center"><code>doc/**/a</code></td><td>匹配任意深度路径下的 a 文件或文件夹</td></tr><tr><td style="text-align:center"><code>/</code></td><td>表示路径分隔符，不区分操作系统</td></tr><tr><td style="text-align:center"><code>/</code> 结尾</td><td>仅会匹配文件夹，否则会匹配文件和文件夹</td></tr><tr><td style="text-align:center">空行</td><td>不匹配任何文件</td></tr><tr><td style="text-align:center">行尾空格</td><td>默认被忽略，可使用 <code>\ </code> 进行转义</td></tr><tr><td style="text-align:center">行首空格</td><td>被正常处理，不会被忽略</td></tr></tbody></table><p>当前 <code>.gitignore</code> 文件定义规则的优先级高于上级路径 <code>.gitignore</code> 定义规则的优先级；后定义的规则优先级高于前面定义规则的优先级。</p><h3 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向本地仓库添加一个新的远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add &lt;name&gt; &lt;url&gt; <span class="comment"># &lt;name&gt; 远程仓库的名称，通常是 origin</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示您设置的远程存储库的名称</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示远程存储库的名称和 URL</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v <span class="comment"># -v, --verbose</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程存储库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote <span class="built_in">rm</span> &lt;name&gt; <span class="comment"># remove, rm</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改 git repo 的 URL</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote set-url origin &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程分支和本地分支的对应关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote show origin</span></span><br></pre></td></tr></table></figure><h3 id="同步"><a class="markdownIt-Anchor" href="#同步"></a> 同步</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取远程仓库所有分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程分支合并到当前分支以使其保持最新状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge &lt;name&gt;/&lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有快进</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --no-ff [<span class="built_in">alias</span>]/[branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅快进</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --ff-only [<span class="built_in">alias</span>]/[branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地分支提交传输到远程存储库分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;name&gt; &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从跟踪远程分支获取并合并任何提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将另一个分支的一个特定提交合并到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;hash-id&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">抛弃本地所有的修改，回到远程仓库的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch --all &amp;&amp; git reset --hard origin/main</span></span><br></pre></td></tr></table></figure><h3 id="观察你的仓库"><a class="markdownIt-Anchor" href="#观察你的仓库"></a> 观察你的仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前活动分支的提交历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示 branchA 上不在 branchB 上的提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> branchB..branchA</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示更改文件的提交，即使跨重命名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示 branchA 中的内容与 branchB 中的内容的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff branchB...branchA</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以人类可读的格式显示 Git 中的任何对象</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show &lt;SHA&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分支"><a class="markdownIt-Anchor" href="#分支"></a> 分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r <span class="comment"># -r, --remotes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有分支，本地和远程</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -av <span class="comment"># -a, --all; -v, -vv, --verbose</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快速切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 my-branch，并更新工作目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;my-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并切换到新分支 new_branch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;new-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从远程分支中创建并切换到本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将分支 branch_a 合并到分支 branch_b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;branch-b&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge &lt;branch-a&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除名为 my-branch 的分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d &lt;my-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标记当前提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h2><h3 id="做出改变"><a class="markdownIt-Anchor" href="#做出改变"></a> 做出改变</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在工作目录中显示修改后的文件，为您的下一次提交暂存</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂存文件，准备提交</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂存所有更改的文件，准备提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所有暂存文件提交到版本化历史记录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;commit message&quot;</span> <span class="comment"># -m &lt;msg&gt;, --message=&lt;msg&gt;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所有跟踪的文件提交到版本化历史记录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，-a 选项不会暂存未跟踪的新文件（即那些没有被 Git 跟踪过的文件）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -am <span class="string">&quot;commit message&quot;</span> <span class="comment"># -a, --all</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消暂存文件，保留文件更改</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所有内容恢复到最后一次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原所有修改，不会删除新增的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除新增的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -xdf <span class="comment"># -f, --force</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已更改但未暂存内容的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已 commited 但尚未提交的内容的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --staged</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在指定分支之前应用当前分支的任何提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 A 分支的某一个 commit，放到 B 分支上</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 B 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;B&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 A 分支 &lt;hash-id&gt; 的内容 pick 到 B 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;hash-id&gt;</span></span><br></pre></td></tr></table></figure><h3 id="临时提交"><a class="markdownIt-Anchor" href="#临时提交"></a> 临时提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存已修改和分阶段的更改</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出隐藏文件更改的堆栈顺序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从存储堆栈顶部编写工作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash pop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">丢弃存储堆栈顶部的更改</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash drop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到某个 stash 的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash apply &lt;stash@&#123;n&#125;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有的 stash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash clear</span></span><br></pre></td></tr></table></figure><h3 id="提交到远程仓库"><a class="markdownIt-Anchor" href="#提交到远程仓库"></a> 提交到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送当前分支到默认远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送指定分支到远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin &lt;feature-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送标签到远程</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin &lt;tagname&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送所有标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --tags</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销一条远程记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD~1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送到远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f origin HEAD:main</span></span><br></pre></td></tr></table></figure><h2 id="其他常用操作"><a class="markdownIt-Anchor" href="#其他常用操作"></a> 其他常用操作</h2><h3 id="rebase-merge-reset-revert"><a class="markdownIt-Anchor" href="#rebase-merge-reset-revert"></a> rebase、merge、reset、revert</h3><h4 id="git-rebase"><a class="markdownIt-Anchor" href="#git-rebase"></a> git rebase</h4><p><code>git rebase</code> 将一个分支上的更改应用到另一个分支的基础之上。它可以保持提交历史的整洁和线性，而不像<code> git merge</code> 那样生成一个额外的合并提交记录。</p><p>示例：</p><ol><li><p>更新 <code>feature</code> 分支到主分支的最新状态。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 切换到 feature 分支：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout feature-branch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 更新主分支：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin main</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 返回到 feature 分支并执行 rebase：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout feature-branch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase main</span></span><br></pre></td></tr></table></figure></li><li><p>处理冲突</p><p>在 <code>rebase</code> 过程中，如果存在冲突，Git 会暂停并提示你解决冲突。解决冲突后，使用以下命令继续 <code>rebase</code>：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;conflicted-files&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><p>如果要中止 <code>rebase</code> 操作，可以使用：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase --abort</span></span><br></pre></td></tr></table></figure></li><li><p>推送变基后的更改</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --force origin feature-branch</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="git-merge"><a class="markdownIt-Anchor" href="#git-merge"></a> git merge</h4><p><code>git merge</code> 用于将两个或多个分支的开发历史合并在一起的命令。与 <code>git rebase</code> 不同的是，<code>merge</code> 保留了整个分支的历史记录，并在目标分支中创建一个新的合并提交。而 <code>rebase</code> 是将一个分支的改动在另一个分支的基础上重新应用。</p><p>示例：</p><ol><li><p>把 <code>feature-branch</code> 分支合并到 <code>main</code> 分支</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge feature-branch</span></span><br></pre></td></tr></table></figure></li><li><p>处理合并冲突</p></li><li><p>继续合并</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;conflicted-file&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>快进合并 (Fast-forward merge)</p><p>如果正在合并的分支是直接从目标分支创建的，而且目标分支在此期间没有任何新的提交，Git 会自动执行快进合并，不会创建新的合并提交。</p></li><li><p>禁用快进合并</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff feature-branch</span><br></pre></td></tr></table></figure></li><li><p>其他选项</p><ul><li><p><code>--squash</code>：将所有合并的提交压缩成一个提交。不会生成合并提交记录。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --squash feature-branch</span></span><br></pre></td></tr></table></figure><p>使用 <code>--squash</code> 合并后，你需要手动提交：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit</span></span><br></pre></td></tr></table></figure></li><li><p><code>--no-commit</code>：合并内容但不自动提交。你可以检查更改后手动提交。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --no-commit feature-branch</span></span><br></pre></td></tr></table></figure></li><li><p><code>--abort</code>：如果在合并中遇到问题或冲突而不想继续，可以使用该命令终止合并并恢复到合并前的状态。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --abort</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="git-reset"><a class="markdownIt-Anchor" href="#git-reset"></a> git reset</h4><p><code>git reset</code> 用于撤销更改、重置头指针位置以及修改暂存区和工作目录。它可以根据不同的模式（<code>--soft</code>、<code>--mixed</code> 或 <code>--hard</code>）来改变暂存区和工作目录的状态。</p><ol><li><p><code>--soft</code>：重置 HEAD 到指定提交，暂存区和工作目录不变。常用于修改最后一次提交。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --soft HEAD~1</span></span><br></pre></td></tr></table></figure><p>例如，上述命令将当前分支的 HEAD 移动到前一个提交，保留所有更改在暂存区中。你可以进行新的提交或调整提交信息。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend</span></span><br></pre></td></tr></table></figure></li><li><p><code>--mixed</code>（默认）：重置 HEAD 到指定提交，同步更新暂存区，但工作目录不变。常用于撤销提交但保留更改。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --mixed HEAD~1</span></span><br></pre></td></tr></table></figure></li><li><p><code>--hard</code>：重置 HEAD 到指定提交，同时同步更新暂存区和工作目录。会丢失所有未提交的更改。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD~1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以指定具体的 commit <span class="built_in">hash</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard e7a1e7a1</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="git-revert"><a class="markdownIt-Anchor" href="#git-revert"></a> git revert</h4><p><code>git revert</code> 用于撤销一个或多个已提交的变更，但与 <code>git reset</code> 不同，它不会改变项目的提交历史。相反，它会创建一个新的提交，这个提交包含了撤销指定提交的更改。这样的操作是“向前”撤销，仍然保留所有的提交记录。</p><ul><li><p>单个提交的撤销</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert &lt;commit-hash&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多个提交的撤销</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销最近的三个提交：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert HEAD~3..HEAD</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="放弃更改"><a class="markdownIt-Anchor" href="#放弃更改"></a> 放弃更改</h3><ul><li><p>丢弃工作目录中的更改</p><ul><li><p>使用 <code>git checkout</code>：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复单个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- &lt;path/to/file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全部文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- .</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>git restore</code>：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复单个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全部文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore .</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>丢弃暂存区中的更改</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复单个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset path/to/file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全部文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset</span></span><br></pre></td></tr></table></figure></li><li><p>丢弃未提交的文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看将要被删除的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -n</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">真正执行删除操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -f</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果目录中有未跟踪的子目录并想同时删除，可以使用 -d 选项</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -fd</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="重命名分支"><a class="markdownIt-Anchor" href="#重命名分支"></a> 重命名分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 重命名为 new</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -m &lt;newbranch&gt; <span class="comment"># -m, --move, move/rename a branch</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; <span class="comment">#重命名分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 推送并重置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin -u &lt;newbranch&gt; <span class="comment"># -u, --set-upstream</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin -d &lt;oldbranch&gt; <span class="comment"># 方法 1; -d, --delete</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin :&lt;oldbranch&gt; <span class="comment"># 方法 2</span></span></span><br></pre></td></tr></table></figure><h3 id="修改远程-commit-记录"><a class="markdownIt-Anchor" href="#修改远程-commit-记录"></a> 修改远程 Commit 记录</h3><ol><li><p>使用 <code>git rebase</code> 修改本地 Commit 记录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase -i &lt;base-commit&gt; <span class="comment"># -i, --interactive</span></span></span><br></pre></td></tr></table></figure><p><code>&lt;base-commit&gt;</code> 是想要开始修改历史的位置。例如，如果想修改最后的 3 个提交，可以这样：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase -i HEAD~3</span></span><br></pre></td></tr></table></figure><p>这会打开一个文本编辑器，显示最近 3 次提交的列表。你可以在列表中选择编辑、压缩、删除等操作。</p><ul><li><code>pick</code>：按原样保留此提交</li><li><code>reword</code>：保留此提交但编辑提交信息</li><li><code>edit</code>：保留此提交但会暂停变基，使你可以修改此提交</li><li><code>squash</code>：将此提交与前一个提交合并，并编辑提交信息</li><li><code>fixup</code>：将此提交与前一个提交合并，但不保留此提交的信息</li><li><code>drop</code>：完全删除此提交</li></ul><p>在编辑器中，可能会看到如下内容：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick abc1234 First commit message</span><br><span class="line">pick def5678 Second commit message</span><br><span class="line">pick ghi9012 Third commit message</span><br></pre></td></tr></table></figure><p>可以修改成：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit abc1234 First commit message</span><br><span class="line">pick def5678 Second commit message</span><br><span class="line">pick ghi9012 Third commit message</span><br></pre></td></tr></table></figure><p>然后保存并关闭编辑器。</p></li><li><p>编辑提交</p><p>此时 Git 会停止在第一个需要修改的提交。你可以使用以下命令进行修改：</p><ul><li>修改文件，e.g. <code>git add &lt;modified-file&gt;</code></li><li>使用 <code>git commit --amend</code> 进行提交更改</li></ul><p>修改完每个提交后，可以继续下一个提交：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><p>重复这个过程直到完成所有提交的修改。</p></li><li><p>强制推送到远程仓库</p><p>最后，确保没有人提交进行推送，强制推送这些更改到远程仓库。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f origin &lt;branch-name&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="worktree"><a class="markdownIt-Anchor" href="#worktree"></a> Worktree</h3><p><code>git worktree</code> 用于在同一个 Git 仓库中创建多个工作目录（工作树）。这对于在同一个仓库中的不同分支上进行并行开发特别有用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目前工作目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree list</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建工作目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 作为全新 branch</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree add -b &lt;new_branch_name&gt; &lt;folder_path&gt; &lt;source_branch&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 从已有的 branch</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree add &lt;folder_path&gt; &lt;source_branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除工作目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree remove &lt;worktrees&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新整理工作目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当手动删除了工作目录时，可以使用此命令清理它们的记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree prune</span></span><br></pre></td></tr></table></figure><h3 id="fork-仓库同步上游仓库"><a class="markdownIt-Anchor" href="#fork-仓库同步上游仓库"></a> Fork 仓库同步上游仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 设置上游仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add upstream &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 本地项目操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch upstream <span class="comment"># 获取上游仓库更新</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stach <span class="comment"># 暂存本地修改(如果有)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a <span class="comment"># 列出所有远程仓库地址(非必须)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase remotes/upstream/main <span class="comment"># 使用远程仓库的提交记录来重写本地提交记录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f <span class="comment"># 强制推送到远程(github)仓库</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stach pop <span class="comment"># 恢复暂存的本地修改(如果有)</span></span></span><br></pre></td></tr></table></figure><h3 id="查看某段代码是谁写的"><a class="markdownIt-Anchor" href="#查看某段代码是谁写的"></a> 查看某段代码是谁写的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git blame &lt;file-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="提交次数统计"><a class="markdownIt-Anchor" href="#提交次数统计"></a> 提交次数统计</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline | <span class="built_in">wc</span> -l</span></span><br></pre></td></tr></table></figure><h3 id="仓库大小"><a class="markdownIt-Anchor" href="#仓库大小"></a> 仓库大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Git 仓库的总大小</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git count-objects -vH <span class="comment"># -v, --verbose; -H, --human-readable</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出 Git 仓库中所有被跟踪的文件的大小</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git ls-files -z | xargs -0 <span class="built_in">du</span> -hs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git ls-files：输出仓库中所有被跟踪的文件的相对路径</span></span><br><span class="line">    # -z：使 git ls-files 以空字节（null 字节）作为分隔符输出文件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xargs：接受输入并将其逐个传递给 <span class="built_in">du</span> 命令</span></span><br><span class="line">    # -0：使 xargs 以空字节（null 字节）作为分隔符输入文件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">du</span>：<span class="built_in">du</span> 命令用于计算文件或目录的磁盘使用情况</span></span><br><span class="line">    # -h 选项表示以人类可读的格式显示（如 KB、MB）</span><br><span class="line">    # -s 选项表示计算总和，不显示子目录的详细信息</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询历史体积大的 10 个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rev-list --objects --all | git cat-file --batch-check=<span class="string">&#x27;%(objecttype) %(objectname) %(objectsize) %(rest)&#x27;</span> | awk <span class="string">&#x27;/^blob/ &#123;print substr($0,6)&#125;&#x27;</span> | <span class="built_in">sort</span> --numeric-sort --key=2 --reverse | <span class="built_in">head</span> -n 10 | <span class="built_in">cut</span> -c 13-</span></span><br></pre></td></tr></table></figure><h3 id="展示忽略的文件"><a class="markdownIt-Anchor" href="#展示忽略的文件"></a> 展示忽略的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status --ignored</span></span><br></pre></td></tr></table></figure><h3 id="清除-gitignore-文件中记录的文件"><a class="markdownIt-Anchor" href="#清除-gitignore-文件中记录的文件"></a> 清除 .gitignore 文件中记录的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -X -f</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-X: remove only files ignored by Git.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f, --force</span></span><br></pre></td></tr></table></figure><h3 id="孤立分支"><a class="markdownIt-Anchor" href="#孤立分支"></a> 孤立分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的孤立分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout --orphan &lt;branch-name&gt;</span></span><br></pre></td></tr></table></figure><p>孤立分支（orphan branch）不包含任何历史提交记录，相当于保存修改，但是重写 commit 历史，从这条分支开始的提交历史是全新的。比如在现有仓库中创建一个全新的项目时特别有用，而不想保留先前项目的历史记录。</p><h3 id="修改最后的提交"><a class="markdownIt-Anchor" href="#修改最后的提交"></a> 修改最后的提交</h3><ol><li><p>查看最后一次提交的信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -1</span></span><br></pre></td></tr></table></figure></li><li><p>修改最后一次提交</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改最后一次提交的作者信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend --author=<span class="string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重写最后的提交消息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend -m <span class="string">&quot;new message&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改最新的提交而不更改提交消息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend --no-edit</span></span><br></pre></td></tr></table></figure></li><li><p>修改提交后，将更改推送到远程仓库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --force origin &lt;branch-name&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://git-scm.com/book/zh/v2">Pro Git</a></li><li><a href="https://wangchujiang.com/reference/docs/git.html">Git 备忘清单</a></li><li><a href="https://learngitbranching.js.org">Learn Git Branching</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git 教程</a></li><li><a href="https://nulab.com/zh-cn/learn/software-development/git-tutorial/">适合初学者的简单 Git 教程</a></li><li><a href="https://segmentfault.com/a/1190000002918123">深入理解学习 Git 工作流（git-workflow-tutorial）</a></li><li><a href="https://wangchujiang.com/git-tips/">Git Tips</a></li><li><a href="https://ohshitgit.com/zh">Oh Shit, Git!?!</a></li><li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html">GitHub 秘籍</a></li><li><a href="https://open.leancloud.cn/git-commit-message/">Git Commit 日志风格指南</a></li><li><a href="https://missing-semester-cn.github.io/2020/version-control/">版本控制 (Git)</a></li><li><a href="https://wizardzines.com/git-cheat-sheet.pdf">git cheat sheet</a></li></ul>]]></content>
    
    
    <summary type="html">现在的代码管理版本控制工具几乎都是 Git 了，虽然有很多好看好用的 GUI 客户端（推荐 Fork），但常用的命令还是得要了然于心，这里只是列出常用的 Git 命令行指令，以供速查参考。</summary>
    
    
    
    
    <category term="Git" scheme="http://kiligwyu.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #117（2024.05.20）</title>
    <link href="http://kiligwyu.com/newsletter/117/"/>
    <id>http://kiligwyu.com/newsletter/117/</id>
    <published>2024-05-20T06:50:11.000Z</published>
    <updated>2024-05-20T08:01:11.387Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 117 期。本篇是对过去一周（05.13 - 05.19）的记录、思考与分享。</p><hr /><p>#TIL 这边路边的柳树挺多的，每次从柳树下经过，总感觉有水落下，那么这些水从哪来的呢，网上搜了下，原来是 <a href="https://baike.baidu.com/item/%E6%9F%B3%E6%B2%AB%E8%9D%89/5328818">柳沫蝉</a> 这个家伙的泡沫腺的分泌物，虽然没什么危害对人，但也得及时清洗，尤其对敏感体质人群。</p><p>#TIL iOS 的闹钟，之前有个版本是去掉了时间滚动选择，需要手动输入的，后来可能吐槽人太多，苹果又改回滚动选择了，我现在才发现其实苹果也保留了手动输入时间功能的，只要长按选中的时间松手后就会弹出键盘，就可以手动输入时间了。我个人是更喜欢手动输入时间的，可以快速的设置闹钟时间，可比滑拉半天滚轮快多了。via <a href="https://twitter.com/dsteppenbeck/status/1792323283909796195">@dsteppenbeck</a><br /><img width=50% alt="手动输入闹钟时间" src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405201513187.webp"></img></p><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><ul><li>CaesarZX - <a href="https://www.youtube.com/watch?v=l8RHGeMugOk">陈冠希代言 vvild 小野电子烟广告  | 1分钟版</a></li><li>Branch Education - <a href="https://www.youtube.com/watch?v=dX9CGRZwD-w">How are Microchips Made?</a></li></ul><h2 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h2><ul><li>卡瓦邦噶！-  <a href="https://www.kawabangga.com/posts/2393">为什么要“包含头不包含尾”？</a></li><li><a href="https://blog-cn.nocobase.com/posts/nocobase-opensource-income-3years/">一个不知名的开源项目可以带来多少收入 —— NocoBase 3 年总结分享</a></li><li><a href="https://lutaonan.com/blog/a-year-off-work/">不上班的第一年 | Randy’s Blog</a></li></ul><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E4%BE%AF%E4%B8%96%E8%BE%BE%E5%AE%9A%E5%BE%8B">侯世达定律</a><blockquote><p>做事所花费的时间总是比你预期的要长，即使你的预期中考虑了侯世达定律。</p></blockquote></li><li>VMware Fusion Pro 和 VMware Workstation Pro 对个人免费开放了，macOS 免费且强大虚拟机的新选择 via <a href="https://blogs.vmware.com/teamfusion/2024/05/fusion-pro-now-available-free-for-personal-use.html">VMware Fusion Blog</a></li><li>MASKED FORUM 假面圓桌派 - <a href="https://www.youtube.com/watch?v=nTp9b26KS78">【假面圓桌派】快速瞭解 OpenAI 剛發佈的 GPT-4o｜20 刀買男友、翻譯、導盲犬、老師｜免費羊毛｜iOS 18 的 Siri 不智障</a></li><li><a href="https://github.com/enkia/tokyo-night-vscode-theme">enkia/tokyo-night-vscode-theme</a></li><li><a href="https://blog.orangesai.com/p/ai-native-apps-developments-and-ideas">AI Native Apps 开发的一些实践和思考 | 橘子汽水铺 by orange.ai</a></li><li><a href="https://copybook.me">Copy Book</a>: 收集了互联网上各种常见场景下的标准英文表述和术语，做国际化时可以参考。via <a href="https://twitter.com/luoleiorg/status/1791359200058343635">@luoleiorg</a></li><li><a href="https://github.com/CapSoftware/Cap">CapSoftware/Cap</a>: Open source Loom alternative. Effortless, instant screen sharing.</li><li><a href="https://helm-app.com">Helm</a>: a native macOS app for App Store Connect that helps ship apps and updates faster and easier.</li><li><a href="https://github.com/ajeetdsouza/zoxide">ajeetdsouza/zoxide</a>: A smarter cd command. Supports all major shells.</li><li><a href="https://twitter.com/recatm/status/1790864765461340167">Reddit 问答版：为了赚钱你做过的最恶心的事情是什么？</a></li><li><a href="https://www.apple.com/newsroom/2024/05/apple-announces-new-accessibility-features-including-eye-tracking/">Apple announces new accessibility features, including Eye Tracking, Music Haptics, and Vocal Shortcuts</a><br />Vehicle Motion Cues Can Help Reduce Motion Sickness 这个可太有用了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 117 期。本篇是对过去一周（05.13 - 05.19）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;#TIL 这边路边的柳树挺多的，每次从柳树下经过，总感觉有水落下，那么这些水从哪来的呢，网上搜了下，原来是 &lt;a</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #116（2024.05.13）</title>
    <link href="http://kiligwyu.com/newsletter/116/"/>
    <id>http://kiligwyu.com/newsletter/116/</id>
    <published>2024-05-13T14:18:47.000Z</published>
    <updated>2024-05-13T14:58:22.050Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 116 期。本篇是对过去一周（05.06 - 05.12）的记录、思考与分享。</p><hr /><p>苹果 5 月 7 日发布了新一代 iPad Air 和 iPad Pro，首发 M4 芯片用在了 Pro 上，Pro 更强也更薄了，屏幕也升级了，接下来就看 6 月 WWDC 上公布的新系统了，肯定有 AI 方面的更新。iPad Pro 对我毫无吸引力，这么强的性能，也用不上，我的 9.7 英寸 iPad Pro 还在吃灰呢，不过我比较期待今年的新款 iPhone。</p><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><ul><li>天真的和感伤的小说家 - <a href="https://www.bilibili.com/video/BV17T421Q7ej/">给勇敢辞职的朋友煽风点火</a></li><li>橙红Iris - <a href="https://www.bilibili.com/video/BV1eH4y137qz/">【买齐所有】iPad 编年史（2010-2024）：一块玻璃的艺术之旅</a></li><li>星球研究所Institute for Planets - <a href="https://www.youtube.com/watch?v=0cqoFqj_yOY">恐高慎入！走出大凉山，到底有多难？| The Arduous Journey Out of Liangshan</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=hx1AxPmLAnM">世界上最豪华的火车上，吃的有多美味？</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1kE42137if/">医保DRG改革来了！它能让你安心看病吗？【柴知道】</a></li></ul><h2 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h2><ul><li>WildCat’s Blog - <a href="https://blog.wildcat.io/2024/04/lessons-learned-from-leaving-the-most-valuable-company-zh/">离开第一市值大厂，我学到了什么？</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>可以分析网站使用的技术栈的 Chrome 拓展 <a href="https://chromewebstore.google.com/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a> via <a href="https://twitter.com/vikingmute/status/1789831066578289096">@vikingmute</a>。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405132242482.webp" alt="GitHub 使用的技术栈" /></li><li>棒棒网址生成器：<a href="http://llIlI.lI">llIlI.lI</a> via <a href="https://twitter.com/chenxuu/status/1789321466544013539">@chenxuu</a>。<br />把网址变成棒棒，比如把 <a href="https://kilig.blog/">kilig.blog</a> 变成 <a href="http://IIIIIIlIIIl.llIlI.lI">IIIIIIlIIIl.llIlI.lI</a>，这个跟 <a href="https://ooooooooooooooooooooooo.ooo">Looooooooooooooooooooooonger</a> 有异曲同工之妙。</li><li><a href="https://pushkeen.ai/appstore-icons">pushkeen.ai/appstore-icons</a>: 在线快速获取 App Store 的 App Logo</li><li><a href="https://github.com/jaywcjlove/reference">jaywcjlove/reference</a>: 为开发人员分享快速参考备忘清单 (速查表)</li><li><a href="https://books.epubkit.app">EpubKit 电子书精选</a> via <a href="https://twitter.com/randyloop/status/1788769413086560649">@randyloop</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 116 期。本篇是对过去一周（05.06 - 05.12）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;苹果 5 月 7 日发布了新一代 iPad Air 和 iPad Pro，首发 M4 芯片用在了 Pro 上，P</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #115（2024.05.06）</title>
    <link href="http://kiligwyu.com/newsletter/115/"/>
    <id>http://kiligwyu.com/newsletter/115/</id>
    <published>2024-05-06T00:50:18.000Z</published>
    <updated>2024-05-06T14:48:54.940Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 115 期。本篇是对过去一周（04.29 - 05.05）的记录、思考与分享。</p><hr /><p>五一小长假过的咋样啊朋友们，出去玩了没？<br />我们一号去买了辆三轮，二号五号骑三轮在黑岗口公园玩，三号四号在小孩儿姥姥家。<br />有考虑出远门玩，但考虑到五一哪儿哪儿人都多，带着小孩不方便，遂作罢，骑三轮边上公园玩玩吧。<br />三轮也是一早都想买了的，可以带小孩儿周边遛的。<br />四号在小孩儿舅舅家喝多了居然，还是啤酒，也就喝了一罐半，<a href="https://www.jiuhuar.com/craftbeer/56e13db58b15e6e6e1d4679f.html">橙色炸弹 16 度</a>，这个啤酒不好喝，拉黑 🤣。</p><p>自行车又吃灰好久了，清洗下，骑行黑岗口，是我目前骑行距离最长的一次 🤣。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062146743.jpeg" alt="Outdoor Cycle 26.26KM" /></p><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><ul><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1KE42157Qp/">【杜比视界】是建模还是实拍？它真的能骗过人眼！</a></li><li>毕的二阶导 - <a href="https://www.bilibili.com/video/BV1yM4m1Z7Ee/">喝 10 瓶水 vs 喝 10 瓶啤酒，哪个更难？？这一口真得讲究…</a></li></ul><h2 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h2><ul><li>枫言枫语 - <a href="https://justinyan.me/post/5968">凯文·凯利 73 岁生日的 101 条人生建议(中文翻译)</a></li><li><a href="https://5km.studio/newsletters/3">5km Studio Newsletter #3</a></li></ul><h2 id="壁纸"><a class="markdownIt-Anchor" href="#壁纸"></a> 壁纸</h2><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg78GDJceZ7bIpHwsLA">必应四月超高清无水印壁纸</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062242292.webp" alt="必应四月超高清无水印壁纸" /></li><li><a href="https://bodhichristian.pixieset.com">bodhichristian.pixieset.com</a>: Wallpapers for everyone. New collection monthly.<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062239659.webp" alt="bodhichristian.pixieset.com" /></li><li><a href="https://basicappleguy.com/basicappleblog/stripes">Stripes Wallpaper Collection</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062240501.webp" alt="Stripes Wallpaper Collection" /></li></ul><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li><a href="https://github.com/dylanaraps/neofetch">dylanaraps/neofetch</a> 停止更新了，替代品可以用 <a href="https://github.com/fastfetch-cli/fastfetch">fastfetch-cli/fastfetch</a></li><li><a href="https://github.com/Antonoko/playdate-chinese-IME">Antonoko/playdate-chinese-IME</a>: a high efficiency Chinese/English input method on playdate</li><li><a href="https://docs.proxyman.io/troubleshooting/ios-16-devices-issues">iOS 16 and iOS 17 issues | Proxyman Documentation</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 115 期。本篇是对过去一周（04.29 - 05.05）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;五一小长假过的咋样啊朋友们，出去玩了没？&lt;br /&gt;
我们一号去买了辆三轮，二号五号骑三轮在黑岗口公园玩，三号四</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #114（2024.04.29）</title>
    <link href="http://kiligwyu.com/newsletter/114/"/>
    <id>http://kiligwyu.com/newsletter/114/</id>
    <published>2024-04-29T05:56:55.000Z</published>
    <updated>2024-04-29T06:40:32.111Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 114 期。本篇是对过去一周（04.22 - 04.28）的记录、思考与分享。</p><hr /><p>又是无趣的一周。<br />星巴克办公，为新产品做技术调研，基本确定了实现方案，接下来就是开发了。<br />简单了解下 Telegram 的机器人和 API，把部分通知接入 Telegram。<br />同时也在继续学习 SwiftUI。</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>惜车工场CSW - <a href="https://www.bilibili.com/video/BV1Gz42167HN/">小米 SU7 即将满月，我们有几个新问题想请教雷总！「迟到车评」</a></li><li>两颗皮蛋 - <a href="https://www.bilibili.com/video/BV1am41127dS/">[杜比] 10000 公里深测，特斯拉究竟改变了什么？</a></li><li>崔永元 - <a href="https://www.youtube.com/watch?v=Y8o279e0E4s">说说王志安，说说柴静他们的过去和现在！</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=8NR2s2KcmAc">为什么草莓味的食品没啥草莓味？</a></li><li>柴知道 ChaiKnows Official Channel - <a href="https://www.youtube.com/watch?v=d0sB_AyFn54">人死之后会再社死一次吗？你在网上的秘密守得住吗？【柴知道：人生大题】</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>少数派 - <a href="https://sspai.com/post/88299">iPhone 终于有任天堂模拟器了：聊聊热门应用 Delta 的前世今生</a></li><li><a href="https://franktan.blog/2024/04/25/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E7%9A%84try-swift-tokyo%E5%B0%8F%E8%AE%B0/">第一次参加的 try! Swift Tokyo 小记</a></li><li>肇鑫的日常博客 - <a href="https://zhaoxin.pro/life/17138654694795.html">今天购物的两件小事</a></li><li>Holy Swift - <a href="https://holyswift.app/common-mistakes-to-avoid-when-using-enums-in-swift/">Common Mistakes to Avoid When Using Enums in Swift</a></li><li>肘子的 Swift 记事本 - <a href="https://fatbobman.com/zh/posts/in-depth-exploration-of-overlay-and-background-modifiers-in-swiftui/">深入探索 SwiftUI 中的 Overlay 和 Background 修饰器</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://github.com/lihaoyun6/QuickRecorder">lihaoyun6/QuickRecorder</a>: A lightweight screen recorder based on ScreenCapture Kit for macOS / 基于 ScreenCapture Kit 的轻量化多功能 macOS 录屏工具</li><li><a href="https://github.com/s1ntoneli/AppUpdater">s1ntoneli/AppUpdater</a>: A simple app-updater for macOS, checks your GitHub releases for a binary asset and silently updates your app.</li><li><a href="https://ddyx.me/">低端游戏</a>：在浏览器里玩怀旧游戏。via <a href="https://twitter.com/hzlzh/status/1783386525390328231">@hzlzh</a><ul><li>在线体验 Windows 95/98：<a href="https://copy.sh/v86/">copy.sh/v86/</a>。via <a href="https://twitter.com/hzlzh/status/1783397413207867773">@hzlzh</a></li></ul></li><li><a href="https://sindresorhus.com/icon-preview">Icon Preview</a>: Preview your app icon and menu bar icon.</li><li><a href="https://iknowwhatyoudownload.com/en/peer/">I Know What You Download</a>: 这个网站可以看到你用的 ip 出口和它所属的网段底下的 ip 在 BT 上下载了什么。via <a href="https://twitter.com/Moelin_Moe/status/1782658643802071136">@Moelin_Moe</a></li><li><a href="https://wangchujiang.com/devtutor/">DevTutor for SwiftUI</a>: SwiftUI 的速查手册</li><li><a href="https://epubkit.app/blog/indie-hacker/">硬地骇客 - 两个月 $12000 ARR 实践之路</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 114 期。本篇是对过去一周（04.22 - 04.28）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;又是无趣的一周。&lt;br /&gt;
星巴克办公，为新产品做技术调研，基本确定了实现方案，接下来就是开发了。&lt;br /&gt;</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #113（2024.04.22）</title>
    <link href="http://kiligwyu.com/newsletter/113/"/>
    <id>http://kiligwyu.com/newsletter/113/</id>
    <published>2024-04-22T05:24:31.000Z</published>
    <updated>2024-04-22T06:09:46.523Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 113 期。本篇是对过去一周（04.15 - 04.21）的记录、思考与分享。</p><hr /><p><a href="https://apps.apple.com/app/id6463897064/">Kroma - Your Color Library</a> 更新了了 1.5 版本，日常更新和修复。</p><p>周日去了荷泽看牡丹，并没有很壮观，盛花期可能已经过了，人还特别多，还得看着小朋友，也没有心情拍照，一张都没拍。</p><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>JUNPING - <a href="https://blog.imjp.uk/indie-app-zh">探索打造以用户为中心的独立应用</a></li><li>Piglei - <a href="https://www.piglei.com/articles/three-little-things-on-code-review/">Code Review 时，曾被我忽视的 3 件重要小事</a></li><li>德普王’s Blog - <a href="https://depp.wang/tools/">软件工具推荐</a></li><li>月光博客 - <a href="https://www.williamlong.info/archives/7421.html">看完豆瓣电影 250 后的体验</a></li></ul><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>星球研究所 Institute for Planets - <a href="https://www.youtube.com/watch?v=PprktCMvhLo">天才在左，疯子在右，法国在哪？【新列国志01】 | France: The Land of Geniuses and Maniacs</a></li><li>柴知道 ChaiKnows Official Channel - <a href="https://www.youtube.com/watch?v=d0sB_AyFn54">人死之后会再社死一次吗？你在网上的秘密守得住吗？【柴知道：人生大题】</a></li></ul><h3 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h3><ul><li><a href="https://apps.apple.com/app/id1048524688">Delta - Game Emulator</a> - All-in-One GBA4iOS Successor<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221336313.webp" alt="Delta - App Store Preview Screenshot" /></li></ul><blockquote><p>Delta – Game Emulator 是一款新鲜上架 App Store，适配 iPhone 的游戏模拟器，支持NES、SNES、Game Boy、Game Boy Color、Game Boy Advance、Nintendo DS、Nintendo 64、Sega Genesis 等多种游戏机，需要自备游戏 ROM。<a href="https://www.appinn.com/delta-game-emulator/">@Appinn</a></p></blockquote><p>终于可以在 iPhone 上玩小时候的小游戏了，很早以前我就分享过我收集的小游戏 <a href="https://github.com/KiligWYu/PlayForFun">KiligWYu/PlayForFun</a>，除了游戏 rom，还有一些 Flash 小游戏（swf）。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221347219.webp" alt="在 iPhone 上玩小游戏" /></p><ul><li><p><a href="https://apps.apple.com/app/id6478897923">雀乐</a><br />原落网，iOS 客户端，发现独立、小众好听的音乐。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221350938.webp" alt="雀乐 - App Store Preview Screenshot" /></p></li><li><p><a href="https://sindresorhus.com/command-x">Command X</a> - Cut and paste files in Finder<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221359770.webp" alt="Command X Preview Screenshot" /></p></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://github.com/tonyhuan/GuanKiapTsingKhai">tonyhuan/GuanKiapTsingKhai</a> - 原俠正楷，整合「芫荽」及「霞鶩文楷輕便版」這二個基於「Klee One」改造的中文字型，並提供簡轉繁字型 (簡體改以繁體顯示) 及偽直排字型 (各單字旋轉 90 度形成直書排版)。<br /><img src="https://github.com/tonyhuan/GuanKiapTsingKhai/raw/main/img/GKTK_Sample_112-00.png" alt="GuanKiapTsingKhai Preview" /></li><li><a href="https://github.com/quilljs/quill">quilljs/quill</a> - 开源富文本编辑器</li><li><a href="https://github.com/Lakr233/BBackupp">Lakr233/BBackupp</a> - Automated iOS Backup Robot.<br />开源的 iOS 备份工具。<br /><img src="https://github.com/Lakr233/BBackupp/raw/main/Resource/Readme/SCR-20240322-khfv.jpeg" alt="BBackupp Preview Screenshot" /></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 113 期。本篇是对过去一周（04.15 - 04.21）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://apps.apple.com/app/id6463897064/&quot;&gt;Kroma</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #112（2024.04.15）</title>
    <link href="http://kiligwyu.com/newsletter/112/"/>
    <id>http://kiligwyu.com/newsletter/112/</id>
    <published>2024-04-15T05:56:50.000Z</published>
    <updated>2024-04-15T06:39:12.872Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 112 期。本篇是对过去一周（04.08 - 04.14）的记录、思考与分享。</p><hr /><p>又到了杨柳絮漫天飞舞的时候，现在还不算严重。</p><p>再过两天，小孩奶奶就来了，我就能轻松些了。</p><p>家里攒了好多花盆了，留着吧没用还占地，弃之可惜。我现在已经不喜欢养花了，最后净剩些盆。</p><p>给图片添加类似 macOS 窗口截图时的阴影的小工具 <a href="https://apps.apple.com/app/id1633245174/">MSS</a> 更新了 1.4 版本，此次更新支持了从剪贴板粘贴图片，也修复了些小问题。</p><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>吟游诗人基德 - <a href="https://www.bilibili.com/video/BV1Cq421c7hY/">【基德】减肥神技？？168 断食法的真相</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://www.pcspy.net">播客广场</a><ul><li>少数派 - <a href="https://sspai.com/post/87991">为了发现更多感兴趣的播客，我开发了一款工具</a></li></ul></li><li><a href="https://inpaintweb.lxfater.com">Inpaint-web</a> - 免费无限量去水印和物体的在线工具</li><li>#TIL macOS 应用启动时添加 <code>-_NS_4445425547 YES</code> 这个参数，可以在菜单栏获得一个 🐞 菜单，可以获取一些信息方便 debug，也可以用 <code>defaults write -g _NS_4445425547 -bool true</code> 让这个菜单显示在所有 App 上。via <a href="https://twitter.com/tualatrix/status/1777574176330789143">@tualatrix</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404151428686.webp" alt="Finder 的 🐞 菜单" /></li><li>小众软件 - <a href="https://www.appinn.com/just-one-page-pdf/">Just-One-Page-PDF - 将网页保存为 PDF：A4 尺寸，支持保存为一页或多页 PDF[Chrome]</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 112 期。本篇是对过去一周（04.08 - 04.14）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;又到了杨柳絮漫天飞舞的时候，现在还不算严重。&lt;/p&gt;
&lt;p&gt;再过两天，小孩奶奶就来了，我就能轻松些了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #111（2024.04.08）</title>
    <link href="http://kiligwyu.com/newsletter/111/"/>
    <id>http://kiligwyu.com/newsletter/111/</id>
    <published>2024-04-08T14:47:57.000Z</published>
    <updated>2024-04-09T01:15:13.928Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 111 期。本篇是对过去一周（04.01 - 04.07）的记录、思考与分享。</p><hr /><p>又是白天独自带小孩儿的半周，清明假期回小孩儿姥姥家了两天。天气不冷了，白天多带小孩儿在外面玩。乍暖还寒，容易感冒，我就稍有点，小孩儿也感冒了，鼻塞流涕咳嗽，快好了。<br />还得独自带小孩儿一周。在家陪小孩儿时间多了，跟我最亲 😄。</p><p>我最近反思了下自己，我认为自己还是缺乏行动力，看到好多朋友的产品，其实好多我也一早就想做的，可始终没能落地，加上缺乏设计能力，一拖再拖。今年希望可以发布更多产品，MVP 开发，快速迭代。</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>bopular - <a href="https://www.bilibili.com/video/BV1Hm411z7kd/">此处有一些漂亮跟便宜</a></li><li>酱紫表 - <a href="https://www.bilibili.com/video/BV1kt421n7da/">短信转发最全教程｜ 2024 全平台</a></li><li>郭云神奇 - <a href="https://www.bilibili.com/video/BV1fE421M77b/">《大话西游》10 万字拆解：观音 1 句诡异台词，揭开细思极恐的剧情暗线！01</a></li><li>电影广角镜 - <a href="https://space.bilibili.com/1859934844/channel/collectiondetail?sid=2151210">《绝命毒师》中伏笔和隐喻</a></li><li>Hi 科普啦 - <a href="https://www.youtube.com/watch?v=qSDY-YDe2M0">曾经的“红人”黑皮西瓜，为啥一夜之间销声匿迹？它有何致命缺陷</a></li><li>MHYYYY - <a href="https://www.youtube.com/watch?v=3kWzAWIMJrk">愚人节政治梗图合集</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>十里 - <a href="https://5km.studio/blog/frp-proxy">frp 实现内网穿透</a></li><li>东坡肘子 - <a href="https://fatbobman.com/zh/posts/new-frameworks-new-mindset/">新框架、新思维：解析 Observation 和 SwiftData 框架</a></li><li>张小吉 - <a href="https://www.bmms.me/blog/silky-smooth-ios-progress-bar-interaction-explained">超级干干干干货！丝滑的 iOS 进度条解锁交互到底是怎么制作的？</a></li><li><a href="https://research.swtch.com/xz-timeline">Timeline of the xz open source attack</a></li></ul><h3 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h3><ul><li><a href="https://apps.apple.com/app/id6468948294">MusicBox Mini</a> - Chimes on Your Wrist<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404090858096.webp" alt="MusicBox Mini" /></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://morerss.com/zh.php">MoreRSS</a> - RSS 订阅合集，via <a href="https://twitter.com/huhexian">@huhexian</a></li><li><a href="https://megabits.xyz">megabits.xyz</a> - Megabits Studio 官网，via <a href="https://twitter.com/Megabits_mzq">@Megabits_mzq</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 111 期。本篇是对过去一周（04.01 - 04.07）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;又是白天独自带小孩儿的半周，清明假期回小孩儿姥姥家了两天。天气不冷了，白天多带小孩儿在外面玩。乍暖还寒，容易感冒</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #110（2024.04.01）</title>
    <link href="http://kiligwyu.com/newsletter/110/"/>
    <id>http://kiligwyu.com/newsletter/110/</id>
    <published>2024-04-01T02:55:21.000Z</published>
    <updated>2024-04-29T14:57:01.222Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 110 期。本篇是对过去一周（03.25 - 03.31）的记录、思考与分享。</p><hr /><p>更新了下博客主题，去掉了侧边栏，字体改为 <a href="https://fonts.google.com/noto/specimen/Noto+Serif+SC">Noto Serif SC</a>。</p><p>周六（03.30）小孩儿奶奶回老家了，照顾我外爷半个月，接下来这半个月又得我自己带孩儿了。<br />我现在自己带孩儿得心应手，非常专业了，只有一点，孩子会占用掉绝大部分时间 🤣。</p><p>周日（03.31）去了 <a href="https://baike.baidu.com/item/%E9%83%91%E5%B7%9E%C2%B7%E4%B8%AD%E5%9B%BD%E7%BB%BF%E5%8C%96%E5%8D%9A%E8%A7%88%E5%9B%AD/17197617">绿博园</a>，野餐，走马观花遛了一圈。以后买个帐篷去露营吧。</p><p>最近在学习进阶 SwiftUI，搜集的一些 demo 跟着写，之后可以放 GitHub 上。<em>UPDATE: <a href="https://github.com/KiligWYu/SwiftUIShowcase">SwiftUI Showcase</a></em></p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>杨光_建厨师 - <a href="https://www.bilibili.com/video/BV1px421k7gq/">如何完美做出好剥、不裂、软嫩的煮鸡蛋，溏心、全熟，都给你答案【解构家常菜】</a><ul><li><a href="https://www.bilibili.com/video/BV1p94y1n7My/">如何完美地做出各种熟度的煎蛋？溏心、全熟、漫画，都给你答案</a></li></ul></li><li>Phoenix Hou - <a href="https://www.youtube.com/watch?v=gP_oYl6tbb0">Chinese polyglot speaks 8 languages 【booklist in 8 languages】</a></li><li>差评君 - <a href="https://www.youtube.com/watch?v=fYfpqmwLV00">把淀粉肠干“塌房”的鸡骨泥，可能你已经吃一辈子了</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=T9vbXEWzVpY">猪油这么香，为什么吃的人却越来越少了？</a></li></ul><h3 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h3><ul><li><a href="https://miraa.app">Miraa.app</a> - AI Bilingual Subtitles &amp; Learning, on the <a href="https://apps.apple.com/app/miraa/id6462883096">App Store</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404011709092.webp" alt="Miraa" /></li><li>MyWeight² - Widgets for Weight Tracking: <a href="https://testflight.apple.com/join/tCFT6Kfr">TestFlight</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404011625092.png" alt="MyWeight²" /></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg74zDJceZ7bIpHwsLA">必应 2024.03 超高清无水印壁纸</a>，共计 31 张 111.3 MB。</li><li><a href="https://t2m.tuki.moe">Torrent to Magent Converter</a></li><li>赵亮老师的博客：<a href="https://pywonderland.com">朝花夕拾</a><ul><li><a href="https://pywonderland.com/envelope-and-caustics/">咖啡杯中的焦散线</a></li></ul></li><li>Steam - <a href="https://store.steampowered.com/app/2805070/Screenbound/">Screenbound</a><br /><img src="https://cdn.akamai.steamstatic.com/steam/apps/2805070/extras/screenbound-zoom.gif" alt="Screenbound" /></li><li><a href="https://github.com/easychen/one-person-businesses-methodology-v2.0">easychen/one-person-businesses-methodology-v2.0</a>: 《一人企业方法论》第二版</li><li>苹果新出的开发者油管频道：<a href="https://www.youtube.com/@AppleDeveloper/featured">Apple Developer</a></li><li><a href="https://tuki.moe/angular-magnet-and-torrent/">Magnet 和种子之间的关系 —— 在前端（Angular）实现种子到 Magnet 转换的实践</a><ul><li><a href="https://t2m.tuki.moe">Torrent to Magent Converter</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 110 期。本篇是对过去一周（03.25 - 03.31）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;更新了下博客主题，去掉了侧边栏，字体改为 &lt;a href=&quot;https://fonts.google.com/n</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #109（2024.03.25）</title>
    <link href="http://kiligwyu.com/newsletter/109/"/>
    <id>http://kiligwyu.com/newsletter/109/</id>
    <published>2024-03-25T06:06:18.000Z</published>
    <updated>2024-03-25T06:55:18.708Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 109 期。本篇是对过去一周（03.18 - 03.24）的记录、思考与分享。</p><hr /><iframe width="560" height="315" src="https://www.youtube.com/embed/v4xZUr0BEfE?si=HfweozMk54Pon4Yu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>春天到了，该发芽的发芽，该开花的开花。我竟没有心情出去走走，旅游景点也不想去，开封旅游系列停了好久了。</p><p>本周读完了《<a href="https://objccn.io/products/thinking-in-swiftui-2023">SwiftUI 编程思想（2023）</a>》和《<a href="https://book.douban.com/subject/1089243/">黄金时代</a>》。<br />这个版本的《黄金时代》包含《黄金时代》、《革命时期的爱情》和《我的阴阳两界》。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403251412923.webp" alt="SwiftUI 编程思想（2023）" /><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403251412885.webp" alt="黄金时代" /></p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>MHYYYY - <a href="https://www.youtube.com/watch?v=O4I7ewyN8Kk">自我辩论：性交易是否应该合法化 || 正方：反对性交易合法化 - 健康问题、剥削理论、管控角度、自身利益、社会风气、婚姻制度 || 反方：支持性交易合法化 - 性需求、财政问题、阶级问题、理念之争</a></li><li>小麦咪 - <a href="https://www.bilibili.com/video/BV1T6421F7m4/">35 岁学跳舞，会太晚吗？｜男左女右</a></li><li>和之梦 - 官方频道 - <a href="https://www.youtube.com/watch?app=desktop&amp;v=D3BED0a5BAc">28 岁大厂退休前员工：好烦，人死了，钱都花不完完【我住在这里的理由367】</a></li><li>__cling- - <a href="https://www.bilibili.com/video/BV1tA4m1P7J7/">加州旅馆有什么能力？让我们听到吐也还如此着迷？</a><ul><li>__cling- - <a href="https://www.bilibili.com/video/BV1FK421e7SL/">听了一万遍渡口，却不知道渡口为什么好？为什么渡口能成为大家的煲机神曲呢？</a></li></ul></li><li>冷科普 - <a href="https://www.bilibili.com/video/BV1NC411t7MV/">“车轮悬挂”是什么？在轮子上方顶支笔，有趣的现象发生了</a></li><li>方猫boom - <a href="https://www.bilibili.com/video/BV1j6421F7WW/">抓娃娃机的结构原理，为什么抓不到？</a></li><li>是老胡没错 - <a href="https://www.bilibili.com/video/BV1Nw4m1o7MJ/">职 场 废 物 3</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>少数派 - <a href="https://sspai.com/post/87503">2023 年度征文获奖结果公布</a></li><li>罗磊的独立博客 - <a href="https://luolei.org/fighting-cancer">我的老婆确诊肺癌，希望能得到你的帮助</a></li></ul><h3 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h3><p>图拉鼎老师的新作 <a href="https://apps.apple.com/app/id6475077023">MarkMark</a> 发布了，MarkMark 是一款专门为 Apple 平台设计开发的「稍后读」+「收藏夹」原生产品，支持 iPhone、iPad 和 Mac，目前免费。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403251450395.webp" alt="MarkMark" /></p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>雀乐（原落网） - <a href="https://space.bilibili.com/21386343">bilibili/21386343</a><br />才发现落网去年八月就已经回归了，更名为雀乐，落网曾是我最喜欢的音乐网站之一。</li><li>一个投票，via <a href="https://t.me/AppleNuts/1946">@AppleNuts</a>，果然大家都讨厌百度。<br />未来苹果很有可能在 AI 方面和百度合作，出于国内的合规要求，希望苹果不要封死使用其他 AI 的可能性。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403251429157.webp" alt="狗都不用的“文心一言”" /></li><li>macOS 版 Windows USB 启动盘创建工具，<a href="https://github.com/TechUnRestricted/windiskwriter">TechUnRestricted / windiskwriter</a><br /><img src="https://camo.githubusercontent.com/35388342333d3735d8c91d0eeaa0aab7c71b2ec0427e3a48ffa0793d826abc1b/68747470733a2f2f692e706f7374696d672e63632f435979665a6234592f57696e2d4469736b2d5772697465722d53637265656e73686f742d506169722e706e67" alt="WinDiskWriter Screenshot" /></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 109 期。本篇是对过去一周（03.18 - 03.24）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.c</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #108（2024.03.18）</title>
    <link href="http://kiligwyu.com/newsletter/108/"/>
    <id>http://kiligwyu.com/newsletter/108/</id>
    <published>2024-03-18T07:48:49.000Z</published>
    <updated>2024-03-18T09:27:41.387Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 108 期。本篇是对过去一周（03.11 - 03.17）的记录、思考与分享。</p><hr /><p>上期说到错过了首映且便宜的 <a href="https://movie.douban.com/subject/35575567/">沙丘 2 Dune: Part Two (2024)</a> IMAX 电影，本周二（03.12）去看了，还是在闲鱼上买的票，¥41，便宜了 ¥10.9。<br />还看了些《沙丘 2》的影片解析。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403181611268.webp" alt="沙丘 2 Dune: Part Two (2024)" /></p><p>上周看的《周处除三害》，看了些影片解析，里面的很多细节，不看解析根本发现不了，对影片的理解也更进一步了。<br />有点后悔在电影院看《周处除三害》了，因为院线是删减版的。</p><p>去年还在订阅 SetApp 时候，一直使用 CleanMyMac X 这款清理软件，退订 SetApp 之后，想找个平替，不考虑腾讯柠檬清理，最后在数码荔枝买了 <a href="https://www.macbooster.net">MacBooster 8</a>，但在应用更新时，<a href="https://www.corecode.io/macupdater/">MacUpdater</a> 提醒我 MacBooster 是个广告软件（adware），自动忽略了，从提供的 <a href="https://www.virustotal.com/gui/file/f06f5382374e7978738756d92aa76bad4951d127204b4d0bb3e4a9b15948a0ae/">链接</a> 来看，说的是 MacBooster 7，现在纠结要不要继续用 MacBooster 了。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403181622325.webp" alt="App 'MacBooster 8' Ignored " /></p><p>用了多年的窗口管理工具 <a href="https://magnet.crowdcafe.com">Magnet</a>，被发现会引起系统卡顿（via <a href="https://twitter.com/zhizijun/status/1768129567720603818">@zhizijun</a>），于是又找了款开源平替，<a href="https://rectangleapp.com">Rectangle</a>。</p><p>另外刷到 Reddit 上的一个帖子（via <a href="https://twitter.com/safaricheung/status/1767225437682594055">@safaricheung</a>），Downie 4 威胁随机删除用户电脑上的文件的帖子，原 po 是正版用户受害者。软件作者打击盗版无可厚非，但威胁删除用户文件不能接受。虽然有人逆向软件发现其实并不会真的删除用户文件。<br />我也是多年的正版 Downie 用户，其实视频下载工具有很多开源平替，后续我也将弃用 Downie。</p><ul><li><a href="https://www.reddit.com/r/mac/comments/1bbxs3f/dowine4_threates_a_legitimate_user_with_random/">Dowine4 threates a legitimate user with random deletion of files from my computer</a></li></ul><p>又学到了关于用 Swift 写命令行的知识点和小技巧，完善下之前写的几个小工具。</p><ul><li>一个工匠 - <a href="https://www.yigegongjiang.com/2023/SwiftSystemShell/">【Swift 三方源码 1】SwiftShell 高效的命令行工具</a><ul><li>一个工匠 - <a href="https://www.yigegongjiang.com/2023/SwiftCommandEnv/">Swift 脚本开发环境搭建</a></li></ul></li></ul><p>DailyWiki 1.1 喜提 Guideline 4.2.2 - Design - Minimum Functionality，这次更新增加了查看大（原）图功能，更新了数据（网页）解析，还有些 UI 细节更新，这下好了，不用更了。<br />该 app 本身确实简单，1.0 能上架，也是侥幸，可能遇到了宽松的审核员。接下来想想还能加些什么功能，把 app 弄复杂点再上架吧。</p><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1SF4m1V7vN/">给粉丝压个 Vision Pro？影视飓风 800 万粉丝 Q&amp;A！</a><ul><li><a href="https://mediastorm.feishu.cn/docx/Ij8sdqJZDoQEuqx9xcpcXAbfnbe">TORMCREW 屏保</a><br />使用了几天 TORMCREW 屏保，内存占用太大，弃用了。</li></ul></li><li>小Lin说 - <a href="https://www.youtube.com/watch?v=qk5hdxFJXg8">一口气了解全球经济形势</a></li><li><a href="https://www.youtube.com/@1379lab/videos">1379 号观察员</a><ul><li>1379号观察员 - <a href="https://www.youtube.com/watch?v=3DJbh_abWK4">一口气看懂《沙丘 2》- 人类每次正视自己的渺小，都是自身的一次巨大进步</a></li><li>该频道还有沙丘六部曲的解析 👍</li></ul></li><li>星球研究所Institute for Planets - <a href="https://www.youtube.com/watch?v=Kitz60V2sOE">等不及了！让春天来得更猛烈些吧！</a></li></ul><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>一个工匠 - <a href="https://www.yigegongjiang.com/2024/my2023/">我的 2023</a></li><li><a href="https://44maker.github.io/wiki/Mac/index.html">Mac 终极配置教程</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://apps.apple.com/app/id6476837563">Acute Calculator</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403181708229.webp" alt="Acute Calculator" /></li><li>那些当年被送入网瘾中心的孩子后来怎么样了，via <a href="https://twitter.com/Chai20230817/status/1768859409177088255">@Chai20230817</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 108 期。本篇是对过去一周（03.11 - 03.17）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上期说到错过了首映且便宜的 &lt;a href=&quot;https://movie.douban.com/subject/</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #107（2024.03.11）</title>
    <link href="http://kiligwyu.com/newsletter/107/"/>
    <id>http://kiligwyu.com/newsletter/107/</id>
    <published>2024-03-11T06:20:49.000Z</published>
    <updated>2024-03-11T07:55:08.024Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 107 期。本篇是对过去一周（03.04 - 03.10）的记录、思考与分享。</p><hr /><p>看完了《<a href="https://aryamansharda.gumroad.com/l/tcvck">Ace The iOS Interview</a>》，学到不少。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403111502725.webp" alt="Ace The iOS Interview" /></p><p>一早（03.02）就在万达电影客户端上买了周五（03.08）的《沙丘 2》IMAX 电影票，¥29.9，越早买越便宜，还送了张 ¥8 的优惠券。<br />但《沙丘 2》还是没看成，周五中午外甥幼儿园妇女节活动，把他奶奶拉去参加了，我只好在家带孩儿了，退了电影票，再买不到这个价的票了。<br />周四在闲鱼买电影票《周处除三害》，¥33，比我自己买便宜了 ¥0.9（使用之前买《沙丘 2》时候送的 ¥8 优惠券后，如果没有优惠券，相当于便宜了 8.9¥）。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403111526435.webp" alt="周处除三害 周處除三害 (2023)" /></p><p>跟媳妇儿日常吵架 😂。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>人物 - <a href="https://mp.weixin.qq.com/s/zlv4UpDY1qzRjAPt-WfkEw">王净 一个女孩，长大成人</a></li><li><a href="https://invertedpassion.com/why-time-seems-to-pass-faster-as-we-age/">Why time seems to pass faster as we age</a><ul><li><a href="https://readit.plus/a/18dnm/why-time-seems-to-pass-faster-as-we-age">为什么随着年龄增长时间似乎过得更快</a></li></ul></li></ul><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>酱紫表 - <a href="https://www.bilibili.com/video/BV1Kx4y1k7bs/">我的 Mac 8 + 4TB！苹果电脑外挂 SSD 尿袋教程</a></li><li>测委会-雷欧刘 - <a href="https://www.bilibili.com/video/BV1At4y1X7TC/">最懂汽车文化的剧组？盘点口碑神剧“绝命毒师”里的那些车【上集】</a></li><li>大帅老猿 - <a href="https://www.youtube.com/watch?v=STZkkKE8zfc">I spent $10,000 , drive an RV through 33 provinces,160 cities in China, totaling 18,641 miles.</a></li><li>十万个品牌故事 - <a href="https://www.bilibili.com/video/BV1ii421d7s6/">半斤卖千元，阿胶是宝贝还是智商税？</a></li></ul><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><ul><li>zhiqiang-official - <a href="https://podcasts.apple.com/us/podcast/zhiqiang-official/id1734138981">ep1: 聊聊开源和商业化</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 107 期。本篇是对过去一周（03.04 - 03.10）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;看完了《&lt;a href=&quot;https://aryamansharda.gumroad.com/l/tcvck&quot;&gt;</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>阅读记录（2024）</title>
    <link href="http://kiligwyu.com/learninpublic/2024/"/>
    <id>http://kiligwyu.com/learninpublic/2024/</id>
    <published>2024-03-11T05:15:36.000Z</published>
    <updated>2024-06-13T14:29:21.139Z</updated>
    
    <content type="html"><![CDATA[<p>2024 年书影音记录，日期为完成日期，★ 为（个人）推荐。</p><h2 id="电影"><a class="markdownIt-Anchor" href="#电影"></a> 电影</h2><ol><li>03.07: ★ <a href="https://movie.douban.com/subject/36151692/">周处除三害 周處除三害 (2023)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403111526435.webp" alt="周处除三害 周處除三害 (2023)" /></li><li>03.12: ★ <a href="https://movie.douban.com/subject/35575567/">沙丘 2 Dune: Part Two (2024)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403181611268.webp" alt="沙丘 2 Dune: Part Two (2024)" /></li><li>05.24: ★ <a href="https://movie.douban.com/subject/35712804/">首尔之春 서울의 봄 (2023)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406042258811.webp" alt="首尔之春 서울의 봄 (2023)" /></li><li>05.25: ★ <a href="https://movie.douban.com/subject/35876302/">晒后假日 Aftersun (2022)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406042258320.webp" alt="晒后假日 Aftersun (2022)" /></li><li>05.31: ★ <a href="https://movie.douban.com/subject/30466931/">波斯语课 Persischstunden (2020)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406042258511.webp" alt="波斯语课 Persischstunden (2020)" /></li><li>06.02: ★ <a href="https://movie.douban.com/subject/35230876/">沼泽深处的女孩 Where the Crawdads Sing (2022)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406042258163.webp" alt="沼泽深处的女孩 Where the Crawdads Sing (2022)" /></li><li>06.07: ★ <a href="https://movie.douban.com/subject/3042261/">西线无战事 Im Westen nichts Neues (2022)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406132227946.webp" alt="西线无战事 Im Westen nichts Neues (2022)" /></li><li>06.10: <a href="https://movie.douban.com/subject/35801819/">珀尔 Pearl (2022)</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406132227032.webp" alt="珀尔 Pearl (2022)" /></li></ol><h2 id="阅读"><a class="markdownIt-Anchor" href="#阅读"></a> 阅读</h2><ol><li><a href="https://aryamansharda.gumroad.com/l/tcvck">Ace The iOS Interview</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403111502725.webp" alt="Ace The iOS Interview" /></li><li>03.22: ★ <a href="https://book.douban.com/subject/1089243/">黄金时代</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403251412885.webp" alt="黄金时代" /></li><li>03.23: ★ <a href="https://objccn.io/products/thinking-in-swiftui-2023">SwiftUI 编程思想（2023）</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202403251412923.webp" alt="SwiftUI 编程思想（2023）" /></li><li>06.10: ★ <a href="https://book.douban.com/subject/35340053/">你是你吃出来的 2</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202406132227545.webp" alt="你是你吃出来的 2" /></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024 年书影音记录，日期为完成日期，★ 为（个人）推荐。&lt;/p&gt;
&lt;h2 id=&quot;电影&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#电影&quot;&gt;&lt;/a&gt; 电影&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;03.07: ★ &lt;a href=&quot;https://mo</summary>
      
    
    
    
    <category term="Learn in Public" scheme="http://kiligwyu.com/categories/Learn-in-Public/"/>
    
    
    <category term="lip" scheme="http://kiligwyu.com/tags/lip/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #106（2024.03.04）</title>
    <link href="http://kiligwyu.com/newsletter/106/"/>
    <id>http://kiligwyu.com/newsletter/106/</id>
    <published>2024-03-04T13:01:48.000Z</published>
    <updated>2024-03-04T14:18:37.168Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 106 期。本篇是对过去一周（02.26 - 03.03）的记录、思考与分享。</p><hr /><p>在读《<a href="https://aryamansharda.gumroad.com/l/tcvck">Ace The iOS Interview</a>》，还有三分之一，下周读完。</p><p>下周我外爷 96 大寿，我妈周末回老家了，下周又要我自己带孩儿几天了。</p><p>周末带家里的几个小孩去了趟 <a href="/KaifengTravel/WansuiShanWuxiaCity/">万岁山</a>，人山人海啊，简单玩了会就出来了，景区门口车真多。还是得淡季才能去，人太多了不好玩。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>5km - <a href="https://5km.studio/blog/2024-independent-development-six-month-summary">2024 年已过两月 - 独立开发半年记</a></li><li>pseudoyu - <a href="https://www.pseudoyu.com/zh/2024/02/29/weekly_review_20240229/">周报 #53 - 空白的三个月、生活漂流与春节</a></li><li>张小吉 - <a href="https://www.bmms.me/blog/slash-programmer-digital-nomad-transition">渐入佳境：斜杠程序员的数字游民转型之旅</a></li></ul><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>星球研究所 Institute for Planets - <a href="https://www.youtube.com/watch?v=vXWNCMY70lA&amp;pp=wgIGCgQQAhgB">且听，龙吟！拆开中国最强核电站，你会看到什么？| The Birth of HRP1000</a><ul><li><a href="https://www.youtube.com/watch?v=lLn0o6pqkgA&amp;pp=wgIGCgQQAhgB">什么是潮汕？| WHAT IS CHAOSHAN?</a></li></ul></li><li>司文的不思議世界 - <a href="https://www.youtube.com/watch?v=Gkg7dozcyvg">【天文】真實的火星｜人類無法登陸火星的真正原因？</a></li><li>neo - <a href="https://www.youtube.com/watch?v=VbeM8Lf7s5A">The Genius Design of Apple Park</a></li></ul><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg7suDJceZ7bIpHwsLA">必应 2024.02 超高清无水印壁纸</a>，共 29 张 109.8 MB。</li><li>一行命令绕开 Arc 浏览器新图标的推荐限制（推荐 50 个人才能使用）。via <a href="https://twitter.com/unixzii/status/1763407331831038254">@unixzii</a><br /><code>defaults write company.thebrowser.Browser currentAppIconName -string flutedGlass</code><br />参数 <code>-string</code> 后面的是 icon 名的小驼峰格式。</li><li>Chrome Extension - <a href="https://chromewebstore.google.com/detail/meta-seo-inspector/ibkclpciafdglkjkcibmohobjkcfkaef">META SEO inspector</a><br />Easily inspect the meta data found inside web pages, find issues and get advices to fix them.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 106 期。本篇是对过去一周（02.26 - 03.03）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在读《&lt;a href=&quot;https://aryamansharda.gumroad.com/l/tcvck&quot;&gt;A</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #105（2024.02.26）</title>
    <link href="http://kiligwyu.com/newsletter/105/"/>
    <id>http://kiligwyu.com/newsletter/105/</id>
    <published>2024-02-26T07:01:40.000Z</published>
    <updated>2024-02-26T10:04:54.333Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 105 期。本篇是对过去一周（02.19 - 02.25）的记录、思考与分享。</p><hr /><p>一波寒潮，降温不少，又下了一场雪，今年的雪格外多。</p><p>小朋友感冒快好了，这几天白天闹，晚上睡醒也闹，真是难带啊！（痛并快乐着 😂）</p><p>元宵节快乐啊！<br />元宵节买了点巧克力馅的汤圆吃，好吃，不喜欢吃传统馅的。<br />晚上放烟花的真多，咚咚咚响到后半夜。<br />元宵节过了，年也就过了。接下来规划下近期的安排，重心放在工作和学习上。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>Manjusaka - <a href="https://www.manjusaka.blog/posts/2024/02/20/a-simple-discussion-about-the-ultraman/">简单聊聊奥特曼中很有趣的细节</a></li><li>superleeyom - <a href="https://github.com/superleeyom/blog/issues/58">2024 香港银行卡办卡之旅</a></li><li>Randy -  <a href="https://read.lutaonan.com/preface">Randy 的读书乐园</a></li></ul><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>Bloomberg Originals - <a href="https://www.youtube.com/watch?v=PM101DvvG4Q">How Singapore Uses Science to Stay Cool</a><ul><li><a href="https://www.youtube.com/watch?v=Ttu55nEtC6o">How China’s BYD Overtook Tesla</a></li><li><a href="https://www.youtube.com/watch?v=08myo1UdTZ8">This Is How Huawei Shocked America With a Smartphone</a></li></ul></li><li>MHYYYY - <a href="https://www.youtube.com/watch?v=ctRF2wpKNrY">观众文章分享6：央视春晚为何难看 - 江主义的破产 || 高中生组织集体抗议饭堂公司经历</a><ul><li><a href="https://www.youtube.com/watch?v=U3j9iS3y58w">以我自己为例调查河南农村家庭情况</a></li></ul></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1H2421F7sg/">JPEG凭什么称霸互联网 30 多年？你大爷永远是你大爷！</a></li><li>阿Test正经比比 - <a href="https://www.bilibili.com/video/BV1Cm411U7s4/">关于 UP 主你想知道的问题，耗时三个月深度揭秘！</a></li><li>老师好我叫何同学 - <a href="https://www.bilibili.com/video/BV1c2421c7Jy/">很牛，但没用丨苹果 Vision Pro 深度体验</a></li><li>差评君 - <a href="https://www.youtube.com/watch?v=eAGUayRRwU8">拼多多的“仅退款”，到底惹怒了多少人？</a></li><li>Process X - <a href="https://www.youtube.com/watch?v=tywqPPPgnrw">制作无缝印章的过程。 日本印章每张售价超过 1000 美元。</a></li></ul><h4 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h4><ul><li><a href="https://apps.apple.com/app/id6463499163">Twodos - Simple Todos</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202402261802877.webp" alt="Twodos" /></li></ul><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><ul><li>iPhone 的 AirDrop 可能会导致网络不稳定，重启就好。via <a href="https://twitter.com/Blankwonder/status/1761766353248423978">@Blankwonder</a><ul><li>macOS 上也有类似的问题：Macrumors - <a href="https://forums.macrumors.com/threads/wi-fi-jitter-erratic-ping-latency-due-to-awdl-airdrop-airplay.2373916/">Wi-Fi Jitter, Erratic Ping, Latency Due To AWDL (AirDrop/AirPlay)</a></li></ul></li><li>#TIL 在折腾虚拟机时，可能会遇到在安装驱动前需要共享文件的情况。这时候可以用以下命令把文件夹打包成 ISO 镜像。via <a href="https://twitter.com/Megabits_mzq/status/1760970962982646100">@Megabits_mzq</a><br /><code>hdiutil makehybrid -o &quot;folder.iso&quot; &quot;folder&quot; -iso -joliet</code></li><li>#TIL You can easily combine icons in SF symbols 🤯 Duplicate an existing symbol as custom symbol and combine it with a component. via <a href="https://twitter.com/Daafdaan/status/1760577227014418919">@Daafdaan</a></li><li><a href="https://localsend.org/">LocalSend</a>: Share files to nearby devices. Free, open-source, cross-platform.</li><li>一行命令永久激活 Windows/Office。via <a href="https://twitter.com/lewangdev/status/1759832706572280102">@lewangdev</a><br /><code>irm https://massgrave.dev/get | iex</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 105 期。本篇是对过去一周（02.19 - 02.25）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;一波寒潮，降温不少，又下了一场雪，今年的雪格外多。&lt;/p&gt;
&lt;p&gt;小朋友感冒快好了，这几天白天闹，晚上睡醒也闹，</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #104（2024.02.19）</title>
    <link href="http://kiligwyu.com/newsletter/104/"/>
    <id>http://kiligwyu.com/newsletter/104/</id>
    <published>2024-02-19T06:40:01.000Z</published>
    <updated>2024-02-19T08:53:02.381Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 104 期。本篇是对过去一周（02.12 - 02.18）的记录、思考与分享。</p><hr /><p>新年快乐啊朋友们！都返程开工了吧，假期过的如何，返程路上堵吗？堵在路上蛮糟心的，比如堵在海南、新疆等，最近刷视频看到的，太难了。</p><p>我们初四（02.13）从孩子姥姥家回来了，孩子姑姑要来。一上高速就堵在了转高速的道上，看了下导航，果断绕行，避开拥堵，稍绕远了一点点，但不堵。<br />孩子姑姑在这宅了两天，候补到票就走了。<br />我妈也来了，我可以轻松一下了。<br />我爸车子在地库放没电了，才半个月，我准备买根电线自己搭电了。</p><p>又拿 Swift 写个命令行小工具，使用 <a href="https://developer.apple.com/documentation/linkpresentation">LinkPresentation</a> 把链接转成 Markdown 格式，个别网站的 Metadata 数据不全的就扒网站 HTML 解析获取。省得再复制创作者、标题、链接再手动拼 Markdown 了，写碎周报效率又提升了。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>Tw93 - <a href="https://tw93.fun/2024-02-09/tools.html">我的年度工具折腾之旅</a></li><li>小众软件 - <a href="https://www.appinn.com/rssworker/">RSSWorker - 为 B 站动态、TG 频道、微博用户、小红书用户生成 RSS[CF Worker]</a><ul><li><a href="https://www.appinn.com/appinn-2023-top-15-list-1/">小众软件 2023 年度精选.1</a></li><li><a href="https://www.appinn.com/2023-appinn-wechat-mp-top10/">兔年（2023）小众软件微信公众号阅读数前 10 的文章</a></li><li><a href="https://www.appinn.com/fix-tim-for-macos/">Fix Tim - 不重启，修 Mac：不用重启修复 macOS 使用中 bug 的工具</a></li><li><a href="https://www.appinn.com/mahjongg-mentor/">在线麻将接龙 - 经典配对游戏，龙年主题上线</a></li><li><a href="https://www.appinn.com/pinwin-for-win/">PinWin - Win 11 可用，置顶任何窗口</a></li></ul></li><li>少数派 - <a href="https://sspai.com/post/86214">人机交互的基石｜Apple 字体设计排版深度解析</a><ul><li><a href="https://sspai.com/post/82267">EP01. 丰田皇冠的前世今生</a></li></ul></li><li>蓝点网 - <a href="https://www.landiannews.com/download/102371.html">[下载] Linux 中国发布全站文章备份数据备份 包含 1.77GB 图片等附件</a></li></ul><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>惜车工场 CSW - <a href="https://www.bilibili.com/video/BV1NS421K7rW/">与车共舞 | JENNIE《YOU &amp; ME》全曲翻跳！像素级还原！！</a><ul><li><a href="https://www.bilibili.com/video/BV1TZ421S7dp/">女装拜年！龙年规划！价值 1000W 的年度情怀车大片！一次性放送！「惜车龙年特辑」</a></li></ul></li><li>毕的二阶导 - <a href="https://www.bilibili.com/video/BV1sm411Q7eY/">大过年的，千万不要这么煮饺子！</a></li><li>小 Lin 说 - <a href="https://www.youtube.com/watch?v=Qa9YXSj34h4">【硬核】神秘的金融产品 如何导致富豪们接连爆仓</a></li><li>酱紫表 - <a href="https://www.youtube.com/watch?v=1_MMS2kzqJc">你的手机也能用上 eSIM｜5ber eSIM 使用教程带你开卡香港 ClubSim</a></li><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1hu4m1P7Mu/">【杜比视界】激发你设备的极限画质，影视飓风 2023-2024 免费样片</a></li><li>老师好我叫何同学 - <a href="https://www.bilibili.com/video/BV1SB421z7cq/">【何同学竖屏】70000 块的烟花比 5 毛的好多少？</a></li><li>Little Chinese Everywhere - <a href="https://www.youtube.com/watch?v=vf1-p60nFSA">Entering China’s Tropical PARADISE 🇨🇳 I S2, EP65</a></li><li>YouTube Channel - <a href="https://www.youtube.com/@xiaorenwu">中國小人物</a></li></ul><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><ul><li>少数派 - <a href="https://sspai.com/post/86310">派早报：iFixit 拆解 Vision Pro，谷歌正式移除网页缓存功能</a><br />谷歌移除网页缓存功能，我说咋找不到网页缓存的入口了呢。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 104 期。本篇是对过去一周（02.12 - 02.18）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;新年快乐啊朋友们！都返程开工了吧，假期过的如何，返程路上堵吗？堵在路上蛮糟心的，比如堵在海南、新疆等，最近刷视频</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #103（2024.02.12）</title>
    <link href="http://kiligwyu.com/newsletter/103/"/>
    <id>http://kiligwyu.com/newsletter/103/</id>
    <published>2024-02-12T08:24:26.000Z</published>
    <updated>2024-02-12T08:48:56.648Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 103 期。本篇是对过去一周（02.05 - 02.11）的记录、思考与分享。</p><hr /><p>新年快乐！朋友们。🎆🎇🧨</p><hr /><p>本周又是独自带孩儿。终于熬到媳妇儿放假了，今年回媳妇儿家过年，又赶上孩子舅妈生二胎，月嫂又放鸽子了，重新再找的月嫂得到年后才来，媳妇儿又忙疯了，还得我自己带孩儿 🤣。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li><a href="https://www.bilibili.com/video/BV1vu4m1K7eG/">【官方双语】真怕了 - ElectroBoom 科技大升级 @FPS 罗兹 @辉光字幕组 联合制作 #linus 谈科技</a><br />哇，梦幻联动了。</li><li><a href="https://www.bilibili.com/video/BV1Sy42187RW/">先收藏！如何科学地配一副好眼镜？近视20年，我才知道自己没戴过好眼镜【柴知道】</a></li><li><a href="https://www.youtube.com/watch?v=JVJPAYwY8Us">Vision Pro Teardown: Behind the Complex and Creepy Tech</a><ul><li><a href="https://www.youtube.com/watch?v=wt22M5nWJ4Q">Vision Pro Teardown Part 2 - Is the Apple Vision Pro Really 4K?</a></li></ul></li></ul><hr /><p>本周没太多好分享的，手机都没空刷，就这吧先，下周就轻松了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 103 期。本篇是对过去一周（02.05 - 02.11）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;新年快乐！朋友们。🎆🎇🧨&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;本周又是独自带孩儿。终于熬到媳妇儿放假了，今年回媳妇</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #102（2024.02.05）</title>
    <link href="http://kiligwyu.com/newsletter/102/"/>
    <id>http://kiligwyu.com/newsletter/102/</id>
    <published>2024-02-05T03:03:07.000Z</published>
    <updated>2024-02-05T13:12:39.059Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 102 期。本篇是对过去一周（01.29 - 02.04）的记录、思考与分享。</p><hr /><p>周二（01.30）我妈回老家了，剩我自己带娃儿，这小人儿太磨人了，得时刻看着她，我自己可支配时间大幅减少，看我屏幕时间就知道 😂。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202402051523754.webp" alt="Screen Time Screenshot" /></p><p>一月份的必应超高清无水印壁纸已更新，31 张 107.6 MB，<a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg7sCDJceZ7bIpHwsLA">下载地址</a>。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>唐巧 - <a href="https://blog.devtang.com/2024/01/09/didi-driver-who-work-at-midnight/">跑夜车的滴滴司机</a></li></ul><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>中国国家地理 - <a href="https://www.bilibili.com/video/BV1Wx42197pV/">日月畸态：太阳和月亮的海市蜃楼</a></li><li>耿同学讲故事 - <a href="https://www.bilibili.com/video/BV1iJ4m1b7ob/">耿同学讲故事</a></li><li>鞑厨高寒 - <a href="https://www.bilibili.com/video/BV1zK42117Yv/">揭秘！粗犷主厨的理想厨房长啥样</a></li><li>bopular - <a href="https://www.bilibili.com/video/BV1Mm41197at/">还有 7 天就要关门的咖啡馆</a></li><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1qc411v7e7/">独家揭秘！Apple 新春大片是怎么拍的？</a></li><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1KT4y1t7BX/">【新年短片】你的愿望能过审吗？使用 iPhone15 Pro 拍摄</a></li><li>MHYYYY - <a href="https://www.youtube.com/watch?v=9e_1h3u2ZjI">王局事件简评：需要拆分问题，不要滑坡谬论 —— 歧视、言论自由、列宁式政党</a></li></ul><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><ul><li><a href="https://www.iplaysoft.com/dream-han-sans-serif.html">梦源黑体宋体 - “思源升级版”免费中文商用字体 (更多字重 / 解决行高居中问题)</a></li><li>苹果推出的新语言 <a href="https://pkl-lang.org">Pkl</a>：a programming language for configuration</li><li>左耳朵耗子从 2010 年到 2023 年的博客集合，<a href="https://www.dropbox.com/scl/fi/yl7zw3gnlvbq13ysebwoj/Haoel.epub?rlkey=ivupo6h3lfpuagr7r5cqwqp8g&amp;dl=0">下载链接</a>，via <a href="https://twitter.com/sailfishcc1/status/1753619394348134688">@sailfishcc1</a></li><li>我现在博客的图床用的 GitHub，回头可以试试 CloudFlare R2。via <a href="https://twitter.com/xinzhi/status/1753354832591941881">@xinzhi</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202402052110812.webp" alt="@xinzhi Screenshot" /></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 102 期。本篇是对过去一周（01.29 - 02.04）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;周二（01.30）我妈回老家了，剩我自己带娃儿，这小人儿太磨人了，得时刻看着她，我自己可支配时间大幅减少，看我屏</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #101（2024.01.29）</title>
    <link href="http://kiligwyu.com/newsletter/101/"/>
    <id>http://kiligwyu.com/newsletter/101/</id>
    <published>2024-01-29T02:10:08.000Z</published>
    <updated>2024-01-29T07:53:57.619Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 101 期。本篇是对过去一周（01.22 - 01.28）的记录、思考与分享。</p><hr /><p>在看王小波《黄金时代》，本周看完了《<a href="https://book.douban.com/subject/27013746/">革命时期的爱情</a>》，《黄金时代》有好多版本，包含的短片小说也不一样，我在看的版本是  <a href="https://book.douban.com/subject/1089243/">花城出版社的 1999 年版</a>，包含《黄金时代》、《革命时期的爱情》、《我的阴阳两界》。</p><p>用 Swift 简单写了个命令行爬虫工具，爬取某 X 站的磁力链接，省的再一个个点开页面复制了 😄。</p><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li><a href="https://www.youtube.com/watch?v=U1unmE6OlYM">Shot on iPhone 15 Pro Max | Chinese New Year - Little Garlic | Apple</a></li><li>b 站 up 主 - <a href="https://space.bilibili.com/514273130">老东北美食</a></li><li><a href="https://www.bilibili.com/video/BV1bK411b7wy/">这朵《繁花》让我恶心！！避雷小说批注版！！</a></li></ul><h4 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h4><ul><li>王登科 - <a href="https://greatdk.com/1962.html">哄哄模拟器的完整复盘，火了，但一度让我很发愁</a></li></ul><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><ul><li><a href="https://apps.apple.com/app/lok-board/id1621242252">Lok Board</a>，iPad 生产力工具。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202401291533506.webp" alt="Lok Board" /></li><li><a href="https://www.landiannews.com/archives/101996.html">软件破解站分发带毒软件专门攻击 Mac 用户 请 Mac 用户立即自查</a><br />使用正版软件，不仅仅是为了支持开发者，也为了个人数据安全。我电脑上就没有盗版软件，这些年光买软件都花了不少了。</li><li><a href="https://linux.do/t/topic/1051">你们赢了，但我却没有输</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 101 期。本篇是对过去一周（01.22 - 01.28）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在看王小波《黄金时代》，本周看完了《&lt;a href=&quot;https://book.douban.com/subje</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
</feed>
