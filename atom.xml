<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>𝕶𝖎𝖑𝖎𝖌&#39;𝖘 𝕭𝖑𝖔𝖌</title>
  
  <subtitle>代码之外</subtitle>
  <link href="http://kiligwyu.com/atom.xml" rel="self"/>
  
  <link href="http://kiligwyu.com/"/>
  <updated>2024-08-19T16:03:39.702Z</updated>
  <id>http://kiligwyu.com/</id>
  
  <author>
    <name>𝕶𝖎𝖑𝖎𝖌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kilig 的碎周报 - #121（2024.08.19）</title>
    <link href="http://kiligwyu.com/newsletter/121/"/>
    <id>http://kiligwyu.com/newsletter/121/</id>
    <published>2024-08-19T11:36:39.000Z</published>
    <updated>2024-08-19T16:03:39.702Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 121 期。本篇是对过去一周（08.12 - 08.18）的记录、思考与分享。</p><hr /><p>周末在路上看了四部电影，★ <a href="https://movie.douban.com/subject/1787291/">被嫌弃的松子的一生 嫌われ松子の一生 (2006)</a>、★ <a href="https://movie.douban.com/subject/6985810/">狩猎 Jagten (2012)</a>、 <a href="https://movie.douban.com/subject/30182726/">狩猎 The Hunt (2020)</a>、★ <a href="https://movie.douban.com/subject/35371261/">铃芽之旅 すずめの戸締まり (2022)</a>，其中《铃芽之旅》下载时候没检查，下成了国语配音的版本，看起来好别扭。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192011599.webp" style="width: 50%;" alt="被嫌弃的松子的一生 嫌われ松子の一生 (2006)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192012550.webp" style="width: 50%;" alt="狩猎 Jagten (2012)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192012268.webp" style="width: 50%;" alt="狩猎 The Hunt (2020)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192012583.webp" style="width: 50%;" alt="铃芽之旅 すずめの戸締まり (2022)"><p>周末在外面一家小店吃饭时候，店内有个有意思的音箱，<a href="https://future-mirror.com/morrart.html">MORROR ART</a> 悬浮透明歌词音箱，很不错的装饰品，查了下价格，¥3200+ 有点贵了。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192350673.webp" style="width: 50%;" alt="MORROR ART 音箱（图片截自官网）"><h3 id="影音"><a class="markdownIt-Anchor" href="#影音"></a> 影音</h3><ul><li>司文的不思議世界 - <a href="https://www.youtube.com/watch?v=-4a6s3kkxD0">被拖欠20年工資的天文學家，從貧苦和疾病中掙紮，擊碎了千百年來人們對宇宙的固有認知｜約翰內斯·開普勒</a></li><li>代码之外 Beyond Code - <a href="https://podcasts.apple.com/us/podcast/%E7%AC%AC-11-%E9%9B%86-owen-%E8%81%8A%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91%E7%9A%84%E8%B5%B7%E6%BA%90-%E8%A3%B8%E8%BE%9E%E4%B8%89%E5%B9%B4%E7%9A%84%E7%BB%8F%E5%8E%86-%E5%81%9A%E7%A9%B7%E4%BA%BA%E4%B9%9F%E8%83%BD%E7%94%A8%E7%9A%84%E4%BA%A7%E5%93%81-%E5%A4%A7%E4%BA%9A%E6%B9%BE%E7%9A%84%E7%94%9F%E6%B4%BB/id1688972924?i=1000664981781">‎第 11 集 | Owen 聊沉浸式翻译的起源、裸辞三年的经历、做穷人也能用的产品、大亚湾的生活</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=SpUi5Omd-dU">被吹上天的万能厨具，空气炸锅真的比油炸更健康吗？</a></li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=LdAZlnSxc7A">funnyCoder 14 期 - 和 david 聊聊加拿大程序员职场和移民问题</a></li><li>无穷小亮的科普日常 - <a href="https://www.bilibili.com/video/BV1g4421S7mE/">螽斯在厄瓜多尔能整出无数种花活</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://imfile.io">ImFile</a>：顺畅、高速、强大而便捷的下载工具</li><li>@haozes - <a href="https://twitter.com/haozes/status/1822608036915257388">小米 AX3600 路由器 + iPhone 15 Pro 低电量模式下连接，会导致路由器 crash</a>，“这个应该是 iPhone 15 使用了 160hz 频段的信号，以前的设备都没，但路由器出的时候，手机还没有，兼容性问题”</li><li><a href="https://github.com/internet-development/www-server-mono">internet-development/www-server-mono</a>: Server Mono is a font released by the Internet Development Studio Company.</li><li>Randy’s Blog - <a href="https://lutaonan.com/blog/code-artists/">「代码艺术家」不会被 AI 取代</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 121 期。本篇是对过去一周（08.12 - 08.18）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;周末在路上看了四部电影，★ &lt;a href=&quot;https://movie.douban.com/subject/</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #1</title>
    <link href="http://kiligwyu.com/newsletter/1/"/>
    <id>http://kiligwyu.com/newsletter/1/</id>
    <published>2024-08-14T12:46:45.000Z</published>
    <updated>2022-12-18T10:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么写周报"><a class="markdownIt-Anchor" href="#为什么写周报"></a> 为什么写周报</h2><p>我很长时间以来都是用邮件来处理稍后读内容，看到好的内容随手就转发到自己邮箱里，也订阅了很多 newsletter。最近 newsletter 又火了？，之前在 <a href="https://www.notion.so/kfang/Newsletter-68ee46c0a4574f659fb8a873ead438c6">中文 Newsletter 导航</a> 中订阅了不少创作者的 newsletter。上周在通勤路上，听完 <a href="https://etw.fm/">声东击西</a> 的 <a href="https://etw.fm/198">#198 反抗平台，与老派传播形式的复兴</a> 后，也决定创建一个自己的 newsletter，以记录与分享自己的所见所闻所想。</p><p>我的 newsletter 的订阅地址：<a href="https://www.getrevue.co/profile/Kilig">Kilig 的碎周报</a>，另外周报也将同时发布在 <a href="https://kiligwyu.com">我的博客</a> 上，也可以通过 <a href="https://kiligwyu.com/atom.xml">RSS</a> 订阅。</p><p>以下是第 1 期周报的内容。</p><!--- more ---><h2 id="听了什么"><a class="markdownIt-Anchor" href="#听了什么"></a> 听了什么</h2><p>每天的通勤时间较长，自己开车要花费两个小时以上，路上就听听播客，以下播客链接均为 Apple Podcast 地址。</p><p>本周听的多，之前假期攒下来的 🤣。</p><h3 id="声东击西"><a class="markdownIt-Anchor" href="#声东击西"></a> <a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640">声东击西</a></h3><p><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000551364382">#201 生育问题复杂，但还有更大隐忧</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000550655516">#200 群众基础，和那条通往夺冠之路</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000547760827">#198 反抗平台，与老派传播形式的复兴</a><br />也就是听了这期节目，才最后决定创建自己的 newsletter。</p><h3 id="故事-fm"><a class="markdownIt-Anchor" href="#故事-fm"></a> <a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960">故事 FM</a></h3><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551510242">E606. 我们在元宇宙里谈恋爱</a><br />挺有趣的两个人。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551263711">E605. 寻找小花梅，另一种存证</a><br />官方通告信他个鬼。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551017296">E604. 出轨成瘾妻子的自白：我犯了男人都会犯的错</a><br />出轨只有零次和无数次</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000550780355">E603. 整理师自述：我收拾的不是房间，是破碎的爱</a><br />第一次知道还有整理师这个职业，整理不是东西，是家庭。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000550533924">E602. 北京冬奥会的「起点」，一家消失的滑雪场</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000550290745">E601. 韩寒、郭敬明之外，从新概念作文大赛走出的年轻人</a><br />我上学那会儿好像新概念作文挺火的，韩寒、郭敬明的作品看的很少。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000548799177">E598. 腐女和 0 的爱情：错把路灯当月光</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000548571467">E597. 几位鹤岗的「失意者」决定拍电影</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000548330896">E596. 中国 UFO 往事</a><br />虽然有很多未解之谜，但目前也没确凿证据啊。</p><h3 id="三五环"><a class="markdownIt-Anchor" href="#三五环"></a> <a href="https://podcasts.apple.com/us/podcast/%E4%B8%89%E4%BA%94%E7%8E%AF/id1475113228">三五环</a></h3><p><a href="https://podcasts.apple.com/us/podcast/no-63-%E8%B7%9F%E5%B0%91%E6%A5%A0%E8%81%8A%E8%81%8A%E6%88%91%E4%BB%AC%E4%BB%8E%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BE%97%E5%88%B0%E7%9A%84%E4%BA%A7%E5%93%81%E5%90%AF%E5%8F%91/id1475113228?i=1000551265138">No.63 跟少楠聊聊我们从游戏中得到的产品启发</a></p><p><a href="https://podcasts.apple.com/us/podcast/no-61-%E8%B7%9F-61-%E8%81%8A%E8%81%8A%E4%BB%96%E6%9B%B2%E6%8A%98%E5%8F%88%E5%9D%A6%E7%84%B6%E7%9A%84%E5%88%9B%E4%B8%9A%E6%95%85%E4%BA%8B/id1475113228?i=1000548957645">No.61 跟 61 聊聊他曲折又坦然的创业故事</a><br />关注刘老板很久了，非常喜欢刘老板对生活对产品的态度。</p><p><a href="https://podcasts.apple.com/us/podcast/no-57-%E8%B7%9F%E5%86%AF%E5%A4%A7%E8%BE%89%E8%81%8A%E8%81%8A%E5%81%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%8C%BB%E7%96%97%E4%BC%81%E4%B8%9A%E7%9A%84%E4%BD%93%E9%AA%8C/id1475113228?i=1000546231350">No.57 跟冯大辉聊聊做互联网医疗企业的体验</a></p><h3 id="枫言枫语"><a class="markdownIt-Anchor" href="#枫言枫语"></a> <a href="https://podcasts.apple.com/us/podcast/%E6%9E%AB%E8%A8%80%E6%9E%AB%E8%AF%AD/id1069600190">枫言枫语</a></h3><p><a href="https://podcasts.apple.com/us/podcast/vol-62-%E5%9C%A8%E5%A4%A7%E8%BF%9E%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB%E6%98%AF%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/id1069600190?i=1000550983283">Vol. 62 在大连工作生活是什么体验</a><br />对简阅的作者有了进一步的了解，终于知道了他去年在三亚呆那么久的原因了 🤣（同期我也去三亚玩了一星期）。<br />佩服伊洪兄。</p><h3 id="卖鱼桥分桥"><a class="markdownIt-Anchor" href="#卖鱼桥分桥"></a> <a href="https://podcasts.apple.com/us/podcast/%E5%8D%96%E9%B1%BC%E6%A1%A5%E5%88%86%E6%A1%A5/id1564630230">卖鱼桥分桥</a></h3><p><a href="https://podcasts.apple.com/us/podcast/42-%E5%9B%9E%E4%B9%A1%E7%9A%84%E8%B7%AF%E4%B8%8A-%E6%88%91%E8%BE%93%E7%BB%99%E4%BA%86%E4%B8%80%E5%BA%A7%E6%A1%A5/id1564630230?i=1000550249724">42. 回乡的路上，我输给了一座桥</a><br />现在还有这么世外桃源的地方？。</p><h3 id="世界莫名其妙物语"><a class="markdownIt-Anchor" href="#世界莫名其妙物语"></a> <a href="https://podcasts.apple.com/us/podcast/%E4%B8%96%E7%95%8C%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%89%A9%E8%AF%AD/id1513821443">世界莫名其妙物语</a></h3><p>这女子相声节目相当欢乐啊 😄。</p><p><a href="https://podcasts.apple.com/us/podcast/ep77-%E6%83%85%E4%BA%BA%E8%8A%82%E7%89%B9%E5%88%AB%E8%8A%82%E7%9B%AE-%E4%B8%96%E7%95%8C%E4%BA%BA%E6%B0%91%E5%90%83%E7%B1%B3%E9%A5%AD/id1513821443?i=1000550970708">EP77 情人节特别节目：世界人民吃米饭！</a></p><p><a href="https://podcasts.apple.com/us/podcast/ep76-%E7%88%B1%E6%83%85%E6%98%AF%E4%BB%80%E4%B9%88%E9%A2%9C%E8%89%B2%E7%9A%84/id1513821443?i=1000550243586">EP76 爱情是什么颜色的</a></p><p><a href="https://podcasts.apple.com/us/podcast/ep75-%E9%9B%B6%E5%9F%BA%E7%A1%80-%E7%A5%9E%E6%9B%B2-%E5%85%A5%E9%97%A8/id1513821443?i=1000548754941">EP75 零基础《神曲》入门</a></p><h3 id="ux-coffee-设计咖"><a class="markdownIt-Anchor" href="#ux-coffee-设计咖"></a> <a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615">UX Coffee 设计咖</a></h3><p><a href="https://podcasts.apple.com/us/podcast/93-%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%AD%A2%E7%9A%84%E5%88%97%E8%BD%A6-hoka-%E7%9A%84-burnout-%E5%A3%B0%E9%9F%B3%E6%97%A5%E5%BF%97/id1099551615?i=1000550528491">#93：永不停止的列车（Hoka 的 burnout 声音日志）</a></p><h2 id="看了什么"><a class="markdownIt-Anchor" href="#看了什么"></a> 看了什么</h2><p><a href="https://www.bilibili.com/video/BV1R44y1H77u/">bilibili - 经验分享：非计算机专业的人如何转行程序员（宿琛）</a><br />还有价值的分享，把里面推荐的部分课程加到了 TODO 里了。</p><p><a href="https://www.aliyundrive.com/s/o94vsjtnn19">pdf - 高盛 2022 年全球经济展望（中文版）</a><br />该文件已被封杀了，难道是因为下面的两句话？阿里云盘还能下得到。</p><blockquote><p>世界第二大经济体中国的股票不仅大大低于美国股票的表现，而且也是所有主要股票市场中表现最差的，按人民币计算，总回报率为-21.2%。</p></blockquote><blockquote><p>同样，中国的高收益公司债 不仅明显低于美国的表现，而且是表现最差的市场之一，回报率为-26.3%。</p></blockquote><p><a href="https://www.v2ex.com/t/833951#reply40">v2ex - 8 万变 80 万</a><br /><a href="https://twitter.com/xiqingongzi">白宦成</a> 老师对这位独立开发老哥的 <a href="https://twitter.com/xiqingongzi/status/1493456735180587008">错误总结</a> 非常到位，值得所有创业者和独立开发者深思。</p><h2 id="读了什么"><a class="markdownIt-Anchor" href="#读了什么"></a> 读了什么</h2><p>正在读《<a href="https://book.douban.com/subject/26264163/">跳舞女郎</a>》 - [加拿大] 玛格丽特・阿特伍德，很不错的短篇小说集。</p><hr /><p>【完】</p><p>Thank you for subscribing. Have a great week.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么写周报&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#为什么写周报&quot;&gt;&lt;/a&gt; 为什么写周报&lt;/h2&gt;
&lt;p&gt;我很长时间以来都是用邮件来处理稍后读内容，看到好的内容随手就转发到自己邮箱里，也订阅了很多 newsletter。最近 </summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>30 Days of WWDC</title>
    <link href="http://kiligwyu.com/learninpublic/30DaysofXXX/"/>
    <id>http://kiligwyu.com/learninpublic/30DaysofXXX/</id>
    <published>2024-08-14T12:46:45.000Z</published>
    <updated>2022-12-18T10:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>这几天想起来很早之前听 <a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615">UX Coffee 设计咖</a> 的一期播客，<a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615?i=1000461867693">#74：100 天，你可以完成什么？</a>，翻出来又听了一遍，之所以想起来这个，是因为我也一直想做些阶段性的针对某一块儿内容的学习或训练。</p><p>又快要到 WWDC 了~~（咋还没官宣今年 WWDC 时间呢 😄）~~，那么专项学习就从 WWDC 开始吧，目标 30 天，每天看些历年 WWDC 视频，并做好笔记和练习，就在这里做个记录吧。WWDC 其实是最好的第一手的学习资料，之前 WWDC 看的太少了 🤣。</p><p>另外再开个 30 天阅读挑战吧，每日阅读一小时左右，一本书能拖好久才能读完，拯救一下我那可怜的阅读量 🤣。</p><ul><li><a href="#%E8%B5%B7%E5%9B%A0">起因</a></li><li><a href="#30-Days-of-WWDC">30 Days of WWDC</a><ul><li><a href="#Day-32-2022-05-14">Day 32 - 2022.05.14</a></li><li><a href="#Day-31-2022-05-13">Day 31 - 2022.05.13</a></li><li><a href="#Day-30-2022-05-12">Day 30 - 2022.05.12</a></li><li><a href="#Day-29-2022-05-11">Day 29 - 2022.05.11</a></li><li><a href="#Day-28-2022-05-10">Day 28 - 2022.05.10</a></li><li><a href="#Day-27-2022-05-07">Day 27 - 2022.05.07</a></li><li><a href="#Day-26-2022-05-05">Day 26 - 2022.05.05</a></li><li><a href="#Day-25-2022-05-04">Day 25 - 2022.05.04</a></li><li><a href="#Day-24-2022-05-03">Day 24 - 2022.05.03</a></li><li><a href="#Day-23-2022-04-30">Day 23 - 2022.04.30</a></li><li><a href="#Day-22-2022-04-29">Day 22 - 2022.04.29</a></li><li><a href="#Day-21-2022-04-28">Day 21 - 2022.04.28</a></li><li><a href="#Day-20-2022-04-26">Day 20 - 2022.04.26</a></li><li><a href="#Day-19-2022-04-25">Day 19 - 2022.04.25</a></li><li><a href="#Day-18-2022-04-24">Day 18 - 2022.04.24</a></li><li><a href="#Day-17-2022-04-23">Day 17 - 2022.04.23</a></li><li><a href="#Day-16-2022-04-22">Day 16 - 2022.04.22</a></li><li><a href="#Day-15-2022-04-21">Day 15 - 2022.04.21</a></li><li><a href="#Day-14-2022-04-20">Day 14 - 2022.04.20</a></li><li><a href="#Day-13-2022-04-19">Day 13 - 2022.04.19</a></li><li><a href="#Day-12-2022-04-18">Day 12 - 2022.04.18</a></li><li><a href="#Day-11-2022-04-17">Day 11 - 2022.04.17</a></li><li><a href="#Day-10-2022-04-16">Day 10 - 2022.04.16</a></li><li><a href="#Day-9-2022-04-15">Day 9 - 2022.04.15</a></li><li><a href="#Day-8-2022-04-14">Day 8 - 2022.04.14</a></li><li><a href="#Day-7-2022-04-13">Day 7 - 2022.04.13</a></li><li><a href="#Day-6-2022-04-12">Day 6 - 2022.04.12</a></li><li><a href="#Day-5-2022-04-11">Day 5 - 2022.04.11</a></li><li><a href="#Day-4-2022-04-10">Day 4 - 2022.04.10</a></li><li><a href="#Day-3-2022-04-09">Day 3 - 2022.04.09</a></li><li><a href="#Day-2-2022-04-08">Day 2 - 2022.04.08</a></li><li><a href="#Day-1-2022-04-07">Day 1 - 2022.04.07</a></li></ul></li></ul><h2 id="30-days-of-wwdc"><a class="markdownIt-Anchor" href="#30-days-of-wwdc"></a> 30 Days of WWDC</h2><p>配合 <a href="https://xiaozhuanlan.com/u/damonwong">老司机技术周报的 WWDC 内参</a> 食用更加。</p><h3 id="day-32-20220514"><a class="markdownIt-Anchor" href="#day-32-20220514"></a> Day 32 - 2022.05.14</h3><ul><li>[x] WWDC21 · Session 10054 · <a href="https://developer.apple.com/wwdc21/10054">What’s new in AppKit</a></li><li>[x] WWDC20 · Session 10045 · <a href="https://developer.apple.com/wwdc20/10045">Advances in diffable data sources</a></li><li>[x] WWDC20 · Session 10097 · <a href="https://developer.apple.com/wwdc20/10097">Advances in UICollectionView</a></li><li>[x] WWDC20 · Session 10026 · <a href="https://developer.apple.com/wwdc20/10026">Lists in UICollectionView</a></li></ul><h3 id="day-31-20220513"><a class="markdownIt-Anchor" href="#day-31-20220513"></a> Day 31 - 2022.05.13</h3><p>-[x] WWDC21 · Session 10297 · <a href="https://developer.apple.com/wwdc21/10297">Manage devices with Apple Configurator</a><br />-[x] WWDC21 · Session 10129 · <a href="https://developer.apple.com/wwdc21/10129">Manage software updates in your organization</a><br />-[x] WWDC21 · Session 10102 · <a href="https://developer.apple.com/wwdc21/10102">Meet the Location Button</a><br />-[x] WWDC21 · Session 10064 · <a href="https://developer.apple.com/wwdc21/10064">Meet the UIKit button system</a><br />-[x] WWDC21 · Session 10205 · <a href="https://developer.apple.com/wwdc21/10205">Review code and collaborate in Xcode</a><br />-[x] WWDC21 · Session 10276 · <a href="https://developer.apple.com/wwdc21/10276">Use the camera for keyboard input in your app</a></p><h3 id="day-30-20220512"><a class="markdownIt-Anchor" href="#day-30-20220512"></a> Day 30 - 2022.05.12</h3><p>-[x] WWDC21 · Session 10041 · <a href="https://developer.apple.com/wwdc21/10041">Extract document data using Vision</a><br />-[x] WWDC20 · Session 10027 · <a href="https://developer.apple.com/wwdc20/10027">Modern cell configuration</a><br />-[x] WWDC20 · Session 10652 · <a href="https://developer.apple.com/wwdc20/10652">Meet the new Photos picker</a><br />-[x] WWDC21 · Session 10046 · <a href="https://developer.apple.com/wwdc21/10046">Improve access to Photos in your app</a></p><h3 id="day-29-20220511"><a class="markdownIt-Anchor" href="#day-29-20220511"></a> Day 29 - 2022.05.11</h3><p>-[x] WWDC21 · Session 10114 · <a href="https://developer.apple.com/wwdc21/10114">Meet StoreKit 2</a><br />-[x] WWDC21 · Session 10174 · <a href="https://developer.apple.com/wwdc21/10174">Manage in-app purchases on your server</a><br />-[x] WWDC21 · Session 10175 · <a href="https://developer.apple.com/wwdc21/10175">Support customers and handle refunds</a></p><h3 id="day-28-20220510"><a class="markdownIt-Anchor" href="#day-28-20220510"></a> Day 28 - 2022.05.10</h3><p>-[x] WWDC21 · Session 10204 · <a href="https://developer.apple.com/wwdc21/10204">Distribute apps in Xcode with cloud signing</a><br />-[x] WWDC21 · Session 10261 · <a href="https://developer.apple.com/wwdc21/10261">Faster and simpler notarization for Mac apps</a><br />-[x] WWDC21 · Session 10166 · <a href="https://developer.apple.com/wwdc21/10166">Meet DocC documentation in Xcode</a><br />-[x] WWDC21 · Session 10167 · <a href="https://developer.apple.com/wwdc21/10167">Elevate your DocC documentation in Xcode</a><br />-[x] WWDC21 · Session 10235 · <a href="https://developer.apple.com/wwdc21/10235">Build interactive tutorials using DocC</a><br />-[x] WWDC21 · Session 10236 · <a href="https://developer.apple.com/wwdc21/10236">Host and automate your DocC documentation</a></p><h3 id="day-27-20220507"><a class="markdownIt-Anchor" href="#day-27-20220507"></a> Day 27 - 2022.05.07</h3><ul><li>[x] WWDC21 · Session 10293 · <a href="https://developer.apple.com/wwdc21/10293">Cross reference content with the Apple Music API</a></li><li>[x] WWDC21 · Session 10180 · <a href="https://developer.apple.com/wwdc21/10180">Detect and diagnose memory issues</a></li><li>[x] WWDC21 · Session 10202 · <a href="https://developer.apple.com/wwdc21/10202">Detect bugs early with the static analyzer</a></li><li>[x] WWDC21 · Session 10040 · <a href="https://developer.apple.com/wwdc21/10040">Detect people, faces, and poses using Vision</a></li><li>[x] WWDC21 · Session 10136 · <a href="https://developer.apple.com/wwdc21/10136">Discover account-driven User Enrollment</a></li></ul><h3 id="day-26-20220505"><a class="markdownIt-Anchor" href="#day-26-20220505"></a> Day 26 - 2022.05.05</h3><ul><li>[x] Tech Talks · Session 10856 · <a href="https://developer.apple.com/videos/play/tech-talks/10856">Find and fix hitches in the commit phase</a></li><li>[x] Tech Talks · Session 10892 · <a href="https://developer.apple.com/videos/play/tech-talks/10892">Explore unlisted app distribution</a></li><li>[x] Tech Talks · Session 10100 · <a href="https://developer.apple.com/videos/play/tech-talks/10100">Explore and manipulate data in Swift with TabularData</a></li><li>[x] WWDC21 · Session 10118 · <a href="https://developer.apple.com/wwdc21/10118">Automate CloudKit tests with cktool and declarative schema</a></li></ul><h3 id="day-25-20220504"><a class="markdownIt-Anchor" href="#day-25-20220504"></a> Day 25 - 2022.05.04</h3><ul><li>[x] Tech Talks · Session 10868 · <a href="https://developer.apple.com/videos/play/tech-talks/10868">Subscription offer codes</a></li><li>[x] Tech Talks · Session 206 · <a href="https://developer.apple.com/videos/play/tech-talks/206">QR Code Recognition on iOS 11</a></li><li>[x] Tech Talks · Session 10888 · <a href="https://developer.apple.com/videos/play/tech-talks/10888">Get started with product page optimization</a></li></ul><h3 id="day-24-20220503"><a class="markdownIt-Anchor" href="#day-24-20220503"></a> Day 24 - 2022.05.03</h3><ul><li>[x] Tech Talks · Session 10855 · <a href="https://developer.apple.com/videos/play/tech-talks/10855">Explore UI animation hitches and the render loop</a></li><li>[x] Tech Talks · Session 803 · <a href="https://developer.apple.com/videos/play/tech-talks/803">Designing for Subscription Success</a></li><li>[x] Tech Talks · Session 10857 · <a href="https://developer.apple.com/videos/play/tech-talks/10857">Demystify and eliminate hitches in the render phase</a></li></ul><h3 id="day-23-20220430"><a class="markdownIt-Anchor" href="#day-23-20220430"></a> Day 23 - 2022.04.30</h3><ul><li>[x] WWDC21 · Session 10019 · <a href="https://developer.apple.com/wwdc21/10019">Discover concurrency in SwiftUI</a></li><li>[x] WWDC21 · Session 10017 · <a href="https://developer.apple.com/wwdc21/10017">Bring Core Data concurrency to Swift and SwiftUI</a></li><li>[x] WWDC21 · Session 10196 · <a href="https://developer.apple.com/wwdc21/10196">Build interfaces with style</a></li><li>[x] WWDC21 · Session 10126 · <a href="https://developer.apple.com/wwdc21/10126">Discoverable design</a></li><li>[x] WWDC21 · Session 10252 · <a href="https://developer.apple.com/wwdc21/10252">Make blazing fast lists and collection views</a></li></ul><h3 id="day-22-20220429"><a class="markdownIt-Anchor" href="#day-22-20220429"></a> Day 22 - 2022.04.29</h3><ul><li>[x] WWDC21 · Session 10134 · <a href="https://developer.apple.com/wwdc21/10134">Explore structured concurrency in Swift</a></li><li>[x] WWDC21 · Session 10133 · <a href="https://developer.apple.com/wwdc21/10133">Protect mutable state with Swift actors</a></li><li>[x] WWDC21 · Session 10254 · <a href="https://developer.apple.com/wwdc21/10254">Swift concurrency: Behind the scenes</a></li></ul><h3 id="day-21-20220428"><a class="markdownIt-Anchor" href="#day-21-20220428"></a> Day 21 - 2022.04.28</h3><ul><li>[x] WWDC21 · Session 10095 · <a href="https://developer.apple.com/wwdc21/10095">Use async/await with URLSession</a></li><li>[x] WWDC21 · Session 10058 · <a href="https://developer.apple.com/wwdc21/10058">Meet AsyncSequence</a></li></ul><h3 id="day-20-20220426"><a class="markdownIt-Anchor" href="#day-20-20220426"></a> Day 20 - 2022.04.26</h3><ul><li>[x] WWDC21 · Session 10132 · <a href="https://developer.apple.com/wwdc21/10132">Meet async/await in Swift</a></li></ul><h3 id="day-19-20220425"><a class="markdownIt-Anchor" href="#day-19-20220425"></a> Day 19 - 2022.04.25</h3><ul><li>[x] Tech Talks · Session 10874 · <a href="https://developer.apple.com/videos/play/tech-talks/10874/">Get the most out of CloudKit Sharing</a></li><li>[x] WWDC21 · Session 10086 · <a href="https://developer.apple.com/wwdc21/10086">What’s new in CloudKit</a></li></ul><h3 id="day-18-20220424"><a class="markdownIt-Anchor" href="#day-18-20220424"></a> Day 18 - 2022.04.24</h3><ul><li>[x] Tech Talks · Session 10696 · <a href="https://developer.apple.com/videos/play/tech-talks/10696/">Uniform Type Identifiers — a reintroduction</a></li><li>[x] Tech Talks · Session 10885 · <a href="https://developer.apple.com/videos/play/tech-talks/10885/">Tips for preventing common review issues</a></li></ul><h3 id="day-17-20220423"><a class="markdownIt-Anchor" href="#day-17-20220423"></a> Day 17 - 2022.04.23</h3><ul><li>[x] WWDC20 · Session 10098 · <a href="https://developer.apple.com/wwdc20/10098">What’s new in Universal Links</a></li><li>[x] WWDC20 · Session 10650 · <a href="https://developer.apple.com/wwdc20/10650">Sync a Core Data store with the CloudKit public database</a></li><li>[x] WWDC20 · Session 10017 · <a href="https://developer.apple.com/wwdc20/10017">Core Data: Sundries and maxims</a></li><li>[x] WWDC21 · Session 10015 · <a href="https://developer.apple.com/wwdc21/10015">Build apps that share data through CloudKit and Core Data</a></li></ul><h3 id="day-16-20220422"><a class="markdownIt-Anchor" href="#day-16-20220422"></a> Day 16 - 2022.04.22</h3><ul><li>[x] WWDC20 · Session 10146 · <a href="https://developer.apple.com/wwdc20/10146">Configure and link your App Clips</a></li><li>[x] WWDC21 · Session 10012 · <a href="https://developer.apple.com/wwdc21/10012">What’s new in App Clips</a></li><li>[x] WWDC21 · Session 10013 · <a href="https://developer.apple.com/wwdc21/10013">Build light and fast App Clips</a></li><li>[x] Tech Talks · Session 205 · <a href="https://developer.apple.com/videos/play/tech-talks/205/">Ensuring Beautiful Rich Links</a></li></ul><h3 id="day-15-20220421"><a class="markdownIt-Anchor" href="#day-15-20220421"></a> Day 15 - 2022.04.21</h3><ul><li>[x] WWDC21 · Session 10101 · <a href="https://developer.apple.com/wwdc21/10101">Discover rolling clips with ReplayKit</a></li><li>[x] WWDC20 · Session 10174 · <a href="https://developer.apple.com/wwdc20/10174">Explore App Clips</a></li><li>[x] WWDC20 · Session 10172 · <a href="https://developer.apple.com/wwdc20/10172">Design great App Clips</a></li></ul><h3 id="day-14-20220420"><a class="markdownIt-Anchor" href="#day-14-20220420"></a> Day 14 - 2022.04.20</h3><ul><li>[x] WWDC20 · Session 10095 · <a href="https://developer.apple.com/wwdc20/10095">The Push Notifications primer</a></li><li>[x] WWDC21 · Session 10091 · <a href="https://developer.apple.com/wwdc21/10091">Send communication and Time Sensitive notifications</a></li><li>[x] WWDC21 · Session 10231 · <a href="https://developer.apple.com/wwdc21/10231">Donate intents and expand your app’s presence</a></li></ul><h3 id="day-13-20220419"><a class="markdownIt-Anchor" href="#day-13-20220419"></a> Day 13 - 2022.04.19</h3><ul><li>[x] WWDC21 · Session 10061 · <a href="https://developer.apple.com/wwdc21/10061">Meet TextKit 2</a></li><li>[x] WWDC21 · Session 10087 · <a href="https://developer.apple.com/wwdc21/10087">Diagnose Power and Performance regressions in your app</a></li></ul><h3 id="day-12-20220418"><a class="markdownIt-Anchor" href="#day-12-20220418"></a> Day 12 - 2022.04.18</h3><ul><li>[x] WWDC18 · Session 220 · <a href="https://developer.apple.com/wwdc18/220">High Performance Auto Layout</a></li><li>[x] WWDC20 · Session 10031 · <a href="https://developer.apple.com/wwdc20/10031">Stacks, Grids, and Outlines in SwiftUI</a></li><li>[x] WWDC21 · Session 10210 · <a href="https://developer.apple.com/wwdc21/10210">Explore advanced project configuration in Xcode</a></li></ul><h3 id="day-11-20220417"><a class="markdownIt-Anchor" href="#day-11-20220417"></a> Day 11 - 2022.04.17</h3><ul><li>[x] WWDC21 · Session 10212 · <a href="https://developer.apple.com/wwdc21/10212">Analyze HTTP traffic in Instruments</a></li><li>[x] WWDC21 · Session 10258 · <a href="https://developer.apple.com/wwdc21/10258">Understand and eliminate hangs from your app</a></li><li>[x] WWDC21 · Session 10259 · <a href="https://developer.apple.com/wwdc21/10259">Your guide to keyboard layout</a></li></ul><h3 id="day-10-20220416"><a class="markdownIt-Anchor" href="#day-10-20220416"></a> Day 10 - 2022.04.16</h3><ul><li>[x] WWDC20 · Session 10063 · <a href="https://developer.apple.com/wwdc20/10063">Background execution demystified</a></li><li>[x] WWDC19 · Session 423 · <a href="https://developer.apple.com/wwdc19/423">Optimizing App Launch</a></li></ul><h3 id="day-9-20220415"><a class="markdownIt-Anchor" href="#day-9-20220415"></a> Day 9 - 2022.04.15</h3><ul><li>[x] WWDC20 · Session 10168 · <a href="https://developer.apple.com/wwdc20/10168">Explore logging in Swift</a></li><li>[x] WWDC21 · Session 10203 · <a href="https://developer.apple.com/wwdc21/10203">Triage TestFlight crashes in Xcode Organizer</a></li><li>[x] WWDC20 · Session 10076 · <a href="https://developer.apple.com/wwdc20/10076">Diagnose performance issues with the Xcode Organizer</a></li><li>[x] WWDC21 · Session 10181 · <a href="https://developer.apple.com/wwdc21/10181">Ultimate application performance survival guide</a></li><li>[x] WWDC19 · Session 417 · <a href="https://developer.apple.com/wwdc19/417">Improving battery life and performance</a></li><li>[x] WWDC19 · Session 707 · <a href="https://developer.apple.com/wwdc19/707">Advances in App Background Execution</a></li></ul><h3 id="day-8-20220414"><a class="markdownIt-Anchor" href="#day-8-20220414"></a> Day 8 - 2022.04.14</h3><ul><li>[x] WWDC21 · Session 10048 · <a href="https://developer.apple.com/wwdc21/10048">Principles of great widgets</a></li><li>[x] WWDC21 · Session 10049 · <a href="https://developer.apple.com/wwdc21/10049">Add intelligence to your widgets</a></li><li>[x] WWDC21 · Session 10209 · <a href="https://developer.apple.com/wwdc21/10209">Discover breakpoint improvements</a></li><li>[x] WWDC18 · Session 412 · <a href="https://developer.apple.com/wwdc18/412">Advanced Debugging with Xcode and LLDB</a></li></ul><h3 id="day-7-20220413"><a class="markdownIt-Anchor" href="#day-7-20220413"></a> Day 7 - 2022.04.13</h3><ul><li>[x] WWDC21 · Session 10062 · <a href="https://developer.apple.com/wwdc21/10062">SwiftUI on the Mac: Build the fundamentals</a></li><li>[x] WWDC21 · Session 10289 · <a href="https://developer.apple.com/wwdc21/10289">SwiftUI on the Mac: The finishing touches</a></li><li>[x] WWDC21 · Session 10216 · <a href="https://developer.apple.com/wwdc21/10216">ARC in Swift: Basics and beyond</a></li><li>[x] WWDC21 · Session 10197 · <a href="https://developer.apple.com/wwdc21/10197">Discover and curate Swift Packages using Collections</a></li><li>[x] WWDC21 · Session 10256 · <a href="https://developer.apple.com/wwdc21/10256">Meet the Swift Algorithms and Collections packages</a></li></ul><h3 id="day-6-20220412"><a class="markdownIt-Anchor" href="#day-6-20220412"></a> Day 6 - 2022.04.12</h3><ul><li>[x] WWDC21 · Session 10023 · <a href="https://developer.apple.com/wwdc21/10023">Direct and reflect focus in SwiftUI</a></li></ul><h3 id="day-5-20220411"><a class="markdownIt-Anchor" href="#day-5-20220411"></a> Day 5 - 2022.04.11</h3><ul><li>[x] WWDC21 · Session 10176 · <a href="https://developer.apple.com/wwdc21/10176">Craft search experiences in SwiftUI</a></li><li>[x] WWDC21 · Session 10119 · <a href="https://developer.apple.com/wwdc21/10119">SwiftUI Accessibility: Beyond the basics</a></li></ul><h3 id="day-4-20220410"><a class="markdownIt-Anchor" href="#day-4-20220410"></a> Day 4 - 2022.04.10</h3><ul><li>[x] WWDC21 · Session 10221 · <a href="https://developer.apple.com/wwdc21/10221">Streamline your localized strings</a></li><li>[x] WWDC21 · Session 10220 · <a href="https://developer.apple.com/wwdc21/10220">Localize your SwiftUI app</a></li><li>[x] WWDC21 · Session 10349 · <a href="https://developer.apple.com/wwdc21/10349">SF Symbols in SwiftUI</a></li><li>[x] WWDC21 · Session 10021 · <a href="https://developer.apple.com/wwdc21/10021">Add rich graphics to your SwiftUI app</a></li></ul><h3 id="day-3-20220409"><a class="markdownIt-Anchor" href="#day-3-20220409"></a> Day 3 - 2022.04.09</h3><ul><li>[x] WWDC21 · Session 10022 · <a href="https://developer.apple.com/wwdc21/10022">Demystify SwiftUI</a></li></ul><h3 id="day-2-20220408"><a class="markdownIt-Anchor" href="#day-2-20220408"></a> Day 2 - 2022.04.08</h3><ul><li>[x] WWDC19 · Session 429 · <a href="https://developer.apple.com/wwdc19/429">LLDB: Beyond “po”</a></li></ul><h3 id="day-1-20220407"><a class="markdownIt-Anchor" href="#day-1-20220407"></a> Day 1 - 2022.04.07</h3><ul><li>[x] WWDC21 · Session 10211 · <a href="https://developer.apple.com/wwdc21/10211">Symbolication: Beyond the basics</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#起因&quot;&gt;&lt;/a&gt; 起因&lt;/h2&gt;
&lt;p&gt;这几天想起来很早之前听 &lt;a href=&quot;https://podcasts.apple.com/us/podcast/ux-coffee-%E8</summary>
      
    
    
    
    <category term="Learn in Public" scheme="http://kiligwyu.com/categories/Learn-in-Public/"/>
    
    
    <category term="WWDC" scheme="http://kiligwyu.com/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>三余 ── 每日一文非官方开源客户端</title>
    <link href="http://kiligwyu.com/ThreeSpare/"/>
    <id>http://kiligwyu.com/ThreeSpare/</id>
    <published>2024-08-14T12:46:42.000Z</published>
    <updated>2022-12-18T10:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%85%B3%E4%BA%8E%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87">关于每日一文</a></li><li><a href="#%E7%BC%98%E8%B5%B7">缘起</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E4%B8%89%E4%BD%99">关于三余</a></li></ul><h2 id="关于每日一文"><a class="markdownIt-Anchor" href="#关于每日一文"></a> 关于每日一文</h2><p>官方网站：<a href="https://meiriyiwen.com">每日一文</a>。</p><blockquote><p>每天花 10 分钟阅读一篇文章，一个月可以有大约 50000 字的阅读量，一年有近 60 万字的阅读量，专注、执着，每天阅读。</p><p>只为简单的纯净的阅读而生。</p><p>简单生活，每日一文。</p></blockquote><h2 id="缘起"><a class="markdownIt-Anchor" href="#缘起"></a> 缘起</h2><p>很多年前，当我还在上大学时候，偶然发现了每日一文网站，非常喜欢每日一文的理念，每日一篇短文，没有推荐、简单纯净，每日一文也成为我关注的最喜欢的文艺网站之一（喜欢的网站现在好多都已经关停了，一声叹息）。</p><p>我并不是一个爱读书的人，但我知道阅读的重要性，所以也时常强迫自己多读些书，而我那点可怜的阅读量里，每日一文就贡献了不少。🤣</p><p>每日一文官方也出过客户端，就叫『每日一文』，再后来 app 升级改名『观止』，再后来就下架了 🤣。而我做为一名 iOS 开发者，也想为每日一文做个客户端。于是我在我偏自用的工具 app『iCollect』里集成了每日一文，后来我也把这个 app 下架了，因为它功能太过杂乱。</p><p>直到年前，我想再为每日一文做个客户端，于是有了『三余』，并没有很强的动力去做，拖了很久才完成。年后试着上架 App Store，果不其然被拒，收到了 <code>4.1 CopyCats</code> 大礼包，就更没心情去做了，因为 app 的设计就是从别的 app 抄来拼凑成的，图标抄袭『<a href="https://apps.apple.com/us/app/id1592613682">读库</a>』，分析抄袭『<a href="https://apps.apple.com/us/app/id1507361706">HiCoffee</a>』，我也意识到了自己存在抄袭问题，并反省了，以后再做产品，希望可以多些创新。</p><p>既然不上架了，那就开源了吧，于是又拖了很长时间，整理一下代码(使用 Combine 简单重构下，并去掉了一些错误处理)然后开源，开源地址：<a href="https://github.com/KiligWYu/ThreeSpare-iOS">KiligWYu/ThreeSpare-iOS</a>。本来计划的很多功能也没做，比如横屏适配、iPadOS 适配、iCloud 同步等，以后有时间再做吧。咕咕咕……</p><h2 id="关于三余"><a class="markdownIt-Anchor" href="#关于三余"></a> 关于三余</h2><p>『三余』是每日一文非官方客户端。</p><p><code>冬者岁之余，夜者日之余，阴雨者时之余也。</code> 是谓三余。</p><p><img src="https://github.com/KiligWYu/ThreeSpare-iOS/raw/main/ScreenShot.JPG" alt="ScreenShot" /></p><p>『三余』主要功能分为两块，一是阅读，一是分析。阅读部分，有丰富的设置（有我最喜欢的修改字体功能）；分析部分，简单按周和月来统计阅读量。使用到的技术的话，页面主要使用 SwiftUI 和 Combine 框架，数据存储使用 CoreData，阅读文字排版使用 CoreText。</p><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87&quot;&gt;关于每日一文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BC%98%E8%B5%B7&quot;&gt;缘起&lt;/a&gt;&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="每日一文" scheme="http://kiligwyu.com/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>WWDC22</title>
    <link href="http://kiligwyu.com/learninpublic/WWDC22/"/>
    <id>http://kiligwyu.com/learninpublic/WWDC22/</id>
    <published>2024-08-14T12:46:42.000Z</published>
    <updated>2022-12-18T10:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最后更新于 2022.07.12。</p><p>虽然一些新的技术，实际用到工作项目中也得几年后了，但是，可以用在个人项目中啊，自己的项目就是任性，只支持较新的系统 😄，所以 WWDC 22 的系列视频还是要看的。</p><ul><li>[x] Session 101 · <a href="https://developer.apple.com/wwdc22/101">Keynote</a></li><li>[x] Session 102 · <a href="https://developer.apple.com/wwdc22/102">Platforms State of the Union</a></li></ul><h2 id="uikit"><a class="markdownIt-Anchor" href="#uikit"></a> UIKit</h2><ul><li>[x] Session 10068 · <a href="https://developer.apple.com/wwdc22/10068">What’s new in UIKit</a></li></ul><h2 id="swift"><a class="markdownIt-Anchor" href="#swift"></a> Swift</h2><ul><li>[x] Session 110354 · <a href="https://developer.apple.com/wwdc22/110354">What’s new in Swift</a></li></ul><h2 id="xcode"><a class="markdownIt-Anchor" href="#xcode"></a> Xcode</h2><ul><li>[x] Session 110427 · <a href="https://developer.apple.com/wwdc22/110427">What’s new in Xcode</a></li><li>[x] Session 110371 · <a href="https://developer.apple.com/wwdc22/110371">Use Xcode to develop a multiplatform app</a></li></ul><h2 id="localization"><a class="markdownIt-Anchor" href="#localization"></a> Localization</h2><ul><li>[x] Session 10110 · <a href="https://developer.apple.com/wwdc22/10110">Build global apps: Localization by example</a></li></ul><h2 id="sf-symbols"><a class="markdownIt-Anchor" href="#sf-symbols"></a> SF Symbols</h2><ul><li>[x] Session 10157 · <a href="https://developer.apple.com/wwdc22/10157">What’s new in SF Symbols 4</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最后更新于 2022.07.12。&lt;/p&gt;
&lt;p&gt;虽然一些新的技术，实际用到工作项目中也得几年后了，但是，可以用在个人项目中啊，自己的项目就是任性，只支持较新的系统 😄，所以 WWDC 22 的系列视频还是要看的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Session 101</summary>
      
    
    
    
    <category term="Learn in Public" scheme="http://kiligwyu.com/categories/Learn-in-Public/"/>
    
    
    <category term="WWDC" scheme="http://kiligwyu.com/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #120（2024.08.12）</title>
    <link href="http://kiligwyu.com/newsletter/120/"/>
    <id>http://kiligwyu.com/newsletter/120/</id>
    <published>2024-08-12T12:41:22.000Z</published>
    <updated>2024-08-12T14:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 120 期。本篇是对过去一周（08.05 - 08.11）的记录、思考与分享。</p><hr /><p>昨天发了一篇《<a href="/homepod-usage-experience">HomePod 使用体验</a>》，是我使用 HomePod 半月来的一些感受。</p><p>最近升级了下我的 Markdown 链接解析工具，加了自动保存到本地文件的功能，这样，我可以方便的把一周来各种链接都自动保存到一起，写周报时候可以拷过来，再稍微修改下就可以了，大大提升效率。</p><h2 id="一些链接"><a class="markdownIt-Anchor" href="#一些链接"></a> 一些链接</h2><h3 id="开源项目"><a class="markdownIt-Anchor" href="#开源项目"></a> 开源项目</h3><ul><li><a href="https://github.com/tom-doerr/zsh_codex">tom-doerr/zsh_codex</a>: This is a ZSH plugin that enables you to use OpenAI’s Codex AI in the command line.</li><li><a href="https://github.com/ccbikai/BroadcastChannel">ccbikai/BroadcastChannel</a>: Turn your Telegram Channel into a MicroBlog.</li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://www.roczhang.com/28.html">28</a></li><li>Apple Developer - <a href="https://developer.apple.com/cn/news/">关于设计的幕后故事：Lost in Play</a></li></ul><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><ul><li>枫言枫语 - <a href="https://podcasts.apple.com/us/podcast/%E6%9E%AB%E8%A8%80%E6%9E%AB%E8%AF%AD/id1069600190">Vol. 123 无主题闲聊 02</a></li><li>IC实验室 - <a href="https://www.youtube.com/watch?v=HWxZfXUoOKs">齁甜费列罗，凭啥让人着魔？</a></li><li>老蒋巨靠谱 - <a href="https://www.bilibili.com/video/BV1WH4y1c7GP/">对话何同学：我是一块情绪的海绵</a></li><li>黑神话悟空 - <a href="https://www.bilibili.com/video/BV1oH4y1c7Kk/">《黑神话：悟空》最终预告 | 8 月 20 日，重走西游</a></li><li>Frame Order - <a href="https://www.youtube.com/watch?v=JbDYpA_WQFw">When A Waiter Steals Your Date | Cartoon Box 413</a></li><li>斑鸠鸭 - <a href="https://www.bilibili.com/video/BV1LW421976E/">范伟的演技，什么水平？</a></li><li>鞑厨高寒 - <a href="https://www.bilibili.com/video/BV1Yr421K7EA/">咖啡没有那么多废话</a></li><li>电影广角镜 - <a href="https://www.bilibili.com/video/BV1Jn4y1f7uX/">老白的地狱之路，小粉的炼狱之陟，《绝命毒师》的伏笔和隐喻最终章</a></li><li>老肉雜談 - <a href="https://www.youtube.com/watch?v=I2pVB0I5OeI">為什麼說蚯蚓是世界上最重要的動物？達爾文研究40年，發現蚯蚓的瘋狂真相！如果地球上沒有蚯蚓</a></li><li>老肉雜談 - <a href="https://www.youtube.com/watch?v=S6XItwN2UQ0">貓頭鷹為什麼這麼恨鷹？怎麼又跟烏鴉打起來了？原來牠們是鳥類中的「貓」！飛行完全沒有聲音的真正原因</a></li><li>Little Chinese Everywhere - <a href="https://www.youtube.com/watch?v=NA7mj_9GHTI">Lhasa - Tibet’s Most Famous City! S2, EP86</a></li><li>差评君 - <a href="https://www.youtube.com/watch?v=6aKBdRl2Gq8">一杯冰卖你3块5，凭什么能卖这么贵?</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=9Ud296rBAe0">为什么法棍这么硬，真的是用来当武器吗？</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1FZ421M7Mj/">真心话：你真的需要智驾吗？5年后，你的智驾还能用吗?【柴知道：车圈化简】</a></li><li>4A广告提案网 - <a href="https://www.bilibili.com/video/BV1Cb421E7UR/">苹果广告到了泰国也变沙雕了</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="http://wandawhirl.com">Wanda Whirl</a></li><li><a href="https://cali.design">Cali Kuo</a></li><li>Steam - <a href="https://store.steampowered.com/app/3117780/YinYang_PingPong/">Yin-Yang Ping-Pong</a></li><li>Chrome Extension - <a href="https://chromewebstore.google.com/detail/%E7%AD%89%E7%AD%89%E6%A0%87%E7%AD%BE-%E4%BF%9D%E6%8C%81%E4%B8%93%E6%B3%A8/iechpbdmenjodjnfjendoheikjbdholm">等等标签 - 保持专注</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 120 期。本篇是对过去一周（08.05 - 08.11）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;昨天发了一篇《&lt;a href=&quot;/homepod-usage-experience&quot;&gt;HomePod 使用体验&lt;</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>HomePod 使用体验</title>
    <link href="http://kiligwyu.com/homepod-usage-experience/"/>
    <id>http://kiligwyu.com/homepod-usage-experience/</id>
    <published>2024-08-11T09:52:21.000Z</published>
    <updated>2024-08-11T13:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 HomePod 已经有半个月了，分享一下使用体验，仅针对我个人的使用体验和看法，先说结论，很满意。下面就展开讲讲。</p><h2 id="购买-homepod"><a class="markdownIt-Anchor" href="#购买-homepod"></a> 购买 HomePod</h2><p>HomePod 产品发发售都有六年多的时间了，第二代 HomePod 发售也一年多了，那么我为什么到现在才购买 HomePod？HomePod 的定位是带有音响功能的智能家居中枢，而我想要的只不过是个电脑的外接音响，而 HomePod 作为外接音响是不合格的，而我用了好多年的 Beats Pill+，基本够用，近段时间由于工作上的变化，我又回到了上海，恰好 <a href="https://www.beatsbydre.com/speakers/beats-pill">新一代的 Beats Pill 也发布了</a>，本想买个 Pill 的，可是等了一个多月还没发售，<s>我又重新思考了下自己的需求</s>，最后决定购买 HomePod。</p><p>我希望每天下班回到家（出租屋）后，屋里能充满音乐，偶尔看看电影，Pill 就能满足需求，而新款 Pill 迟迟未发售，加上我也想尝试下 HomePod，还有就是可能跟我当时的心情有关，那一周的时间情绪都非常低落，所以有点消费的冲动。决定购买 HomePod 也是一瞬间的事情，临下班前下单，下班直奔零售店，当我拿到 HomePod 那一刻，感受到了 HomePod 的分量，好重啊，更加期待它的实际表现了。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112054627.webp" style="width: 50%;" alt="我在 𝕏 上发的帖子"><h2 id="日常使用"><a class="markdownIt-Anchor" href="#日常使用"></a> 日常使用</h2><p>房间里有个音响，可以明显提升生活质量，尤其是一个人租住时候。正如我前面所说，HomePod 我主要拿来听音乐了，它的音质自然不必说，何况我也不是音乐发烧友。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112055842.webp" alt="我的桌面" /></p><p>目前房间里的桌子有些小了，再放上一个 27 英寸的显示器，空间就更不够用了，我甚至把床头柜搬过来，放在桌子旁边当个边几用了。HomePod 就放在显示器旁边，它的优点之一就是可以当成一个独立的设备，可以不依赖于手机或电脑，大多数时候它都在脱离其他设备在播放音乐，但同时，依旧可以在手机上看到 HomePod 的状态，可以非常方便地在手机上接管控制。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112055618.webp" style="width: 50%;" alt="iPhone 上控制 HomePod"><p>另一个优点就是语音控制了，Siri 虽然还是公认的智障，但相比其他家的语音控制，明显好用的多。比如我说“Siri 下一首”、“Siri 大点声”、“Siri 随机播放我的收藏”、“Siri 播放 LP 的 Lost on You 专辑”，基本上都可以快速的得到正确回应，我可以把整条命令说完而不必叫它等它回应了再说命令，Siri 也不会有像“好的主人”这样多余的恶心的回复，很棒。唯一不太行的是，我的资料库里面大部分都是非中文音乐，让 Siri 播放这些音乐经常识别错误，不过这不是 Siri 的问题是我的问题。</p><p>HomePod 不太适合电脑外接音响的主要原因是，连接走的是 AirPlay 2 协议，而非蓝牙协议，因此就有音画不同步的问题。我也经常会在 MacBook 上连接控制 HomePod，听听音乐、看看视频或电影，操作非常的不跟手，延迟非常明显，比如切歌、暂停、快进快退等，总要慢个一两秒，不过用 Safari 浏览器看视频，可以自动音画同步，播放器的话，IINA 固定延迟 2s，设置让音频快 2s 即可。总的来说，我可以接受，问题不大。</p><h2 id="智能家居"><a class="markdownIt-Anchor" href="#智能家居"></a> 智能家居</h2><p>智能家居中枢是 HomePod 的另一大卖点了，不过这方面我的使用体验就非常有限了，我只有米家台灯 1S 增强版这一个可以接入 HomeKit 的设备，让 Siri 控制开关灯还是蛮方便的。</p><p>另外一点，就是 HomeKit 的自动化，在 Home App 里设置一些自动化，比如我就设置了当我到家时候就开灯并开始随机播放我的收藏，每天当我下班到家后，我还没进门音乐就已经响起来了，体验很好，这也是别的普通音响所不能的。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112059942.webp" style="width: 50%;" alt="我的自动化设置"><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>就我目前的情况，主要还是拿 HomePod 来听 Apple Music，其他智能设备也非常有限，我对 HomePod 总的来说非常满意，要说还有什么不满意的地方，那就是应该再买一个组一对儿才好，以后吧。</p>]]></content>
    
    
    <summary type="html">使用 HomePod 已经有半个月了，分享一下使用体验，仅针对我个人的使用体验和看法，先说结论，很满意。下面就展开讲讲。</summary>
    
    
    
    
    <category term="HomePod" scheme="http://kiligwyu.com/tags/HomePod/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #119（2024.08.05）</title>
    <link href="http://kiligwyu.com/newsletter/119/"/>
    <id>http://kiligwyu.com/newsletter/119/</id>
    <published>2024-08-05T12:46:20.000Z</published>
    <updated>2024-08-05T15:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 119 期。本篇是对过去一周（07.29 - 08.04）的记录、思考与分享。</p><hr /><p>周日晚上的火车晚点了两个多小时，在候车厅玩 <a href="https://apps.apple.com/us/app/vampire-survivors/id6478975337">Vampire Survivors+</a>，这个游戏八月一号上架了 Apple Arcade。周末两天也在玩这个游戏。<br />我一直觉得火车应该是受天气影响较小的交通工具，而实际上受天气影响还蛮大的，尤其是夏季短时强对流恶劣天气。本次晚点就是受陕西境内的天气影响。前段时间还遇到，临发车前被通知车次停运，估计也是天气原因。今年的恶劣天气异常多，各地暴雨洪涝灾害不断。</p><p>看了 <a href="https://www.imdb.com/title/tt0434409/">V 字仇杀队 V for Vendetta (2005)</a> 和 <a href="https://movie.douban.com/subject/1291565/">疯狂约会美丽都 Les triplettes de Belleville (2003)</a> 两部电影。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408052057818.webp" alt="V 字仇杀队 V for Vendetta (2005)" /><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408052057489.webp" alt="疯狂约会美丽都 Les triplettes de Belleville (2003)" /></p><h3 id="开源项目"><a class="markdownIt-Anchor" href="#开源项目"></a> 开源项目</h3><ul><li><a href="https://github.com/hzeyuan/x-cards">hzeyuan/x-cards</a>: Easy share X anywhere,in any format<ul><li><a href="https://x-cards.net">x-cards.net</a></li></ul></li><li><a href="https://github.com/lihaoyun6/Logoer">lihaoyun6/Logoer</a>: Change the style of the Apple logo in macOS menu bar / 更换 macOS 菜单栏苹果 Logo 样式的小工具</li><li><a href="https://github.com/Kyle-Ye/XcodeLLMEligible">Kyle-Ye/XcodeLLMEligible</a>: 国行 Mac 使用 Xcode LLM 的方法</li><li><a href="https://github.com/jaywcjlove/symbol-scribe">jaywcjlove/symbol-scribe</a>: In messaging applications, use interesting emoji emoticons such as smiley faces, kaomojis, and various other symbols.<ul><li><a href="https://wangchujiang.com/symbol-scribe/">Symbol Scribe</a></li></ul></li><li><a href="https://github.com/CyC2018/CS-Notes">CyC2018/CS-Notes</a>: 📚 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</li></ul><h3 id="apps"><a class="markdownIt-Anchor" href="#apps"></a> Apps</h3><ul><li><a href="https://apps.apple.com/app/id6503706164">StyleGuide - HIG Menubar App</a></li><li><a href="https://apps.apple.com/app/id6503827110">Miley AI - Personal Journal AI</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg98pDJceZ7bIpHwsLA">必应七月超高清无水印壁纸</a></li><li>三輪 - <a href="https://sanlun.bike/post/shang-hai-shu-cheng">上海书城</a></li><li>晨钟酱 Official - <a href="https://www.bilibili.com/video/BV1Hz421z7wr/">山寨机如何伪造配置？逆向源码后我直呼离谱！</a></li><li><em>#TIL</em> <a href="https://jc0b.computer/posts/enabling-touchid-for-sudo-macos-sonoma/">Enabling Touch ID for sudo in macOS Sonoma</a></li><li><em>#TIL</em> iPhone 的相机，拍照时候，按住拍照按钮向左滑，可以连拍。</li><li><a href="https://askhackers.com">askhackers.com</a>: Get answers from the world’s top hackers</li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=sQPaBY7RpDw">funnyCoder13期 - 和同事李豹聊聊大厂被裁后的思考，自媒体重新起航</a></li><li>IC实验室 - <a href="https://www.youtube.com/watch?v=e9A4BF-gIG4">俞敏洪和董宇辉为什么没有撕起来？- IC实验室出品</a></li><li>纳豆奶奶 - <a href="https://www.youtube.com/watch?v=pHjXkALzDHA">為什麼美國人越窮越胖？ 300公斤的流浪漢你看過嗎？ ？</a></li><li>星球研究所 Institute for Planets - <a href="https://www.youtube.com/watch?v=IJzI0vxUTMU">一条“线”也能成功申遗？不愧是中国！拆开北京中轴线，你会看见什么？ | BEIING CANNOT BE WITHOUT A CENTRAL AXIS</a></li><li>小Lin说 - <a href="https://www.youtube.com/watch?v=NM1hSguZ4fI">【硬核】一口气了解外汇 | Everything You Need To Know About Foreign Exchange</a></li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=plDC3QP9qIU">34岁程序员带全家离开北京</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1A142187KH/">复古网红 CCD 当年是怎么死的？它值得怀念吗？</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1Vb421779F/">无线电玩到尽头有多强？通话免费，覆盖全球，直通月球！</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 119 期。本篇是对过去一周（07.29 - 08.04）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;周日晚上的火车晚点了两个多小时，在候车厅玩 &lt;a href=&quot;https://apps.apple.com/us</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #118（2024.07.29）</title>
    <link href="http://kiligwyu.com/newsletter/118/"/>
    <id>http://kiligwyu.com/newsletter/118/</id>
    <published>2024-07-29T13:27:34.000Z</published>
    <updated>2024-07-29T16:11:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 118 期。本篇是从上期到现在（07.28）的记录、思考与分享。</p><hr /><p>上期还是 05.20 ，由于工作生活发生了较大变动，停更了两个多月了。我又开始了双城生活，不是郑州开封，而是开封上海，对，我又回上海了，要不是疫情，我可能早就又回上海了，趁现在，在上海再多发展些年。<br />我现在基本上一周、两周就回家一次，坐普快，周五晚上回家，周日晚上回来，不影响白天上班，买不到卧铺就硬座。往后看的影视会多一些，在火车上打发时间，可以把我的待看清单清一清了，看过的我都放在 <a href="/learninpublic/2024/">这里</a> 了。<br />另外我还是有些分享欲的，所以碎周报恢复更新。</p><h3 id="好买了"><a class="markdownIt-Anchor" href="#好买了"></a> 好，买了</h3><p>又到上海，置办了些提升生活品质的好物。</p><ul><li>徕芬电动牙刷 - 徕芬的广告真的是铺天盖地，徕芬的电动牙刷是牙刷界最苹果的，我的上一支电动牙刷还是好多年前的小米的入门款，趁此机会换了徕芬，不过是在闲鱼买的二手，全新且便宜。</li><li>HomePod - 我有一个 Beats Pill，用了好多年了，新款的 Beats Pill 马上就要发售了，『将于今年夏季推出』，本打算买新款 Pill 的，等了一个多月还没发售，改决定买 HomePod 了，相比 Pill，HomePod 音质更好、支持 Siri、HomeKit、无需开关机，缺点更贵、不便携、当蓝牙音响来用的话有些延迟，不过我使用苹果全家桶，主要用来听 Apple Music，延迟问题可以接受，所以买 HomePod 了，下班前 Apple Store 下单，零售店自提。</li><li>米家台灯 1S 增强版 - 颜值高、支持 HomeKit。</li><li>美国 Harry’s 手动剃须刀 - 𝕏 友推荐的，很不错，刀片也很耐用，用了两个多月了，依旧锋利。</li></ul><hr /><p>买了 <a href="https://app.cloudcone.com/?ref=11590">CloudCone</a> 的 VPS，通过 <a href="https://yinji.org/cloudcone.html">小胡同学的博客</a>，2 vCPU, 1GB RAM, 55GB Disk, 15.25 USD 一年，目前部署了 <a href="https://github.com/suno-ai/bark">Bark</a>、<a href="https://github.com/DIYgod/RSSHub">RSSHub</a>、<a href="https://github.com/FreshRSS/FreshRSS">FreshRSS</a>。</p><h3 id="开源项目"><a class="markdownIt-Anchor" href="#开源项目"></a> 开源项目</h3><ul><li><a href="https://github.com/yaoxieyoulei/mytv-android">yaoxieyoulei/mytv-android</a>: 使用 Android 原生开发的电视直播软件。</li><li><a href="https://github.com/djyde/icondog">djyde/icondog</a>: An open-source icons manager for open-source icons.</li><li><a href="https://github.com/rwv/lookscanned.io">GitHub - rwv/lookscanned.io</a>: 📚 <a href="http://LookScanned.io">LookScanned.io</a> - Make your PDFs look scanned.</li><li><a href="https://github.com/apparata/mkprivacy">apparata/mkprivacy</a>: UI tool for creating Apple privacy manifest property lists.</li><li><a href="https://github.com/piotrkulpinski/openalternative">piotrkulpinski/openalternative</a>: A community driven list of open source alternatives to proprietary software and applications.</li><li><a href="https://github.com/alienator88/Pearcleaner">alienator88/Pearcleaner</a>: A free, source-available and fair-code licensed mac app cleaner.</li><li><a href="https://github.com/KonghaYao/chinese-free-web-font-storage">KonghaYao/chinese-free-web-font-storage</a>: 中文网字计划 (Chinese Webfont Project) 是一个免费的中文 web 字体库，支持在线加载及查看字体信息。Explore our free CJK web font library that enables online loading and font information viewing.</li><li><a href="https://github.com/jaywcjlove/free-font">jaywcjlove/free-font</a>: 收录商用免费汉字字体，还包括开源英文字体 Free Font。</li><li><a href="https://github.com/hehonghui/awesome-english-ebooks">hehonghui/awesome-english-ebooks</a>: 经济学人 (含音频)、纽约客、卫报、连线、大西洋月刊等英语杂志免费下载，支持 epub、mobi、pdf 格式，每周更新。</li><li><a href="https://github.com/ducaale/xh">ducaale/xh</a>: Friendly and fast tool for sending HTTP requests.</li><li><a href="https://github.com/bensadeh/tailspin">bensadeh/tailspin</a>: 🌀 A log file highlighter.</li><li><a href="https://github.com/work7z/MDGJX">work7z/MDGJX</a>: 秒达工具箱，借助独创高效的输入方式，让您可以快速呼出各类工具、文档及笔记等资源，免费安全无广告，现已完全开源！</li><li><a href="https://github.com/nate-parrott/ball">nate-parrott/ball</a>: It’s a little ball that lives in your dock. It’s fun. It’s a ball.</li><li><a href="https://github.com/ejbills/DockDoor">ejbills/DockDoor</a>: Window peeking for macOS.</li><li><a href="https://github.com/Pintree-io/pintree">Pintree-io/pintree</a>: An intuitive tool for managing and exporting your local bookmarks into a shareable website.</li></ul><h3 id="apps"><a class="markdownIt-Anchor" href="#apps"></a> Apps</h3><ul><li><a href="https://sindresorhus.com/menu-bar-spacing">Menu Bar Spacing</a>: Customize the gap between menu bar items.</li><li><a href="https://bananabin.app">BananaBin</a>: You never notice when your bin is full. BananaBin reminds you to clear it in time.</li><li><a href="https://apps.apple.com/app/id6478312533">SteveWatch</a>: A brand new VOD player.<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202407292330241.webp" alt="SteveWatch" /></li></ul><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><ul><li><a href="https://music.apple.com/us/album/the-death-of-slim-shady-coup-de-gr%C3%A2ce/1755022177">The Death of Slim Shady (Coup De Grâce)</a><br><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/the-death-of-slim-shady-coup-de-gr%C3%A2ce/1755022177"></iframe><br></li><li><a href="https://music.apple.com/us/playlist/%E8%AF%95%E8%AF%95%E8%80%B3%E6%9C%BA/pl.u-V9D7mPEUB1GbxBk">试试耳机 - Tw93</a><br><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/%E8%AF%95%E8%AF%95%E8%80%B3%E6%9C%BA/pl.u-V9D7mPEUB1GbxBk"></iframe><br></li><li><a href="https://music.apple.com/us/playlist/%E5%8D%81%E5%A4%A7%E4%B8%93%E8%BE%91/pl.u-mJy81mECzBL49zM">十大专辑 - Tw93</a><br><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/%E5%8D%81%E5%A4%A7%E4%B8%93%E8%BE%91/pl.u-mJy81mECzBL49zM"></iframe><br></li><li>另外还有 WWDC24 的几张专辑都不错，Apple Music 搜索 WWDC24 试听。</li></ul><hr /><ul><li>疯投圈 - <a href="https://podcasts.apple.com/us/podcast/%E7%96%AF%E6%8A%95%E5%9C%88/id1088178402?i=1000663250696">中式快餐如何超越麦当劳？</a></li><li>疯投圈 - <a href="https://podcasts.apple.com/us/podcast/%E5%92%96%E5%95%A1%E6%88%98%E4%BA%892024/id1088178402?i=1000661453334">咖啡战争 2024</a></li><li>代码之外 Beyond Code - <a href="https://podcasts.apple.com/us/podcast/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96-beyond-code/id1688972924?i=1000661620497">读书时间！一起读《软技能：代码之外的生存指南》</a></li><li>代码之外 Beyond Code - <a href="https://podcasts.apple.com/us/podcast/%E7%AC%AC-9-%E9%9B%86-cali-%E8%81%8A%E4%BD%90%E7%8E%A9%E6%98%AF%E4%B8%80%E5%AE%B6%E6%80%8E%E6%A0%B7%E7%9A%84%E5%85%AC%E5%8F%B8-%E5%86%99%E7%AE%80%E5%8E%86%E7%9A%84%E5%BB%BA%E8%AE%AE-%E5%9C%A8%E7%BE%8E%E5%9B%BD%E7%9A%84%E8%AF%BB%E4%B9%A6%E5%B7%A5%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E9%AA%8C-%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E8%AE%BE%E8%AE%A1/id1688972924?i=1000659363499">第 9 集 | Cali 聊佐玩是一家怎样的公司、写简历的建议、在美国的读书工作、远程工作的经验、程序员学设计</a></li><li>金汤力电台 - <a href="https://podcasts.apple.com/us/podcast/%E9%87%91%E6%B1%A4%E5%8A%9B%E7%94%B5%E5%8F%B0/id1477337241?i=1000662934039">细读经典西游｜乌巢禅师的秘密 / 黄风岭背后的阴谋 / 黑神话悟空 boss 原引章节出现</a></li><li>个体户指南 - <a href="https://podcasts.apple.com/us/podcast/%E4%B8%AA%E4%BD%93%E6%88%B7%E6%8C%87%E5%8D%97/id1664310297?i=1000662889398">E17 个体户自力：离职后，想在深圳做一个数字游民</a></li></ul><hr /><ul><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=n94ypQ-5gdA">程序员面试街道足球队</a></li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=6hzKtdzJrFg">funnyCoder12期-程序员的职业成长与自我驱动：Tinyfool大哥的20年技术与人生</a></li><li><a href="https://x.com/hzlzh/status/1810001817545347178">AlanBeck 新作，感受黄金分割之美</a></li><li>林亦LYi - <a href="https://www.youtube.com/watch?v=rzbbqjVLbJE">万字解析！库克终于把乔布斯的iPhone 4S做完了？</a></li><li>MASKED FORUM 假面圓桌派 - <a href="https://www.youtube.com/watch?v=OkTxLwqaIvY">【假面圓桌派】蘿蔔快跑武漢引爆無人駕駛熱潮，對比特斯拉 Robotaxi 的區別</a></li><li>MHYYYY - <a href="https://www.youtube.com/watch?v=hPYMUatzcY0">8小时工作制是社会主义与资本主义的共同追求——生产过剩|经济危机|失业潮与996|减少内卷才能提高工资</a></li><li>电影广角镜 - <a href="https://www.bilibili.com/video/BV1gE421A7ug/">沃尔特的谎言，从第一个到最后一个，IMDB满分《绝命毒师》的伏笔和隐喻24</a></li><li>郭云神奇 - <a href="https://www.bilibili.com/video/BV1RM4m117EG/">《大话西游》1个10倍慢放才能看清的细节！诡异3字揭开隐藏剧情？07</a></li></ul><h3 id="壁纸"><a class="markdownIt-Anchor" href="#壁纸"></a> 壁纸</h3><ul><li><a href="">必应 2024 年 5 月超高清无水印壁纸</a></li><li><a href="">必应 2024 年 6 月超高清无水印壁纸</a></li><li><a href="https://bear.app/wallpapers/#starlit-lullaby">Bear Wallpapers</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>GitLab - <a href="https://learn.gitlab.com/allremote/remote-playbook">The Remote Playbook</a>: from a global leader in distributed work.</li><li>印记 - <a href="https://yinji.org/5178.html">笔记的方法：持续不断记录，意义自然浮现</a></li><li><a href="https://www.arno.org/on-the-origins-of-ds-store">On the origins of DS_store</a></li><li>久坐的朋友们一定要注意保护好前列腺啊 via <a href="https://x.com/gxgexiao">@gxgexiao</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202407292306780.webp" alt="via @gxgexiao" /></li><li><a href="https://survey.stackoverflow.co/2024/">StackOverflow 2024 Developer Survey</a></li><li><a href="https://blog.hahaha.cc/life/33/">那些我喜欢的博主</a></li><li>Tw93 - <a href="https://tw93.fun/2024-05-08/sony.html">我居然用回有线耳机了</a></li></ul>]]></content>
    
    
    <summary type="html">上期还是 05.20 ，由于工作生活发生了较大变动，停更了两个多月了。我又开始了双城生活，不是郑州开封，而是开封上海，对，我又回上海了，要不是疫情，我可能早就又回上海了，趁现在，在上海再多发展些年。我现在基本上一周、两周就回家一次，坐普快，周五晚上回家，周日晚上回来，不影响白天上班，买不到卧铺就硬座。另外我还是有些分享欲的，碎周报也恢复更新。</summary>
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency 备忘清单</title>
    <link href="http://kiligwyu.com/concurrency/"/>
    <id>http://kiligwyu.com/concurrency/</id>
    <published>2024-07-06T07:39:14.000Z</published>
    <updated>2024-07-06T07:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0">异步函数</a><ul><li><a href="#%E5%BC%82%E6%AD%A5%E6%8A%9B%E5%87%BA%E5%87%BD%E6%95%B0">异步抛出函数</a></li><li><a href="#%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0">第一个异步函数</a></li><li><a href="#%E8%B0%83%E7%94%A8%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%83%BD%E6%88%90%E6%9C%AC">调用异步函数的性能成本</a></li></ul></li><li><a href="#%E5%BC%82%E6%AD%A5%E5%B1%9E%E6%80%A7">异步属性</a></li><li><a href="#%E4%BD%BF%E7%94%A8-async-let-%E8%B0%83%E7%94%A8%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0">使用 async let 调用异步函数</a><ul><li><a href="#wait-%E5%92%8C-async-let-%E7%9A%84%E5%8C%BA%E5%88%AB">wait 和 async let 的区别</a></li><li><a href="#async-var">async var？</a></li></ul></li><li><a href="#continuations">Continuations</a><ul><li><a href="#%E5%8F%AF%E4%BB%A5%E6%8A%9B%E5%87%BA%E9%94%99%E7%9A%84-continuations">可以抛出错的 Continuations</a></li><li><a href="#%E5%AD%98%E5%82%A8-continuations">存储 Continuations</a></li></ul></li><li><a href="#%E5%9C%A8%E4%B8%8D%E6%94%AF%E6%8C%81%E5%B9%B6%E5%8F%91%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8">在不支持并发的函数中进行异步调用</a></li><li><a href="#sequence-asyncsequence-%E5%92%8C-asyncstream">Sequence、AsyncSequence 和 AsyncStream</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-for-wait-%E5%BE%AA%E7%8E%AF-asyncsequence">使用 for wait 循环 AsyncSequence</a></li><li><a href="#%E4%BD%BF%E7%94%A8-map-filter-%E7%AD%89%E6%93%8D%E4%BD%9C-asyncsequence">使用 map ()、filter () 等操作 AsyncSequence</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E6%AD%A5%E5%BA%8F%E5%88%97">创建自定义异步序列</a></li><li><a href="#%E5%B0%86-asyncsequence-%E8%BD%AC%E6%8D%A2%E4%B8%BA-sequence">将 AsyncSequence 转换为 Sequence</a></li></ul></li><li><a href="#task">Task</a><ul><li><a href="#task-%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C">Task 的创建和运行</a></li><li><a href="#detached-task">Detached Task</a></li><li><a href="#%E4%BB%8E%E4%BB%BB%E5%8A%A1%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C">从任务中获取结果</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E7%BA%A7">任务优先级</a></li><li><a href="#%E4%BC%98%E5%85%88%E7%BA%A7%E5%8D%87%E7%BA%A7">优先级升级</a></li><li><a href="#%E5%8F%96%E6%B6%88%E4%BB%BB%E5%8A%A1">取消任务</a></li><li><a href="#%E4%BC%91%E7%9C%A0%E4%BB%BB%E5%8A%A1">休眠任务</a></li><li><a href="#%E4%B8%BB%E5%8A%A8%E6%9A%82%E5%81%9C%E4%BB%BB%E5%8A%A1">主动暂停任务</a></li></ul></li><li><a href="#task-group">Task Group</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1%E7%BB%84%E5%B9%B6%E5%90%91%E5%85%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1">创建任务组并向其中添加任务</a></li><li><a href="#%E5%8F%96%E6%B6%88%E4%BB%BB%E5%8A%A1%E7%BB%84">取消任务组</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B">如何处理任务组中的不同结果类型</a></li></ul></li><li><a href="#swiftui-%E4%B8%AD%E7%9A%84-task-%E4%BF%AE%E9%A5%B0%E7%AC%A6">SwiftUI 中的 task() 修饰符</a></li><li><a href="#actors">Actors</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%9A%94%E7%A6%BB">函数参数隔离</a></li><li><a href="#%E9%83%A8%E5%88%86%E9%9A%94%E7%A6%BB">部分隔离</a></li><li><a href="#%E4%BD%BF%E7%94%A8-mainactor-%E5%9C%A8%E4%B8%BB%E9%98%9F%E5%88%97%E4%B8%8A%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81">使用 @MainActor 在主队列上运行代码</a></li><li><a href="#%E5%85%A8%E5%B1%80-actor-%E6%8E%A8%E6%96%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">全局 actor 推断的工作原理</a></li><li><a href="#actor-%E8%B7%B3%E8%B7%83">actor 跳跃</a></li><li><a href="#actors-classes-and-structs-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB">actors, classes, and structs 之间的区别</a></li></ul></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><p>本篇是 <a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a> 的学习笔记。简要记录，备忘清单。推荐看原教程，配合代码示例更佳清晰易懂。</p><hr /><blockquote><p>Concurrency is about dealing with many things at once, parallelism is about doing many things at once. Concurrency is a way to structure things so you can maybe use parallelism to do a better job. —— Rob Pike</p></blockquote><p>默认情况下，所有 Swift 函数都是同步的。同步函数会导致阻塞，从而导致性能问题。异步函数不会阻塞。</p><h2 id="异步函数"><a class="markdownIt-Anchor" href="#异步函数"></a> 异步函数</h2><p>通过关键字 <code>async</code> 来创建异步函数，在异步函数内部，可以使用 <code>await</code> 关键字来调用其他异步函数。</p><ul><li><code>async</code> 是函数类型的一部分。</li><li>用 <code>async</code> 标记函数意味着它可能会执行异步工作，而不是必须执行异步工作。同样， <code>throws</code> 也是如此 - 通过函数的某些路径可能会抛出异常，但其他路径可能不会。</li></ul><p>当使用 <code>await</code> 调用异步函数时，我们标记了一个挂起点，这是函数可以挂起自身的地方（实际上是停止运行），以便可以进行其他工作。在未来的某个时刻，该函数的工作完成，Swift 会将其从 “假死” 般的状态中唤醒，并继续工作。</p><ul><li>当一个异步函数被挂起时，所有调用它的异步函数也会被挂起。异步函数具有常规同步函数所没有的特殊暂停能力。正是由于这个原因，同步函数无法直接调用异步函数。</li><li>一个函数可以根据需要多次挂起，使用 <code>await</code> 关键字。</li><li>被挂起的函数不会阻塞它正在运行的线程，而是放弃该线程，以便 Swift 可以做其他工作。</li><li>当函数恢复时，它可能与以前一样在同一个线程上运行，但也可能不是。</li></ul><h3 id="异步抛出函数"><a class="markdownIt-Anchor" href="#异步抛出函数"></a> 异步抛出函数</h3><p>把函数标记为 <code>async throws</code> ，使用 <code>try await</code> 调用该函数。注意关键字的顺序，在函数定义中是 “异步，抛出”，但在调用站点是 “抛出，异步”。<code>try await</code> 不仅比 <code>await try</code> 更容易阅读，而且它也更能反映代码执行时实际发生的情况：我们正在等待某些工作完成，以及它何时完成完成后我们将检查它是否最终抛出错误。</p><blockquote><p>This order restriction is arbitrary, but it’s not harmful, and it eliminates the potential for stylistic debates.</p></blockquote><h3 id="第一个异步函数"><a class="markdownIt-Anchor" href="#第一个异步函数"></a> 第一个异步函数</h3><p>如果只有异步函数可以调用其他异步函数，那么是什么调用了第一个异步函数？</p><p>有三种主要方式：</p><ol><li>在使用 <code>@main</code> 属性的简单命令行程序中，你可以将 <code>main()</code> 方法声明为异步方法。这意味着您的程序将立即启动到异步函数，因此你可以自由调用其他异步函数。</li><li>在使用 SwiftUI 等构建的应用程序中，框架本身有多个可以触发异步函数的地方。例如， <code>refreshable()</code> 和 <code>task()</code> 修饰符都可以自由调用异步函数。</li><li>Swift 提供了专用的 <code>Task</code> API。</li></ol><h3 id="调用异步函数的性能成本"><a class="markdownIt-Anchor" href="#调用异步函数的性能成本"></a> 调用异步函数的性能成本</h3><p>同步和异步函数在内部使用不同的调用约定，异步变体的效率稍低。</p><p>每当我们使用 <code>await</code> 调用异步函数时，我们都会在代码中标记一个潜在的挂起点，Swift 无法在编译时判断 <code>await</code> 调用是否会挂起，运行时发生的情况取决于调用是否挂起：</p><ul><li>如果发生暂停，那么 Swift 将暂停该函数及其所有调用者，这会产生很小的性能成本。</li><li>如果没有发生暂停，则不会发生暂停，并且您的函数将继续以与同步函数相同的效率和时序运行。</li></ul><p>异步函数还有一个副作用：使用 <code>await</code> 不会导致您的代码在继续之前等待一个运行循环。相较于 <code>DispatchQueue.main.async &#123; … &#125;</code> 使用 <code>await</code> ，代码将立即执行。</p><h2 id="异步属性"><a class="markdownIt-Anchor" href="#异步属性"></a> 异步属性</h2><p>Swift 中，只读计算属性也可以是异步的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contents: <span class="type">T</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// more code to come</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-async-let-调用异步函数"><a class="markdownIt-Anchor" href="#使用-async-let-调用异步函数"></a> 使用 async let 调用异步函数</h2><p>有时您想同时运行多个异步操作，然后等待它们的结果返回，最简单的方法是使用 <code>async let</code> 。比如同时发起两个网络请求：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">loadData</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> (userData, <span class="keyword">_</span>) <span class="operator">=</span> <span class="type">URLSession</span>.shared.data(from: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-24601.json&quot;</span>)<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> (messageData, <span class="keyword">_</span>) <span class="operator">=</span> <span class="type">URLSession</span>.shared.data(from: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-messages.json&quot;</span>)<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// more code to come</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上面的代码：</p><ul><li>即使 <code>data(from:)</code> 方法是异步的，我们也不需要在它之前使用 <code>await</code> 因为这是由 <code>async let</code> 暗示的。</li><li><code>data(from:)</code> 方法也会抛出异常，但我们不需要使用 <code>try</code> 来执行它，因为它会被推迟到我们真正想要读取其返回值的时候。Swift 编译器将自动跟踪哪些 <code>async let</code> 常量可能引发错误，并在读取其值时强制使用 <code>try</code> 。</li><li>这两个网络调用都会立即开始，但可能以任何顺序完成。</li></ul><h3 id="wait-和-async-let-的区别"><a class="markdownIt-Anchor" href="#wait-和-async-let-的区别"></a> wait 和 async let 的区别</h3><p><code>await</code> 会等待工作完成，以便我们可以读取其结果，而 <code>async let</code> 则不会。</p><p>例如，如果您想要发出两个网络请求，其中一个请求与另一个请求相关，那么应当使用 <code>await</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first <span class="operator">=</span> <span class="keyword">await</span> requestFirstData()</span><br><span class="line"><span class="keyword">let</span> second <span class="operator">=</span> <span class="keyword">await</span> requestSecondData(using: first)</span><br></pre></td></tr></table></figure><p>而如果两个网络请求没有依赖关系，则可以使用 <code>async let</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getAppData</span>() <span class="keyword">async</span> -&gt; ([<span class="type">News</span>], [<span class="type">Weather</span>], <span class="type">Bool</span>) &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> news <span class="operator">=</span> getNews()</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> weather <span class="operator">=</span> getWeather()</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> hasUpdate <span class="operator">=</span> getAppUpdateAvailable()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> (news, weather, hasUpdate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-var"><a class="markdownIt-Anchor" href="#async-var"></a> async var？</h3><p>Swift 的 <code>async let</code> 语法提供了简短、有用的语法，可以同时运行大量工作，让我们可以稍后等待它们。但是，它只能用作 <code>async let</code> - 不可能使用 <code>async var</code>。</p><p>如果使用 <code>async var</code> 异步创建一个变量，然后修改变量的值，那么我们取消了异步工作吗？如果不是，当异步工作完成时，它会覆盖我们的新值吗？即使我们明确设置了值，在读取值时是否仍然需要使用 await ？所以只能使用 <code>async let</code>。</p><h2 id="continuations"><a class="markdownIt-Anchor" href="#continuations"></a> Continuations</h2><p>使用 Continuations，使我们能够在带有完成处理程序的旧函数和新异步代码之间创建一座桥梁。</p><ul><li><a href="https://developer.apple.com/documentation/swift/checkedcontinuation"><code>CheckedContinuation</code></a>: A mechanism to interface between synchronous and asynchronous code, logging correctness violations.</li><li><a href="https://developer.apple.com/documentation/swift/unsafecontinuation"><code>UnsafeContinuation</code></a>: A mechanism to interface between synchronous and asynchronous code, without correctness checking.</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Message</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> from: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">Message</span>]) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-messages.json&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; data, <span class="keyword">_</span>, <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Message</span>].<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">        completion(messages)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completion([])</span><br><span class="line">  &#125;.resume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>() <span class="keyword">async</span> -&gt; [<span class="type">Message</span>] &#123;</span><br><span class="line">  <span class="keyword">await</span> withCheckedContinuation &#123; continuation <span class="keyword">in</span></span><br><span class="line">    fetchMessages &#123; messages <span class="keyword">in</span></span><br><span class="line">      continuation.resume(returning: messages)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">await</span> fetchMessages()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Downloaded <span class="subst">\(messages.count)</span> messages.&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意，在程序的每个执行路径中，必须准确地调用一次 resume 方法。 否则会造成 continuation 泄露，</p><p>如果您仔细检查了代码并且确定它是正确的，那么将 <code>withCheckedContinuation()</code> 函数替换为对 <code>withUnsafeContinuation()</code> 的调用，其工作原理完全相同方式，但不会增加检查您是否正确使用延续的运行时成本。</p><h3 id="可以抛出错的-continuations"><a class="markdownIt-Anchor" href="#可以抛出错的-continuations"></a> 可以抛出错的 Continuations</h3><p><code>withCheckedThrowingContinuation()</code> 和 <code>withUnsafeThrowingContinuation()</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Message</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> from: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">Message</span>]) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-messages.json&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; data, <span class="keyword">_</span>, <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Message</span>].<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">        completion(messages)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completion([])</span><br><span class="line">  &#125;.resume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An example error we can throw</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">FetchError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> noMessages</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>() <span class="keyword">async</span> -&gt; [<span class="type">Message</span>] &#123;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="keyword">await</span> withCheckedThrowingContinuation &#123; continuation <span class="keyword">in</span></span><br><span class="line">      fetchMessages &#123; messages <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> messages.isEmpty &#123;</span><br><span class="line">          continuation.resume(throwing: <span class="type">FetchError</span>.noMessages)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          continuation.resume(returning: messages)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="type">Message</span>(id: <span class="number">1</span>, from: <span class="string">&quot;Tom&quot;</span>, message: <span class="string">&quot;Welcome to MySpace! I&#x27;m your new friend.&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">await</span> fetchMessages()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Downloaded <span class="subst">\(messages.count)</span> messages.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="存储-continuations"><a class="markdownIt-Anchor" href="#存储-continuations"></a> 存储 Continuations</h3><p>通过将 Continuations 存储为属性，我们就可以在多个不同的地方恢复它。</p><p>下面以 <code>LocationManager</code> 为例，把 <code>continuation</code> 存储在属性中，位置更新成功或失败是在两个代理方法中，分别在这两个方法中恢复 continuation。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LocationManager</span>: <span class="title class_">NSObject</span>, <span class="title class_">ObservableObject</span>, <span class="title class_">CLLocationManagerDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> locationContinuation: <span class="type">CheckedContinuation</span>&lt;<span class="type">CLLocationCoordinate2D</span>?, <span class="type">Error</span>&gt;?</span><br><span class="line">  <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">CLLocationManager</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    manager.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">requestLocation</span>() <span class="keyword">async</span> <span class="keyword">throws</span> -&gt; <span class="type">CLLocationCoordinate2D</span>? &#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="keyword">await</span> withCheckedThrowingContinuation &#123; continuation <span class="keyword">in</span></span><br><span class="line">      locationContinuation <span class="operator">=</span> continuation</span><br><span class="line">      manager.requestLocation()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">locationManager</span>(<span class="keyword">_</span> <span class="params">manager</span>: <span class="type">CLLocationManager</span>, <span class="params">didUpdateLocations</span> <span class="params">locations</span>: [<span class="type">CLLocation</span>]) &#123;</span><br><span class="line">    locationContinuation<span class="operator">?</span>.resume(returning: locations.first<span class="operator">?</span>.coordinate)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">locationManager</span>(<span class="keyword">_</span> <span class="params">manager</span>: <span class="type">CLLocationManager</span>, <span class="params">didFailWithError</span> <span class="params">error</span>: <span class="type">Error</span>) &#123;</span><br><span class="line">    locationContinuation<span class="operator">?</span>.resume(throwing: error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> locationManager <span class="operator">=</span> <span class="type">LocationManager</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">LocationButton</span> &#123;</span><br><span class="line">      <span class="type">Task</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> location <span class="operator">=</span> <span class="keyword">try?</span> <span class="keyword">await</span> locationManager.requestLocation() &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;Location: <span class="subst">\(location)</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;Location unknown.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(height: <span class="number">44</span>)</span><br><span class="line">    .foregroundColor(.white)</span><br><span class="line">    .clipShape(<span class="type">Capsule</span>())</span><br><span class="line">    .padding()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在不支持并发的函数中进行异步调用"><a class="markdownIt-Anchor" href="#在不支持并发的函数中进行异步调用"></a> 在不支持并发的函数中进行异步调用</h2><p>通过使用 <code>Task</code> 来解决问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">doAsyncWork</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Doing async work&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">doRegularWork</span>() &#123;</span><br><span class="line">  <span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> doAsyncWork()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doRegularWork()</span><br></pre></td></tr></table></figure><h2 id="sequence-asyncsequence-和-asyncstream"><a class="markdownIt-Anchor" href="#sequence-asyncsequence-和-asyncstream"></a> Sequence、AsyncSequence 和 AsyncStream</h2><ul><li><code>Sequence</code> 协议，它不断返回值，直到通过返回 <code>nil</code> 终止序列。</li><li><code>AsyncSequence</code> 协议几乎与 <code>Sequence</code> 相同，但序列中的每个元素都是异步返回的。<ul><li>从异步序列读取值必须使用 `await</li></ul></li><li>更高级的异步序列（<code>AsyncStream</code>）生成值的速度可能比您读取它们的速度快，在这种情况下，您可以丢弃额外的值或缓存它们以便稍后读取。`</li></ul><h3 id="使用-for-wait-循环-asyncsequence"><a class="markdownIt-Anchor" href="#使用-for-wait-循环-asyncsequence"></a> 使用 for wait 循环 AsyncSequence</h3><blockquote><p><a href="https://developer.apple.com/documentation/foundation/url/3767315-lines">URL lines</a>: The URL’s resource data, as an asynchronous sequence of lines of text.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fetchUsers</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/users.csv&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> line <span class="keyword">in</span> url.lines &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received user: <span class="subst">\(line)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try?</span> <span class="keyword">await</span> fetchUsers()</span><br></pre></td></tr></table></figure><p>使用异步序列可以有效地生成一个迭代器，然后重复调用它的 <code>next()</code> 直到它返回 <code>nil</code> ，此时循环结束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printUsers</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/users.csv&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> iterator <span class="operator">=</span> url.lines.makeAsyncIterator()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> line <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> iterator.next() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first user is <span class="subst">\(line)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span> <span class="operator">...</span> <span class="number">5</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> line <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> iterator.next() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;User #<span class="subst">\(i)</span>: <span class="subst">\(line)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> remainingResults <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> iterator.next() &#123;</span><br><span class="line">    remainingResults.append(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;There were <span class="subst">\(remainingResults.count)</span> other users.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try?</span> <span class="keyword">await</span> printUsers()</span><br></pre></td></tr></table></figure><h3 id="使用-map-filter-等操作-asyncsequence"><a class="markdownIt-Anchor" href="#使用-map-filter-等操作-asyncsequence"></a> 使用 map ()、filter () 等操作 AsyncSequence</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getQuotes</span>() <span class="keyword">async</span> -&gt; <span class="keyword">some</span> <span class="type">AsyncSequence</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/quotes.txt&quot;</span>)<span class="operator">!</span></span><br><span class="line">  <span class="keyword">let</span> anonymousQuotes <span class="operator">=</span> url.lines.filter &#123; <span class="variable">$0</span>.contains(<span class="string">&quot;Anonymous&quot;</span>) &#125;</span><br><span class="line">  <span class="keyword">let</span> topAnonymousQuotes <span class="operator">=</span> anonymousQuotes.prefix(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">let</span> shoutingTopAnonymousQuotes <span class="operator">=</span> topAnonymousQuotes.map(\.localizedUppercase)</span><br><span class="line">  <span class="keyword">return</span> shoutingTopAnonymousQuotes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> getQuotes()</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> quote <span class="keyword">in</span> result &#123;</span><br><span class="line">    <span class="built_in">print</span>(quote)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Error fetching quotes&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，所有转换都创建了新的异步序列，因此我们不需要将它们与 <code>await</code> 一起使用，但许多转换也会生成单个值。这些必须使用 <code>await</code> 才能挂起，直到返回序列的所有部分，并且如果序列抛出，可能还需要使用 <code>try</code>。例如， <code>allSatisfy()</code>，检查异步序列中的所有元素是否都通过您选择的谓词。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">checkQuotes</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/quotes.txt&quot;</span>)<span class="operator">!</span></span><br><span class="line">  <span class="keyword">let</span> noShortQuotes <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> url.lines.allSatisfy &#123; <span class="variable">$0</span>.count <span class="operator">&gt;</span> <span class="number">30</span> &#125;</span><br><span class="line">  <span class="built_in">print</span>(noShortQuotes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try?</span> <span class="keyword">await</span> checkQuotes()</span><br></pre></td></tr></table></figure><p>其他类似的函数也是如此，例如 <code>min()</code> 、 <code>max()</code> 和 <code>reduce()</code>。</p><h3 id="创建自定义异步序列"><a class="markdownIt-Anchor" href="#创建自定义异步序列"></a> 创建自定义异步序列</h3><p>创建 <code>AsyncSequence</code>：</p><ul><li>需要遵守 <code>AsyncSequence</code> 和 <code>AsyncIteratorProtocol</code> 协议</li><li>迭代器的 <code>next()</code> 方法必须标记为 <code>async</code></li><li>需要创建一个 <code>makeAsyncIterator()</code> 方法</li></ul><p>下面是一个简单的每次调用 next() 时数字都会加倍的异步序列：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DoubleGenerator</span>: <span class="title class_">AsyncSequence</span>, <span class="title class_">AsyncIteratorProtocol</span> &#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Element</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> current <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">next</span>() <span class="keyword">async</span> -&gt; <span class="type">Element</span>? &#123;</span><br><span class="line">    <span class="keyword">defer</span> &#123; current <span class="operator">&amp;*=</span> <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> current</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">makeAsyncIterator</span>() -&gt; <span class="type">DoubleGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sequence <span class="operator">=</span> <span class="type">DoubleGenerator</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> number <span class="keyword">in</span> sequence &#123;</span><br><span class="line">  <span class="built_in">print</span>(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另：在 Swift 编程语言中，<code>&amp;*=</code> 是一个复合赋值运算符，用于执行带符号整数的溢出乘法操作。该运算符结合了溢出乘法运算符 <code>&amp;*</code> 和赋值运算符 <code>=</code>。它可以确保在计算结果超出变量存储范围时，不会抛出溢出错误，而是保留溢出的结果。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span> <span class="operator">=</span> <span class="type">Int</span>.max</span><br><span class="line">a <span class="operator">&amp;*=</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// 输出为 -2</span></span><br></pre></td></tr></table></figure><h3 id="将-asyncsequence-转换为-sequence"><a class="markdownIt-Anchor" href="#将-asyncsequence-转换为-sequence"></a> 将 AsyncSequence 转换为 Sequence</h3><p>最简单的方法是在序列上调用 <code>reduce(into:)</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">AsyncSequence</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">collect</span>() <span class="keyword">async</span> <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="keyword">await</span> reduce(into: [<span class="type">Element</span>]()) &#123; <span class="variable">$0</span>.append(<span class="variable">$1</span>) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="task"><a class="markdownIt-Anchor" href="#task"></a> Task</h2><p>在 Swift 中使用 <code>async/await</code> 允许我们编写易于阅读和理解的异步代码，但它本身仍然会按顺序执行。为了创建实际的并发性（提供同时运行多个工作的能力），Swift 为我们提供了两种特定的类型： <code>Task</code> 和 <code>TaskGroup</code>。</p><p>如果只是开始一两个独立的工作，那么 <code>Task</code> 是正确的选择。如果想将一项作业拆分为多个并发操作，那么 <code>TaskGroup</code> 更适合。</p><p><code>Task</code> 和 <code>TaskGroup</code> 的优先级从高到低依次是 <code>high</code>、<code>medium</code>、<code>low</code>、<code>background</code>。与 DispatchQueue 的 quality-of-service 相比，<code>.high</code> 等同于 <code>.userInitiated</code>，<code>.low</code> 等同于 <code>.utility</code>。</p><h3 id="task-的创建和运行"><a class="markdownIt-Anchor" href="#task-的创建和运行"></a> Task 的创建和运行</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NewsItem</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HighScore</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> score: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchUpdates</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newsTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; [<span class="type">NewsItem</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/headlines.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">NewsItem</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> highScoreTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; [<span class="type">HighScore</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/scores.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">HighScore</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> news <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> newsTask.value</span><br><span class="line">    <span class="keyword">let</span> highScores <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> highScoreTask.value</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Latest news loaded with <span class="subst">\(news.count)</span> items.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> topScore <span class="operator">=</span> highScores.first &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(topScore.name)</span> has the highest score with <span class="subst">\(topScore.score)</span>, out of <span class="subst">\(highScores.count)</span> total results.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;There was an error loading user data.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> fetchUpdates()</span><br></pre></td></tr></table></figure><ul><li>Taxks 并不总是需要返回值，这里的返回值是 <code>[NewsItem]</code>；</li><li>一旦创建了任务，它就会开始运行；</li><li>如果要读取任务的返回值，则需要使用 <code>await</code> 访问其 <code>value</code> 属性。</li></ul><h3 id="detached-task"><a class="markdownIt-Anchor" href="#detached-task"></a> Detached Task</h3><p><code>Task</code> 会继承并运行在调用它的当前任务的执行环境和优先级下。它通常用于创建一个附属于当前上下文的任务，这样可以共享当前上下文的一些特性，例如：Actor 的隔离状态或结构化并发的范围。</p><p><code>Task.detached</code> 会创建一个与当前上下文分离的独立任务。它不会继承创建它的上下文的优先级和任务状态，而是作为一个全新的任务来执行。通常在需要完全独立的并发执行时使用 <code>Task.detached</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> model <span class="operator">=</span> <span class="type">ViewModel</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Authenticate&quot;</span>, action: doWork)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">doWork</span>() &#123;</span><br><span class="line">    <span class="type">Task</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10_000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In Task 1: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Task</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10_000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In Task 2: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中的两个 <code>Task</code>，但它们也是按顺序执行的，因为 <code>@StateObject</code> 视图模型将整个视图强制到 <code>main actor</code> 上，这意味着它一次只能做一件事。这时，将 <code>Task</code> 更改为 <code>Task.detached</code>，这两个任务就可以同时运行。</p><h3 id="从任务中获取结果"><a class="markdownIt-Anchor" href="#从任务中获取结果"></a> 从任务中获取结果</h3><p>如果你想直接读取一个任务（Task）的返回值，应该使用 <code>await</code> 来读取其值，或者如果它包含抛出操作（throwing operation），则使用 <code>try await</code>。然而，所有任务也都有一个 <code>result</code> 属性，该属性返回一个 Swift 的 <code>Result</code> 结构实例，泛型化为任务返回的类型以及它是否可能包含错误。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">LoadError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> fetchFailed, decodeFailed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchQuotes</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> downloadTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/quotes.txt&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> data: <span class="type">Data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">LoadError</span>.fetchFailed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> string <span class="operator">=</span> <span class="type">String</span>(data: data, encoding: .utf8) &#123;</span><br><span class="line">      <span class="keyword">return</span> string</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">LoadError</span>.decodeFailed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> downloadTask.result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> string <span class="operator">=</span> <span class="keyword">try</span> result.get()</span><br><span class="line">    <span class="built_in">print</span>(string)</span><br><span class="line">  &#125; <span class="keyword">catch</span> <span class="type">LoadError</span>.fetchFailed &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unable to fetch the quotes.&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> <span class="type">LoadError</span>.decodeFailed &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unable to convert quotes to text.&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unknown error.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> fetchQuotes()</span><br></pre></td></tr></table></figure><h3 id="任务优先级"><a class="markdownIt-Anchor" href="#任务优先级"></a> 任务优先级</h3><p>创建一个具有优先级的任务：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span>(priority: .high) &#123; () -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">  <span class="comment">// More code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然您可以在创建任务时直接为其分配优先级，但如果不指定优先级，Swift 将遵循三个规则自动确定优先级：</p><ol><li>如果该任务是从另一个任务创建的，则子任务将继承父任务的优先级。</li><li>如果新任务是直接从主线程而不是任务创建的，则会自动为其分配最高优先级 <code>.userInitiated</code> 。</li><li>如果新任务不是由另一个任务或主线程创建的，Swift 将尝试查询线程的优先级或为其赋予 <code>nil</code> 优先级。</li></ol><p>任何任务都可以使用 <code>Task.currentPriority</code> 查询其当前优先级。</p><h3 id="优先级升级"><a class="markdownIt-Anchor" href="#优先级升级"></a> 优先级升级</h3><p>每个任务都可以创建为具有特定的优先级，也可以从其他地方继承优先级。但在两种特定情况下，Swift 会提高任务的优先级，以便能够更快地完成。</p><ol><li>如果较高优先级任务 A 开始等待较低优先级任务 B 的结果，则任务 B 的优先级将提升到与任务 A 相同的优先级。</li><li>如果较低优先级的任务 A 已开始在某个 Actor 上运行，并且较高优先级的任务 B 已在该 Actor 上排队，则任务 A 的优先级将提升以匹配任务 B。</li></ol><p>注意，第 2 种情况下，低优先级任务，其优先级会升级，但不会改变其 <code>currentPriority</code> 的值。</p><h3 id="取消任务"><a class="markdownIt-Anchor" href="#取消任务"></a> 取消任务</h3><p>虽然我们可以告诉任务停止工作，但任务本身可以完全忽略该指令并根据需要继续执行。</p><ol><li>可以通过调用任务的 <code>cancel()</code> 方法显式取消任务。</li><li>可以检查 <code>Task.isCancelled</code> 来确定任务是否已被取消。</li><li>可以调用 <code>Task.checkCancellation()</code> 方法，如果任务已取消，该方法将抛出 <code>CancellationError</code>，否则不做任何操作。</li><li>Foundation 的某些部分会自动检查任务取消情况，即使没有你的输入也会抛出它们自己的取消错误</li><li>如果你使用 <code>Task.sleep()</code> 来等待一段时间，取消你的任务将自动终止等待并抛出 <code>CancellationError</code>。</li><li>如果任务是一个组的一部分，并且组的任何部分抛出错误，其他任务将被取消并等待。</li><li>如果你使用 SwiftUI 的 <code>task()</code> 修饰符启动了一个任务，该任务将在视图消失时自动取消。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getAverageTemperature</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fetchTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">Double</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/readings.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    <span class="keyword">try</span> <span class="type">Task</span>.checkCancellation()</span><br><span class="line">    <span class="keyword">let</span> readings <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Double</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> readings.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line">    <span class="keyword">return</span> sum <span class="operator">/</span> <span class="type">Double</span>(readings.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> fetchTask.value</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Average temperature: <span class="subst">\(result)</span>&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to get data.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> getAverageTemperature()</span><br></pre></td></tr></table></figure><p><code>URLSession.shared.data(from:)</code> 存在隐式取消，其调用将在继续之前检查其任务是否仍处于活动状态。如果任务已被取消，<code>data(from:)</code> 将自动抛出 <code>URLError</code> 并且任务的其余部分将不会执行。<br />这里使用 <code>Task.checkCancellation()</code>，以在网络请求后显式检查取消。</p><p>下面的代码在任务创建后立即取消任务，并返回默认值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getAverageTemperature</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fetchTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">Double</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/readings.json&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">      <span class="keyword">if</span> <span class="type">Task</span>.isCancelled &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> readings <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Double</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">      <span class="keyword">let</span> sum <span class="operator">=</span> readings.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line">      <span class="keyword">return</span> sum <span class="operator">/</span> <span class="type">Double</span>(readings.count)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetchTask.cancel()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> fetchTask.value</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Average temperature: <span class="subst">\(result)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> getAverageTemperature()</span><br></pre></td></tr></table></figure><p>现在我们有一个通过 <code>data(from:)</code> 调用的隐式取消点，以及一个通过 <code>Task.isCancelled</code> 检查的显式取消点。如果其中任何一个被触发，任务将返回 0 而不是抛出错误。</p><h3 id="休眠任务"><a class="markdownIt-Anchor" href="#休眠任务"></a> 休眠任务</h3><p>使当前任务休眠至少 3 秒：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">await</span> <span class="type">Task</span>.sleep(nanoseconds: <span class="number">3_000_000_000</span>)</span><br></pre></td></tr></table></figure><ul><li>需要使用 <code>await</code> 调用 <code>Task.sleep()</code>；</li><li>需要使用 <code>try</code> ，因为 <code>Task.sleep()</code> 会自动检查取消，如果任务被取消，将会抛出一个 <code>CancellationError</code> 错误。</li></ul><p>注意：调用 <code>Task.sleep()</code> 将使当前任务至少休眠您要求的时间，而不是您要求的确切时间。因为当睡眠结束时系统可能正忙于做其他工作。</p><p>另外，与使线程休眠不同，<code>Task.sleep()</code> 不会阻塞底层线程，因此在需要时它可以从其他地方获取工作。</p><h3 id="主动暂停任务"><a class="markdownIt-Anchor" href="#主动暂停任务"></a> 主动暂停任务</h3><p>可以调用 <code>Task.yield()</code> 来自动挂起当前任务。但调用 <code>yield()</code> 并不总是意味着任务会停止运行：如果它的优先级高于其他等待的任务，你的任务完全有可能立即恢复工作。将其视为一种指导——我们只是给 Swift 一个临时执行其他任务的机会，而不是强制它这样做。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">factors</span>(<span class="params">for</span> <span class="params">number</span>: <span class="type">Int</span>) <span class="keyword">async</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> result <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> check <span class="keyword">in</span> <span class="number">1</span> <span class="operator">...</span> number &#123;</span><br><span class="line">    <span class="keyword">if</span> number.isMultiple(of: check) &#123;</span><br><span class="line">      result.append(check)</span><br><span class="line">      <span class="keyword">await</span> <span class="type">Task</span>.yield()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> factors <span class="operator">=</span> <span class="keyword">await</span> factors(for: <span class="number">120</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Found <span class="subst">\(factors.count)</span> factors for 120.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="task-group"><a class="markdownIt-Anchor" href="#task-group"></a> Task Group</h2><h3 id="创建任务组并向其中添加任务"><a class="markdownIt-Anchor" href="#创建任务组并向其中添加任务"></a> 创建任务组并向其中添加任务</h3><p>并不是直接创建 <code>TaskGroup</code> 实例，而是通过调用 <code>withTaskGroup(of:)</code> 函数，并告诉它任务组将返回的数据类型。</p><p>下面是一个简单的示例，它返回 5 个常量字符串，将它们添加到一个数组中，然后将该数组连接到一个字符串中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printMessage</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> string <span class="operator">=</span> <span class="keyword">await</span> withTaskGroup(of: <span class="type">String</span>.<span class="keyword">self</span>) &#123; group -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    group.addTask &#123; <span class="string">&quot;Hello&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;From&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;A&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;Task&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;Group&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> collected <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> value <span class="keyword">in</span> group &#123;</span><br><span class="line">      collected.append(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> collected.joined(separator: <span class="string">&quot; &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(string)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> printMessage()</span><br></pre></td></tr></table></figure><ol><li>我们必须指定任务组将返回的数据的确切类型，在我们的例子中是 <code>String.self</code> ，以便每个子任务都可以返回一个字符串。</li><li>我们需要使用 <code>group -&gt; String in</code> 准确指定组的返回值。</li><li>对于要添加到组中的每个任务，可以调用 <code>addTask()</code>。</li><li>任务组符合 <code>AsyncSequence</code> ，因此我们可以使用 <code>for await</code> 或重复调用 <code>group.next()</code> 从其子级读取所有值。</li><li>因为整个任务组是异步执行的，所以我们必须使用 <code>await</code> 来调用它。</li><li>注意返回的结果是按完成顺序而不是创建的顺序。</li><li>使用 <code>withTaskGroup()</code> 创建的任务不能抛出错误。如果您希望它们能够抛出向上冒泡的错误（即在任务组之外处理的错误），您应该使用 <code>withThrowingTaskGroup()</code> 来代替。</li></ol><p>无论您使用的是抛出任务还是非抛出任务，组中的所有任务都必须在组返回之前完成。您在这里有三个选择：</p><ol><li>等待组中的所有任务完成。</li><li>调用 <code>waitForAll()</code> 将自动等待您未明确等待的任务，并丢弃它们返回的任何结果。</li><li>如果您没有显式等待任何子任务，它们将被隐式等待 - Swift 无论如何都会等待它们，即使您没有使用它们的返回值。</li></ol><h3 id="取消任务组"><a class="markdownIt-Anchor" href="#取消任务组"></a> 取消任务组</h3><p>Swift 的任务组可以通过以下三种方式之一取消：</p><ol><li>如果任务组的父任务被取消。</li><li>如果您在组上明确调用 <code>cancelAll()</code>。</li><li>如果您的子任务之一引发未捕获的错误，则所有剩余任务将被隐式取消。</li></ol><p>首先，调用 <code>cancelAll()</code> 将取消所有剩余的任务。与独立任务一样，取消任务组是合作性的：你的子任务可以使用 <code>Task.isCancelled</code> 或 <code>Task.checkCancellation()</code> 来检查是否被取消，但如果它们愿意，也可以完全忽略取消操作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printMessage</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">String</span>.<span class="keyword">self</span>) &#123; group -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    group.addTask &#123;</span><br><span class="line">      <span class="string">&quot;Testing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    group.addTask &#123;</span><br><span class="line">      <span class="string">&quot;Group&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    group.addTask &#123;</span><br><span class="line">      <span class="string">&quot;Cancellation&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    group.cancelAll()</span><br><span class="line">    <span class="keyword">var</span> collected <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> value <span class="keyword">in</span> group &#123;</span><br><span class="line">        collected.append(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> collected.joined(separator: <span class="string">&quot; &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> printMessage()</span><br></pre></td></tr></table></figure><p>上面的代码，在创建所有三个任务后立即调用 <code>cancelAll()</code>，但是当代码运行时，您仍然会看到所有三个字符串都打印出来。因为取消任务组是合作性的，所以除非你添加的任务隐式或显式地检查取消状态，否则单独调用 <code>cancelAll()</code> 并不会有太大作用。</p><p>尝试将第一个 <code>addTask()</code> 调用替换为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group.addTask &#123;</span><br><span class="line">  <span class="keyword">try</span> <span class="type">Task</span>.checkCancellation()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Testing&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现其结果还是不确定的，这是因为：Swift 将立即启动所有三个任务，它们可能全部并行运行，尽管我们立即调用 <code>cancelAll()</code>，但某些任务可能已经开始运行。</p><p>请记住，调用 <code>cancelAll()</code> 只会取消剩余的任务，这意味着它不会撤销已经完成的工作。即便如此，取消也是合作性的，因此你需要确保你添加到组中的任务会检查取消状态。</p><h3 id="如何处理任务组中的不同结果类型"><a class="markdownIt-Anchor" href="#如何处理任务组中的不同结果类型"></a> 如何处理任务组中的不同结果类型</h3><p>Swift 任务组中的每个任务必须返回与组中所有其他任务相同类型的数据，如果需要一个任务组来处理多种不同类型的数据，如果可以的话，您应该考虑使用 <code>async let</code> 来实现并发。</p><p>还有一个解决方案：创建一个具有关联值的枚举，该值包装您想要返回的基础数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">FetchResult</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> username(<span class="type">String</span>)</span><br><span class="line">  <span class="keyword">case</span> favorites(<span class="type">Set</span>&lt;<span class="type">Int</span>&gt;)</span><br><span class="line">  <span class="keyword">case</span> messages([<span class="type">Message</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">loadUser</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> user <span class="operator">=</span> <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">FetchResult</span>.<span class="keyword">self</span>) &#123; <span class="keyword">_</span> -&gt; <span class="type">User</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// more code here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> loadUser()</span><br></pre></td></tr></table></figure><h2 id="swiftui-中的-task-修饰符"><a class="markdownIt-Anchor" href="#swiftui-中的-task-修饰符"></a> SwiftUI 中的 task() 修饰符</h2><p>SwiftUI 提供了一个 <code>task()</code> 修饰符，一旦视图出现，它就会启动一个新的分离任务，并在视图消失时自动取消该任务。</p><ol><li>最简单的也是常用的，在 <code>task()</code> 中加载视图初始数据。</li><li>更高级的 <code>task()</code> 用法是附加某种 <code>Equatable</code> 的标识值 <code>.task(id:)</code> ——当该值发生变化时，SwiftUI 会自动取消之前的任务，并使用新值创建一个新任务。</li><li><code>task()</code> 的一个特别有趣的用例是与连续生成值的 <code>AsyncSequence</code> 集合一起使用。</li></ol><h2 id="actors"><a class="markdownIt-Anchor" href="#actors"></a> Actors</h2><p>Swift 的 actors 在概念上类似于类，但在并发环境中使用是安全的。这种安全性是因为 Swift 自动确保没有两段代码试图同时访问 actor 的数据——这是由编译器强制实现的，而不是要求开发人员编写使用锁等系统的样板代码。</p><ul><li>Actors 是使用 <code>actor</code> 关键字创建的。</li><li>Actors 是引用类型。</li><li>Actors 具有许多与类相同的特性：你可以为它们定义属性、方法（异步或其他方法）、初始化器和下标，它们可以遵循协议，并且可以是泛型。</li><li>Actors 不支持继承，因此它们不能有便利初始化器，也不支持 <code>final</code> 或 <code>override</code>。</li><li>所有 actors 会自动遵循 <code>Actor</code> 协议，而其他类型不能使用该协议。这使你可以编写仅限于与 actor 一起工作的代码。</li></ul><p>除此之外，actor 还有一个核心行为：如果你尝试读取 actor 的变量属性或调用其方法，并且是在 actor 外部进行的，那么你必须使用 <code>await</code> 以异步方式进行。</p><p>下面是一个简单的示例。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> score <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">printScore</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My score is <span class="subst">\(score)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">copyScore</span>(<span class="params">from</span> <span class="params">other</span>: <span class="type">User</span>) <span class="keyword">async</span> &#123;</span><br><span class="line">    score <span class="operator">=</span> <span class="keyword">await</span> other.score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actor1 <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"><span class="keyword">let</span> actor2 <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">print</span>(actor1.score)</span><br><span class="line"><span class="keyword">await</span> actor1.copyScore(from: actor2)</span><br></pre></td></tr></table></figure><p>从 actor 外部写入属性是不允许的，无论是否使用 <code>await</code>。</p><h3 id="函数参数隔离"><a class="markdownIt-Anchor" href="#函数参数隔离"></a> 函数参数隔离</h3><p>属于 actor 的任何属性和方法都是隔离到该 actor 的，但如果需要，你可以让外部函数也隔离到某个 actor。这样，该函数就可以像在该 actor 内部一样访问 actor 隔离的状态，而无需使用 <code>await</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">DataStore</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> username <span class="operator">=</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line">  <span class="keyword">var</span> friends <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">  <span class="keyword">var</span> highScores <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">  <span class="keyword">var</span> favorites <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="comment">// load data here</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123;</span><br><span class="line">    <span class="comment">// save data here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">debugLog</span>(<span class="params">dataStore</span>: <span class="keyword">isolated</span> <span class="type">DataStore</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Username: <span class="subst">\(dataStore.username)</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Friends: <span class="subst">\(dataStore.friends)</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;High scores: <span class="subst">\(dataStore.highScores)</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Favorites: <span class="subst">\(dataStore.favorites)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">DataStore</span>()</span><br><span class="line"><span class="keyword">await</span> debugLog(dataStore: data)</span><br></pre></td></tr></table></figure><p>函数签名中添加的 <code>isolated</code> 关键字，它允许直接访问 <code>DataStore</code> 的属性而不需要使用 <code>await</code>，整个函数必须在该 actor 上运行，因此需要使用 <code>await</code> 调用 <code>debugLog(dataStore:)</code>。</p><h3 id="部分隔离"><a class="markdownIt-Anchor" href="#部分隔离"></a> 部分隔离</h3><p>默认情况下，Actor 内部的所有方法和可变属性都与该 Actor 隔离，可以使用 <code>nonisolated</code> 关键字将某些方法排除在外。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoKit</span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">actor</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> username: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> password: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> isOnline <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(<span class="params">username</span>: <span class="type">String</span>, <span class="params">password</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.username <span class="operator">=</span> username</span><br><span class="line">    <span class="keyword">self</span>.password <span class="operator">=</span> password</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">nonisolated</span> <span class="keyword">func</span> <span class="title function_">passwordHash</span>() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> passwordData <span class="operator">=</span> <span class="type">Data</span>(password.utf8)</span><br><span class="line">    <span class="keyword">let</span> hash <span class="operator">=</span> <span class="type">SHA256</span>.hash(data: passwordData)</span><br><span class="line">    <span class="keyword">return</span> hash.compactMap &#123; <span class="type">String</span>(format: <span class="string">&quot;%02x&quot;</span>, <span class="variable">$0</span>) &#125;.joined()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user <span class="operator">=</span> <span class="type">User</span>(username: <span class="string">&quot;twostraws&quot;</span>, password: <span class="string">&quot;s3kr1t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user.passwordHash())</span><br></pre></td></tr></table></figure><ul><li>将 <code>passwordHash()</code> 标记为 <code>nonisolated</code> 意味着我们可以在外部调用它，而无需使用 <code>await</code>。</li><li>还可以将 <code>nonisolated</code> 与计算属性一起使用。</li><li>非隔离属性和方法只能访问其他非隔离属性和方法。</li></ul><h3 id="使用-mainactor-在主队列上运行代码"><a class="markdownIt-Anchor" href="#使用-mainactor-在主队列上运行代码"></a> 使用 @MainActor 在主队列上运行代码</h3><p><code>@MainActor</code> 是一个全局 actor，它使用主队列来执行其工作。</p><p>例如，我们可以创建一个具有两个 <code>@Published</code> 属性的可观察对象，并且因为它们都会更新 UI，所以我们将用 <code>@MainActor</code> 标记整个类，以确保这些 UI 更新始终发生在 main actor：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> username <span class="operator">=</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> isAuthenticated <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，不需要显式地将 <code>@MainActor</code> 添加到可观察对象，因为 SwiftUI 视图的 <code>body</code> 属性始终在主 actor 上运行。如果您需要某些方法或计算属性来选择不在主 actor 上运行，可以使用 <code>nonisolated</code>。</p><p>更广泛地说，任何包含 <code>@MainActor</code> 对象作为属性的类型也会隐式地被认为是 <code>@MainActor</code>，这是通过全局 actor 推断实现的。</p><p><code>@MainActor</code> 会自动强制方法或整个类型在主 actor 上运行，大多数情况下无需我们做任何额外的工作。以前我们需要手动完成这项工作，记得在每个需要的地方使用诸如 <code>DispatchQueue.main.async()</code> 之类的代码，但现在编译器会自动为我们处理这一切。</p><p><code>MainActor.run()</code> 方法是 Swift 中用于在主线程上执行代码的一种便捷方式。使用这个方法，你可以确保指定的代码块在主线程上运行，从而避免手动切换线程的麻烦。</p><ol><li>简化线程切换：<code>MainActor.run()</code> 简化了将代码调度到主线程的过程，不需要手动调用 <code>DispatchQueue.main.async()</code>。</li><li>支持异步代码：<code>MainActor.run()</code> 支持异步代码，你可以在其内部使用 <code>await</code>。</li><li>保证主线程执行：使用 <code>MainActor.run()</code> 可以确保代码在主线程上执行，适用于需要在主线程上运行的 UI 更新等任务。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">couldBeAnywhere</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> <span class="type">MainActor</span>.run &#123; () -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is on the main actor.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> couldBeAnywhere()</span><br></pre></td></tr></table></figure><p>也可以将任务的结束标记为 <code>@MainActor</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">couldBeAnywhere</span>() &#123;</span><br><span class="line">  <span class="type">Task</span> &#123; <span class="meta">@MainActor</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is on the main actor.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">couldBeAnywhere()</span><br></pre></td></tr></table></figure><p><code>MainActor.run()</code> 代码将立即执行 - 它不会像 <code>DispatchQueue.main.async()</code> 那样等到下一个运行循环。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span> <span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">runTest</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="type">Task</span> &#123; <span class="meta">@MainActor</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MainActor.run()</code> 的调用将在调用 <code>runTest()</code> 时立即运行。但是，内部的 <code>Task</code> 不会立即运行，因此代码将打印 1, 2, 4, 5, 3。</p><h3 id="全局-actor-推断的工作原理"><a class="markdownIt-Anchor" href="#全局-actor-推断的工作原理"></a> 全局 actor 推断的工作原理</h3><ol><li><p>如果一个类被标记为 <code>@MainActor</code> ，那么它的所有子类也自动被标记为 <code>@MainActor</code>。</p></li><li><p>如果类中的方法被标记为 <code>@MainActor</code> ，则该方法的任何重写也会自动标记为 <code>@MainActor</code>。</p></li><li><p>任何使用 <code>@MainActor</code> 作为其包装值的属性包装器的结构或类将自动为 <code>@MainActor</code>。</p></li><li><p>如果一个协议声明了一个方法是 <code>@MainActor</code>，那么任何遵循该协议的类型都会自动将该方法视为 <code>@MainActor</code>，除非你将协议的遵循与方法的实现分开。</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A protocol with a single `@MainActor` method.</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">save</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A struct that does not conform to the protocol.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore1</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When we make it conform and add save() at the same time, our method is implicitly @MainActor.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore1</span>: <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A struct that conforms to the protocol.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore2</span>: <span class="title class_">DataStoring</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we later add the save() method, it will *not* be implicitly @MainActor so we need to mark it as such ourselves.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore2</span> &#123;</span><br><span class="line">  <span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果整个协议标记为 <code>@MainActor</code>，那么任何遵循该协议的类型在不显式分离协议遵循与主类型声明的情况下，也会自动成为 <code>@MainActor</code>；而如果你将协议的遵循与主类型声明分离开来，那么只有方法会被标记为 <code>@MainActor</code>。</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A protocol marked as @MainActor.</span></span><br><span class="line"><span class="meta">@MainActor</span> <span class="keyword">protocol</span> <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A struct that conforms to DataStoring as part of its primary type definition.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore1</span>: <span class="title class_">DataStoring</span> &#123; <span class="comment">// This struct is automatically @MainActor.</span></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This method is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Another struct that conforms to DataStoring as part of its primary type definition.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore2</span>: <span class="title class_">DataStoring</span> &#123; &#125; <span class="comment">// This struct is automatically @MainActor.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The method is provided in an extension, but it&#x27;s the same as if it were in the primary type definition.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore2</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This method is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A third struct that does *not* conform to DataStoring in its primary type definition.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore3</span> &#123; &#125; <span class="comment">// This struct is not @MainActor.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The conformance is added as an extension</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore3</span>: <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This method is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="actor-跳跃"><a class="markdownIt-Anchor" href="#actor-跳跃"></a> actor 跳跃</h3><p>当一个线程暂停一个 actor 上的工作，转而开始在另一个 actor 上工作时，我们称之为 actor 跳跃（actor hopping）。这种情况会在一个 actor 调用另一个 actor 时发生。Actor hopping 的发生可以由编译器自动管理，确保并发操作的线程安全性和顺序执行，而无需开发人员显式管理线程切换。</p><p>但还是有一些注意事项：</p><ol><li>性能影响：Actor 跳跃可能会引入额外的性能开销，因为线程需要在不同的 actor 之间切换。尽管 Swift 的并发模型尽可能地优化了这些切换过程，但频繁的 actor 跳跃仍可能影响到应用程序的响应性能。</li><li>线程安全：由于 Swift 的 Actor 模型确保了同一时间只有一个 actor 的代码可以执行，因此 actor 跳跃可以保证并发访问的线程安全性。然而，开发人员仍需注意避免可能导致竞态条件或数据不一致的操作。</li><li>异步操作：在执行 actor 跳跃时，可能涉及异步操作和等待。特别是当一个 actor 调用另一个 actor 的异步方法时，可能需要使用 await 来等待结果的返回，以确保异步操作的正确顺序。</li><li>代码设计：合理的代码设计可以减少 actor 跳跃的频率。尽量将相关的操作和数据封装在同一个 actor 内部，减少不同 actor 之间的交互，可以降低 actor 跳跃的发生频率，提升性能和可维护性。</li></ol><p>下面是一个简单的示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">NumberGenerator</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> lastNumber <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">getNext</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> &#123; lastNumber <span class="operator">+=</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> lastNumber</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">run</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span> <span class="operator">...</span> <span class="number">100</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> nextNumber <span class="operator">=</span> <span class="keyword">await</span> getNext()</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Loading <span class="subst">\(nextNumber)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generator <span class="operator">=</span> <span class="type">NumberGenerator</span>()</span><br><span class="line"><span class="keyword">await</span> generator.run()</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>run()</code> 方法必须在主 actor 上执行，因为它带有 <code>@MainActor</code> 属性，然而 <code>getNext()</code> 方法将在协作池（cooperative pool）的某个地方运行，这意味着 Swift 需要在循环内频繁地在主 actor 和协作池之间进行上下文切换。</p><h3 id="actors-classes-and-structs-之间的区别"><a class="markdownIt-Anchor" href="#actors-classes-and-structs-之间的区别"></a> actors, classes, and structs 之间的区别</h3><p>Actors:</p><ul><li>是引用类型，适合用于共享可变状态。</li><li>可以拥有属性、方法、初始化器和下标。</li><li>不支持继承。</li><li>自动遵循 Actor 协议。</li><li>自动遵循 AnyObject 协议，因此可以在不添加显式 id 属性的情况下遵循 Identifiable 协议。</li><li>可以有析构器。</li><li>不能直接从外部访问其公共属性和方法；必须使用 await。</li><li>只能同时执行一个方法，无论它们如何被访问。</li></ul><p>Classes：</p><ul><li>是引用类型，适合用于共享可变状态。</li><li>可以拥有属性、方法、初始化器和下标。</li><li>支持继承。</li><li>不能遵循 Actor 协议。</li><li>自动遵循 AnyObject 协议，因此可以在不添加显式 id 属性的情况下遵循 Identifiable 协议。</li><li>可以有析构器。</li><li>可以直接从外部访问其公共属性和方法。</li><li>可能同时执行多个方法。</li></ul><p>Structs：</p><ul><li>是值类型，会被复制而不是共享。</li><li>可以拥有属性、方法、初始化器和下标。</li><li>不支持继承。</li><li>不能遵循 Actor 协议。</li><li>不能遵循 AnyObject 协议；如果要添加 Identifiable 协议的遵循，必须自己添加 id 属性。</li><li>不能有析构器。</li><li>可以直接从外部访问其公共属性和方法。</li><li>可能同时执行多个方法。</li></ul><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://developer.apple.com/documentation/swift/concurrency">Concurrency Documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a></li></ul>]]></content>
    
    
    <summary type="html">本篇是 Swift Concurrency by Example 的学习笔记。简要记录，备忘清单。推荐看原教程，配合代码示例更佳清晰易懂。</summary>
    
    
    
    
    <category term="Concurrency" scheme="http://kiligwyu.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Docker 备忘清单</title>
    <link href="http://kiligwyu.com/docker/"/>
    <id>http://kiligwyu.com/docker/</id>
    <published>2024-06-29T05:54:20.000Z</published>
    <updated>2024-06-29T06:09:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#docker">Docker</a><ul><li><a href="#install-docker-engine-on-ubuntu">Install Docker Engine on Ubuntu</a></li></ul></li><li><a href="#install-docker-compose-plugin">Install Docker Compose Plugin</a></li><li><a href="#container">Container</a><ul><li><a href="#%E5%9C%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C-nginx">在容器中运行 Nginx</a></li><li><a href="#%E9%80%9A%E8%BF%87-volumn-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6">通过 Volumn 共享文件</a></li></ul></li><li><a href="#image">Image</a><ul><li><a href="#%E6%9E%84%E5%BB%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84-docker-%E9%95%9C%E5%83%8F">构建你自己的 Docker 镜像</a></li><li><a href="#%E4%BD%BF%E7%94%A8-dockerfile-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA">使用 Dockerfile 自动化镜像构建</a><ul><li><a href="#%E6%9B%B4%E5%A4%9A-dockerfile-%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4">更多 Dockerfile 中的命令</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E9%95%9C%E5%83%8F%E5%88%B0-docker-hub">提交镜像到 Docker Hub</a></li></ul></li><li><a href="#network">Network</a></li><li><a href="#volume">Volume</a></li></ul></li><li><a href="#docker-compose">Docker Compose</a></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><hr /><p>前几天在 VPS(Virtual Private Servers) 上使用 <a href="https://www.docker.com">Docker</a> 部署一些自用服务。之前对 Docker 了解过一些，长时间不用容易遗忘，趁此再复习一下 Docker，记录在此备忘清单。</p><h2 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h2><p>macOS 本地的话推荐 <a href="https://orbstack.dev">OrbStack</a>，轻量、快速、简单易用。<br />Linux 服务器上安装照官方文档 <a href="https://docs.docker.com/engine/install/">Install Docker Engine</a> 安装即可。</p><p>下面是在 Ubuntu 上安装 Docker Engine 的步骤（摘自官方文档，但改用了 <code>apt</code> 而非 <code>apt-get</code>）。</p><h3 id="install-docker-engine-on-ubuntu"><a class="markdownIt-Anchor" href="#install-docker-engine-on-ubuntu"></a> Install Docker Engine on Ubuntu</h3><ol><li><p>Run the following command to uninstall all conflicting packages:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="keyword">do</span> sudo apt remove <span class="variable">$pkg</span>; <span class="keyword">done</span></span></span><br></pre></td></tr></table></figure></li><li><p>在新主机上首次安装 Docker Engine 前，需要配置下 Docker  的 <code>apt</code> 仓库：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add Docker<span class="string">&#x27;s official GPG key:</span></span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ca-certificates curl</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Add the repository to Apt sources:</span></span></span><br><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash"><span class="string">(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>Install the latest version of Docker packages:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span></span><br></pre></td></tr></table></figure></li><li><p>Verify that the Docker Engine installation is successful by running the <code>hello-world</code> image.</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run hello-world</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="install-docker-compose-plugin"><a class="markdownIt-Anchor" href="#install-docker-compose-plugin"></a> Install Docker Compose Plugin</h2><p>安装完 Docker Engine，继续安装 Docker Compose Plugin。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify that Docker Compose is installed correctly by checking the version.</span></span><br><span class="line"><span class="variable">$docker</span> compose version</span><br></pre></td></tr></table></figure><h2 id="container"><a class="markdownIt-Anchor" href="#container"></a> Container</h2><ul><li><code>docker run ubuntu:latest ls -l</code>:  执行一个最新版的 Ubuntu 容器，第一次执行这条命令的时候，由于本地还没有 Ubuntu 最新版的安装镜像，因此 Docker 会自动从 Docker Hub 上下载。<code>ls -l</code> 是在 Ubuntu 中执行的命令。</li><li><code>docker ps</code>: 查看当前正在执行的容器</li><li><code>docker ps -a</code>: 查看当前所有容器（包括正在执行的和已经结束的）</li><li><code>docker inspect [CONTAINER ID / NAMES]</code>: 查看容器里都有哪些内容<ul><li>同时使用 <code>jq</code> 来格式化 JSON<br /><br></li></ul></li><li><code>docker rm [CONTAINER ID / NAMES]</code>: 删除容器</li><li><code>docker rm $(docker ps -aq)</code>: 删除所有容器，<code>-aq</code> 是 <code>-a</code> 和 <code>-q</code> 的缩写，<code>-q</code> 是让 <code>docker ps</code> 命令只显示容器 ID 列表</li><li><code>docker run --rm ubuntu:latest ls -l</code>: 每次执行完一个容器之后自动删除容器<br /><br></li><li><code>docker run -it ubuntu:latest bash</code>:“登录”到正在执行中的容器中，和容器里这个 bash 交互<ul><li><code>-i</code> 是 interactive，表示我们要和容器交互；</li><li><code>-t</code> 是 tty，让 docker 创建一个虚拟终端，这样就能在屏幕上看到来自容器的控制台输出了</li><li>执行 <code>$ exit</code> 可以离开 <code>bash</code>。Bash 执行结束了，容器也就结束了</li></ul></li><li><code>docker start [CONTAINER ID]</code>: 重新启动之前退出的容器，可以用 <code>-i</code> 参数以交互模式恢复容器的执行</li><li><code>docker stop [CONTAINER ID]</code>: 停止一个在后台执行的容器</li></ul><h3 id="在容器中运行-nginx"><a class="markdownIt-Anchor" href="#在容器中运行-nginx"></a> 在容器中运行 Nginx</h3><ol><li>以交互模式启动一个执行 bash 的容器：<code>docker run -it -p 8080:80 ubuntu:latest bash</code>，这里，<code>-p</code> 参数可以让我们用 <code>host_port:container_port</code> 的格式指定容器内外的端口映射规则；</li><li>在 bash 中执行 <code>apt update &amp;&amp; apt install -y nginx</code>；</li><li>安装完成后，和普通的 Ubuntu 不同的是，Nginx 不会自动启动，需要手工执行一下 <code>$ nginx</code> 命令。 再执行 <code>ps aux</code> 命令，就能看到 Nginx 已经启动了；</li><li>然后就可以在浏览器中访问 <code>http://localhost:8080</code> 了。</li></ol><h3 id="通过-volumn-共享文件"><a class="markdownIt-Anchor" href="#通过-volumn-共享文件"></a> 通过 Volumn 共享文件</h3><p>在启动容器的时候，使用 <code>-v</code> 参数，可以把 Host 上的某个目录映射到容器里。也可以使用多个 <code>-v</code> 参数，来给容器添加多个目录映射。</p><p>在 host 中，创建一个 <code>/tmp/web</code> 目录，并在其中添加一个 demo.html 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /tmp/web</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This is a web page from host.&quot;</span> &gt; /tmp/web/demo.html</span><br></pre></td></tr></table></figure><p>容器中的 Nginx 默认的 web 根目录是 <code>/var/www/html</code>。执行下面的命令启动 docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8080:80 -v /tmp/web:/var/www/html ubuntu:latest bash</span><br></pre></td></tr></table></figure><p>重新在容器里运行 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt update &amp;&amp; apt install nginx -y</span><br><span class="line">$ nginx</span><br></pre></td></tr></table></figure><p>然后在浏览器里就可以访问 <code>http://localhost:8080/demo.html</code> 了。</p><h2 id="image"><a class="markdownIt-Anchor" href="#image"></a> Image</h2><ul><li><code>docker images</code>: 查看本地已经安装的 Docker 镜像</li><li><code>docker rmi ubuntu:latest</code>: 使用 <code>name:tag</code> 的形式来删除指定镜像，也可以使用镜像 ID</li><li><code>docker rmi $(docker images -q)</code>: 使用镜像 ID 来删除镜像</li></ul><h3 id="构建你自己的-docker-镜像"><a class="markdownIt-Anchor" href="#构建你自己的-docker-镜像"></a> 构建你自己的 Docker 镜像</h3><p>以上面在 Ubuntu 镜像中运行 Nginx 为例。</p><ol><li><p><code>docker diff a33bf65c9623</code>: 查看容器中的每一个文件变化</p></li><li><p><code>docker commit -a &quot;Kilig&quot; -m &quot;Install Nginx&quot; a33bf65c9623 kilig/nginx:0.1.0</code>: 像 Git 中提交代码一样，去提交这些变化</p><ul><li><code>-a</code> 表示 Author，即提交者的姓名；</li><li><code>-m</code> 表示 Message，即本次提交的注释；</li><li><code>a33bf65c9623</code>，这是容器 ID，它表示了我们要制作的镜像最终的状态；</li><li><code>kilig/nginx:0.1.0</code>，这是新镜像的名称，以及版本号。</li></ul></li><li><p>重新执行 <code>docker images</code>，就能看到我们新创建的 nginx 镜像了</p><p>但运行一下刚创建的容器 <code>docker run -it -p 8080:80 kilig/nginx:0.1.0 nginx</code>，容器执行一下就退出了。</p><blockquote><p>为什么会这样呢？这是因为当我们执行 nginx 命令的时候，会启动两类进程：首先启动的是作为管理调度的 master process，它继续生成实际处理 HTTP 请求的 worker process。默认情况下，master process 是一个守护进程，它启动之后，就会断掉和自己的父进程之间的关联，于是 Docker 就跟踪不到了，进而容器也就会退出了。因此，解决的办法，就是让 Nginx 的 master process 不要以守护进程的方式启动，而是以普通模式启动就好了。为此，我们得修改下 Nginx 的配置文件。</p></blockquote><p>修正：</p></li><li><p>用我们新创建的镜像，启动一个执行 Bash 的容器：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it kilig/nginx:0.1.0 bash</span><br></pre></td></tr></table></figure></li><li><p>修改这个容器中 Nginx 的配置文件，关掉守护进程模式：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;daemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>重新提交一次：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit -a <span class="string">&quot;Kilig&quot;</span> -m <span class="string">&quot;Turn off the daemon mode&quot;</span> 153a7b934628 kilig/nginx:0.1.1</span><br></pre></td></tr></table></figure></li><li><p><code>docker history kilig/nginx:0.1.1</code>: 可以查看我们的提交记录</p></li><li><p>重新执行下面的命令启动 Nginx：<code>docker run -it -p 8080:80 -d kilig/nginx:0.1.1 nginx</code><br />这里我们使用了 <code>-d</code> 参数使容器在后台执行。</p></li></ol><h3 id="使用-dockerfile-自动化镜像构建"><a class="markdownIt-Anchor" href="#使用-dockerfile-自动化镜像构建"></a> 使用 Dockerfile 自动化镜像构建</h3><p>使用 Dockfile 把打造镜像的过程放在一个脚本里，避免易错的手工打造，提高效率，也便于分享。<br /><code>Dockerfile</code> 是 docker 默认会使用的文件名，当然也可以在执行 <code>docker run</code> 的时候使用 <code>-f [filename]</code> 参数来指定其他文件名，不过一般都保持默认的。</p><ol><li><p>新建一个 <code>/tmp/nginx</code> 目录，在其中创建一个叫做 <code>Dockerfile</code> 的文件。</p></li><li><p>在 Dockerfile 中，添加下面内容：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">ubuntu:latest</span></span><br><span class="line"></span><br><span class="line"><span class="string">LABEL</span> <span class="string">maintainer=&quot;kilig</span> <span class="string">&lt;kilig@kilig.studio&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">apt</span> <span class="string">update</span> <span class="string">&amp;&amp;</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">nginx</span> <span class="string">-y</span> <span class="string">\</span></span><br><span class="line">  <span class="string">&amp;&amp;</span> <span class="string">apt</span> <span class="string">clean</span> <span class="string">\</span></span><br><span class="line">  <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/var/lib/apt/lists/*</span> <span class="string">/tmp/*</span> <span class="string">/var/tmp/*</span> <span class="string">\</span></span><br><span class="line">  <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">&quot;daemon off;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;nginx&quot;</span>]</span><br></pre></td></tr></table></figure><p>在上面的文件，所有大写字母，都是 Dockerfile 中的命令。其中：</p><ul><li><code>FROM</code> 指的是构建新镜像的基础，这里我们要基于 <code>ubuntu:latest</code> 这个镜像定制自己的镜像；</li><li><code>LABEL</code> 用于定义一些容器的 metadata；</li><li><code>RUN</code> 用于设置构建新镜像的各种动作。在此一共执行了 4 个动作，分别是：安装 Nginx、清理下载安装包、清除临时文件、关闭 Nginx 守护进程模式。这里我们使用了 <code>&amp;&amp;</code> 把这 4 个动作写成了一个 <code>RUN</code> 命令，而没有使用不同的 <code>RUN</code> 命令分别执行这些动作。作为一个最佳实践，在构建一个新镜像时，我们应该尽可能减少 <code>RUN</code> 命令的使用次数，这样可以减少镜像的大小；</li><li><code>CMD</code> 用于设置容器启动时默认执行的命令，显然，我们就是要启动 nginx。</li></ul></li><li><p>执行下面的命令构建镜像：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t kilig/nginx:0.1.2 .</span><br></pre></td></tr></table></figure><p>这里：</p><ul><li>当我们执行 <code>docker build</code> 的时候，docker 就会默认在当前目录中，查找一个叫做 <code>Dockerfile</code> 的文件名作为构建脚本。或者我们也可以通过 <code>-f filename</code> 的形式指定成其他文件；</li><li><code>-t</code> 用于设置新镜像的名称和 <code>TAG</code>；</li><li><code>.</code> 用于设置构建镜像时的上下文环境，这个环境不一定是当前目录。在 Dockerfile 中，所有的相对路径都会基于这个上下文环境指定的目录。</li></ul></li><li><p>执行下面的命令启动镜像：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -p 8080:80 kilig/nginx:0.1.2</span><br></pre></td></tr></table></figure><p>由于 Dockfile 中通过 <code>CMD</code> 命令设置了容器启动的默认命令，在启动的时候，就可以不用再设置了。</p></li></ol><h4 id="更多-dockerfile-中的命令"><a class="markdownIt-Anchor" href="#更多-dockerfile-中的命令"></a> 更多 Dockerfile 中的命令</h4><ul><li><code>ARG</code> 用于定义在构建镜像时使用的变量；</li><li><code>ENV</code> 用于定义在构建镜像和执行容器时使用的环境变量；<ul><li>执行容器的时候，可以使用 <code>-e</code> 参数，修改环境变量的值</li></ul></li></ul><h4 id="提交镜像到-docker-hub"><a class="markdownIt-Anchor" href="#提交镜像到-docker-hub"></a> 提交镜像到 Docker Hub</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交镜像到 Docker Hub</span></span><br><span class="line">$ docker push kilig/nginx:0.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把镜像下载回来</span></span><br><span class="line">$ docker pull kilig/nginx:0.1.2 </span><br></pre></td></tr></table></figure><h3 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h3><ul><li><code>docker network -h</code> 查看和网络相关的命令的用法。</li></ul><p>Docker 主要支持两种形式的网络，分别是：</p><ul><li><code>bridge mode</code>：这就是我们在单个 host 上执行多个容器时使用的网络，同时，也是 Docker 默认的网络类型；</li><li><code>overlay mode</code>：这是在多台 hosts 上部署复杂网络结构时使用的网络模式。</li></ul><p>使用 Docker 中的网络：</p><ol><li><p>执行下面的命令，创建一个 Docker 网络：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create --driver=bridge kilig-net</span><br></pre></td></tr></table></figure><p>Docker 会给我们返回一个表示该网络的哈希值。</p></li><li><p>把所有相关的容器在启动的时候，通过 <code>--network</code> 选项，加入到 <code>kilig-net</code> 中：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --network=kilig-net -p 80:80 -it --<span class="built_in">rm</span> kilig/nginx:0.1.2</span><br></pre></td></tr></table></figure></li></ol><h3 id="volume"><a class="markdownIt-Anchor" href="#volume"></a> Volume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> -it -v /data busybox</span><br></pre></td></tr></table></figure><p><code>busybox</code> 是一个极简的 Linux，非常适合用来试验一些功能。这里我们使用 <code>-v</code> 的时候，只指定了一个目录 <code>/data</code>，然后就可以把 Linux 中一些有写操作的目录，符号链接到 <code>/data</code>。</p><p>那么使用 <code>-v /data</code> 的时候，实际的文件究竟存在了哪呢？</p><ol><li>执行 <code>docker volume ls</code>，可以看到 Docker 给这个 data volume 分配了一个唯一 ID：<code>VOLUME NAME</code>；</li><li>执行 <code>docker volume inspect [VOLUME NAME]</code>，在输出的信息中 <code>Mountpoint</code> 就是 <code>/data</code> 容器实际保存的目录。</li></ol><p>但在 Mac 或者 Windows 上，这个目录就并不是直接创建在 Host 的文件系统中的，而是在 Docker 创建的一个虚拟层上的。为了看到这个 volume 对应的物理文件夹：</p><ol><li>我们把 Mac 的 <code>/</code> 映射到容器里的 <code>/vm-data</code> 目录：<code>$ docker run --rm -it -v /:/vm-data busybox</code>；</li><li>在容器里执行 <code>ls /vm-data/var/lib/docker/volumes/</code>，就可以看到 <code>/data</code> volume 实际存储的位置了。</li></ol><h2 id="docker-compose"><a class="markdownIt-Anchor" href="#docker-compose"></a> Docker Compose</h2><p>使用 Docker Compose 一键部署开发环境。</p><ul><li><code>docker-compose.yml</code> 是编写的构建脚本，文件名是固定的；</li><li>同级目录下 <code>.env</code> 文件用来定义环境变量；</li></ul><p>在 <code>docker-compose.yml</code> 所在目录下，执行 <code>docker compose build</code> 构建镜像，再执行 <code>docker compose up -d</code>，就可以启动服务并在后台运行了。</p><p>需要注意的是：docker 并不一定会按照 <code>docker-compose.yml</code> 中 <code>services</code> 的顺序启动，所以不能依赖这个关系。</p><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://docs.docker.com">Docker Docs</a></li><li><a href="https://hub.docker.com/">Docker Hub</a></li><li><a href="https://jqlang.github.io/jq/">jq</a></li><li><a href="https://boxueio.com/categories/docker">Docker - 泊学</a></li></ul>]]></content>
    
    
    <summary type="html">前几天在 VPS(Virtual Private Servers) 上使用 Docker 部署一些自用服务。之前对 Docker 了解过一些，长时间不用容易遗忘，趁此再复习一下 Docker，记录在此备忘清单。</summary>
    
    
    
    
    <category term="Docker" scheme="http://kiligwyu.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Combine 备忘清单</title>
    <link href="http://kiligwyu.com/combine/"/>
    <id>http://kiligwyu.com/combine/</id>
    <published>2024-06-16T13:29:39.000Z</published>
    <updated>2024-06-16T14:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#publishers-subscribers">Publishers &amp; Subscribers</a><ul><li><a href="#publisher">Publisher</a></li><li><a href="#subscriber">Subscriber</a></li><li><a href="#cancellable">Cancellable</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%A2%E9%98%85%E8%80%85">创建自定义订阅者</a></li><li><a href="#future">Future</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4type-erasure">类型擦除（Type erasure）</a></li></ul></li><li><a href="#operators">Operators</a><ul><li><a href="#transforming-operators">Transforming Operators</a><ul><li><a href="#collect">collect()</a></li><li><a href="#map_">map(_:)</a><ul><li><a href="#mapping-key-paths">Mapping key paths</a></li><li><a href="#trymap_">tryMap(_:)</a></li></ul></li><li><a href="#flatmapmaxpublishers_">flatMap(maxPublishers:_:)</a></li><li><a href="#replacenilwith">replaceNil(with:)</a></li><li><a href="#replaceemptywith">replaceEmpty(with:)</a></li><li><a href="#scan__">scan(_:_:)</a></li></ul></li><li><a href="#filtering-operators">Filtering Operators</a><ul><li><a href="#filtering">Filtering</a><ul><li><a href="#filter">filter</a></li><li><a href="#removeduplicates">removeDuplicates</a></li></ul></li><li><a href="#compacting-and-ignoring">Compacting and ignoring</a><ul><li><a href="#compactmap">compactMap</a></li><li><a href="#ignoreoutput">ignoreOutput</a></li></ul></li><li><a href="#finding-values">Finding values</a><ul><li><a href="#firstwhere">firstWhere</a></li><li><a href="#lastwhere">lastWhere</a></li></ul></li><li><a href="#dropping-values">Dropping values</a><ul><li><a href="#dropfirst">dropFirst</a></li><li><a href="#dropwhile">dropWhile</a></li><li><a href="#dropuntiloutputfrom">dropUntilOutputFrom</a></li></ul></li><li><a href="#limiting-values">Limiting values</a><ul><li><a href="#prefix">prefix</a></li><li><a href="#prefixwhile">prefixWhile</a></li><li><a href="#prefixuntiloutputfrom">prefixUntilOutputFrom</a></li></ul></li></ul></li><li><a href="#combining-operators">Combining Operators</a><ul><li><a href="#prepending">Prepending</a><ul><li><a href="#prependoutput">prepend(Output…)</a></li><li><a href="#prependsequence">prepend(Sequence)</a></li><li><a href="#prependpublisher">prepend(Publisher)</a></li></ul></li><li><a href="#appending">Appending</a><ul><li><a href="#appendoutput">append(Output…)</a></li><li><a href="#appendsequence">append(Sequence)</a></li><li><a href="#appendpublisher">append(Publisher)</a></li></ul></li><li><a href="#advanced-combining">Advanced combining</a><ul><li><a href="#switchtolatest">switchToLatest</a></li><li><a href="#mergewith">merge(with:)</a></li><li><a href="#combinelatest">combineLatest</a></li><li><a href="#zip">zip</a></li></ul></li></ul></li><li><a href="#time-manipulation-operators">Time Manipulation Operators</a><ul><li><a href="#shifting-time">Shifting time</a></li><li><a href="#collecting-values">Collecting values</a></li><li><a href="#holding-off-on-events">Holding off on events</a><ul><li><a href="#debounce">Debounce</a></li><li><a href="#throttle">Throttle</a></li><li><a href="#timing-out">Timing out</a></li></ul></li><li><a href="#measuring-time">Measuring time</a></li></ul></li><li><a href="#sequence-operators">Sequence Operators</a><ul><li><a href="#finding-values">Finding values</a><ul><li><a href="#min">min</a></li><li><a href="#max">max</a></li><li><a href="#first">first</a></li><li><a href="#last">last</a></li><li><a href="#outputat">output(at:)</a></li><li><a href="#outputin">output(in:)</a></li></ul></li><li><a href="#querying-the-publisher">Querying the publisher</a><ul><li><a href="#count">count</a></li><li><a href="#contains">contains</a></li><li><a href="#allsatisfy">allSatisfy</a></li><li><a href="#reduce">reduce</a></li></ul></li></ul></li></ul></li><li><a href="#action">Action</a><ul><li><a href="#debugging">Debugging</a><ul><li><a href="#printing-events">Printing events</a></li><li><a href="#acting-on-events-performing-side-effects">Acting on events — performing side effects</a></li><li><a href="#using-the-debugger-as-a-last-resort">Using the debugger as a last resort</a></li></ul></li><li><a href="#timers">Timers</a><ul><li><a href="#using-runloop">Using RunLoop</a></li><li><a href="#using-the-timer-class">Using the Timer class</a></li><li><a href="#using-dispatchqueue">Using DispatchQueue</a></li></ul></li><li><a href="#key-value-observing">Key-Value Observing</a><ul><li><a href="#publisherforoptions">publisher(for:options:)</a></li><li><a href="#observation-options">Observation options</a></li></ul></li><li><a href="#resource-management">Resource Management</a><ul><li><a href="#the-share-operator">The share() operator</a></li><li><a href="#the-multicast_-operator">The multicast(_:) operator</a></li><li><a href="#future">Future</a></li></ul></li></ul></li><li><a href="#error-handling">Error Handling</a><ul><li><a href="#never">Never</a></li><li><a href="#setfailuretype">setFailureType</a></li><li><a href="#assigntoon">assign(to:on:)</a></li><li><a href="#assignto">assign(to:)</a></li><li><a href="#assertnofailure">assertNoFailure</a></li><li><a href="#catching-and-retrying">Catching and retrying</a></li></ul></li><li><a href="#schedulers">Schedulers</a><ul><li><a href="#subscribeon-%E5%92%8C-receiveon">subscribe(on:) 和 receive(on:)</a></li><li><a href="#scheduler-implementations">Scheduler implementations</a></li><li><a href="#runloopmain-vs-dispatchqueuemain">RunLoop.main vs DispatchQueue.main</a></li></ul></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><p>Combine 是一个声明式、响应式框架，用于随着时间的推移处理异步事件。支持 iOS 13、macOS 10.15、watchOS 6 及之后的系统。这里是我学习 Combine 时的笔记，只是列出要点，没有详细的解释，权当备忘清单。</p><blockquote><p>The Combine framework provides a declarative approach for how your app processes events. Rather than potentially implementing multiple delegate callbacks or completion handler closures, you can create a single processing chain for a given event source. Each part of the chain is a Combine operator that performs a distinct action on the elements received from the previous step.</p></blockquote><h2 id="publishers-subscribers"><a class="markdownIt-Anchor" href="#publishers-subscribers"></a> Publishers &amp; Subscribers</h2><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162153303.png" alt="Publishers &amp; Subscribers" /></p><h3 id="publisher"><a class="markdownIt-Anchor" href="#publisher"></a> Publisher</h3><p><code>Publisher</code> 协议声明类型可以随着时间的推移传输一系列值。</p><p>发布者可以发出两种事件，值和完成事件。它可以发出零个或多个值，但只能发出一个完成事件，该事件可以是正常完成事件，也可以是错误。一旦发布者发出完成事件，它就完成了并且不能再发出任何事件。</p><h3 id="subscriber"><a class="markdownIt-Anchor" href="#subscriber"></a> Subscriber</h3><p><code>Subscriber</code> 协议声明类型可以从发布者接收输入。如果没有订阅者来接收输出，则发布者不会发出任何值。</p><p>Combine 提供两个内置订阅者：</p><ul><li><code>sink(_:_:)</code>：允许你使用闭包来处理输出值</li><li><code>assign(to:on:)</code>：将结果输出绑定到数据模型或 UI 控件上的某些属性</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> just <span class="operator">=</span> <span class="type">Just</span>(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">_</span> <span class="operator">=</span> just</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Received completion&quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveValue: &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Received value&quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeObject</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> value: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object <span class="operator">=</span> <span class="type">SomeObject</span>()</span><br><span class="line"><span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world!&quot;</span>].publisher</span><br><span class="line"><span class="keyword">_</span> <span class="operator">=</span> publisher</span><br><span class="line">  .assign(to: \.value, on: object)</span><br></pre></td></tr></table></figure><h3 id="cancellable"><a class="markdownIt-Anchor" href="#cancellable"></a> Cancellable</h3><p><code>Subscription</code> 协议继承自 <code>Cancellable</code> 协议，当订阅者完成其工作并且不再希望从发布者接收值时，可以调用 <code>cancel()</code> 以取消订阅。<br />如果你没有在订阅上明确调用 <code>cancel()</code>，它将持续到发布者完成，或直到正常内存管理导致存储的订阅非初始化。到那时，它会为你取消订阅。</p><h3 id="创建自定义订阅者"><a class="markdownIt-Anchor" href="#创建自定义订阅者"></a> 创建自定义订阅者</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> publisher <span class="operator">=</span> (<span class="number">1</span> <span class="operator">...</span> <span class="number">6</span>).publisher</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">IntSubscriber</span>: <span class="title class_">Subscriber</span> &#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Input</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Failure</span> <span class="operator">=</span> <span class="type">Never</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">subscription</span>: <span class="type">Subscription</span>) &#123;</span><br><span class="line">    subscription.request(.max(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Subscribers</span>.<span class="type">Demand</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received value&quot;</span>, input)</span><br><span class="line">    <span class="keyword">return</span> .none</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">completion</span>: <span class="type">Subscribers</span>.<span class="type">Completion</span>&lt;<span class="type">Never</span>&gt;) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received completion&quot;</span>, completion)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="future"><a class="markdownIt-Anchor" href="#future"></a> Future</h3><p>就像可以使用 <code>Just</code> 创建向订阅者发出单个值然后完成的发布者一样， <code>Future</code> 可用于异步生成单个结果然后完成。</p><p><code> Future</code> 是贪婪的，也就是说一旦创建就会执行。它不需要像普通发布者那样懒惰的订阅者。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscriptions <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">futureIncrement</span>(</span><br><span class="line">  <span class="params">integer</span>: <span class="type">Int</span>,</span><br><span class="line">  <span class="params">afterDelay</span> <span class="params">delay</span>: <span class="type">TimeInterval</span>) -&gt; <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt; &#123; promise <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Original&quot;</span>)</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().asyncAfter(deadline: .now() <span class="operator">+</span> delay) &#123;</span><br><span class="line">      promise(.success(integer <span class="operator">+</span> <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> future <span class="operator">=</span> futureIncrement(integer: <span class="number">1</span>, afterDelay: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">future</span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的延迟之后，第二个订阅会收到相同的值</span></span><br><span class="line"><span class="comment">// feature 不会重新履行诺言；相反，它共享或重放其输出</span></span><br><span class="line">future</span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;Second&quot;</span>, <span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Second&quot;</span>, <span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类型擦除type-erasure"><a class="markdownIt-Anchor" href="#类型擦除type-erasure"></a> 类型擦除（Type erasure）</h3><p>有时，你希望让订阅者订阅以接收来自发布者的事件，但无法访问有关该发布者的其他详细信息，这时可以使用类型擦除 <code>eraseToAnyPublisher</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscriptions <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> publisher <span class="operator">=</span> subject.eraseToAnyPublisher()</span><br><span class="line">  </span><br><span class="line">publisher</span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">  </span><br><span class="line">subject.send(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// error: Value of type &#x27;AnyPublisher&lt;Int, Never&gt;&#x27; has no member &#x27;send&#x27;</span></span><br><span class="line">publisher.send(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="operators"><a class="markdownIt-Anchor" href="#operators"></a> Operators</h2><h3 id="transforming-operators"><a class="markdownIt-Anchor" href="#transforming-operators"></a> Transforming Operators</h3><h4 id="collect"><a class="markdownIt-Anchor" href="#collect"></a> collect()</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162153420.png" alt="collect()" /></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>].publisher</span><br><span class="line">  .collect()</span><br><span class="line">  <span class="comment">// .collect(2)</span></span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="map_"><a class="markdownIt-Anchor" href="#map_"></a> map(_:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162154662.png" alt="map(_:)" /></p><h5 id="mapping-key-paths"><a class="markdownIt-Anchor" href="#mapping-key-paths"></a> Mapping key paths</h5><ul><li><code>map&lt;T&gt;(_:)</code></li><li><code>map&lt;T0, T1&gt;(_:_:)</code></li><li><code>map&lt;T0, T1, T2&gt;(_:_:_:)</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">publisher</span><br><span class="line">  .map(\.x, \.y)</span><br><span class="line">  .sink(receiveValue: &#123; x, y <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">      <span class="string">&quot;The coordinate at (<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) is in quadrant&quot;</span>,</span><br><span class="line">      quadrantOf(x: x, y: y)</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line"></span><br><span class="line">publisher.send(<span class="type">Coordinate</span>(x: <span class="number">10</span>, y: <span class="operator">-</span><span class="number">8</span>))</span><br><span class="line">publisher.send(<span class="type">Coordinate</span>(x: <span class="number">0</span>, y: <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h5 id="trymap_"><a class="markdownIt-Anchor" href="#trymap_"></a> tryMap(_:)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Just</span>(<span class="string">&quot;Directory name that does not exist&quot;</span>)</span><br><span class="line">  .tryMap &#123; <span class="keyword">try</span> <span class="type">FileManager</span>.default.contentsOfDirectory(atPath: <span class="variable">$0</span>) &#125;</span><br><span class="line">  .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="flatmapmaxpublishers_"><a class="markdownIt-Anchor" href="#flatmapmaxpublishers_"></a> flatMap(maxPublishers:_:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162155701.png" alt="flatMap(maxPublishers:_:)" /></p><p><code>flatMap</code> 接收三个发布者： <code>P1</code> 、 <code>P2</code> 和 <code>P3</code> 。 <code>flatMap</code> 从 <code>P1</code> 和 <code>P2</code> 发出发布者的值，但忽略 <code>P3</code> 因为 <code>maxPublishers</code> 设置为 2 。</p><h4 id="replacenilwith"><a class="markdownIt-Anchor" href="#replacenilwith"></a> replaceNil(with:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162156246.png" alt="replaceNil(with:)" /></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;A&quot;</span>, <span class="literal">nil</span>, <span class="string">&quot;C&quot;</span>].publisher</span><br><span class="line">  .eraseToAnyPublisher()</span><br><span class="line">  .replaceNil(with: <span class="string">&quot;-&quot;</span>)</span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="replaceemptywith"><a class="markdownIt-Anchor" href="#replaceemptywith"></a> replaceEmpty(with:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162156738.png" alt="replaceEmpty(with:)" /></p><h4 id="scan__"><a class="markdownIt-Anchor" href="#scan__"></a> scan(_:_:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162156933.png" alt="scan" /></p><h3 id="filtering-operators"><a class="markdownIt-Anchor" href="#filtering-operators"></a> Filtering Operators</h3><h4 id="filtering"><a class="markdownIt-Anchor" href="#filtering"></a> Filtering</h4><h5 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162157534.png" alt="filter" /></p><h5 id="removeduplicates"><a class="markdownIt-Anchor" href="#removeduplicates"></a> removeDuplicates</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162157326.png" alt="removeDuplicates" /></p><h4 id="compacting-and-ignoring"><a class="markdownIt-Anchor" href="#compacting-and-ignoring"></a> Compacting and ignoring</h4><h5 id="compactmap"><a class="markdownIt-Anchor" href="#compactmap"></a> compactMap</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162157275.png" alt="compactMap" /></p><h5 id="ignoreoutput"><a class="markdownIt-Anchor" href="#ignoreoutput"></a> ignoreOutput</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158611.png" alt="ignoreOutput" /></p><h4 id="finding-values"><a class="markdownIt-Anchor" href="#finding-values"></a> Finding values</h4><h5 id="firstwhere"><a class="markdownIt-Anchor" href="#firstwhere"></a> firstWhere</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158592.png" alt="firstWhere" /></p><h5 id="lastwhere"><a class="markdownIt-Anchor" href="#lastwhere"></a> lastWhere</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158996.png" alt="lastWhere" /></p><h4 id="dropping-values"><a class="markdownIt-Anchor" href="#dropping-values"></a> Dropping values</h4><h5 id="dropfirst"><a class="markdownIt-Anchor" href="#dropfirst"></a> dropFirst</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158483.png" alt="dropFirst" /></p><h5 id="dropwhile"><a class="markdownIt-Anchor" href="#dropwhile"></a> dropWhile</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162158242.png" alt="dropWhile" /></p><h5 id="dropuntiloutputfrom"><a class="markdownIt-Anchor" href="#dropuntiloutputfrom"></a> dropUntilOutputFrom</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159634.png" alt="dropUntilOutputFrom" /></p><h4 id="limiting-values"><a class="markdownIt-Anchor" href="#limiting-values"></a> Limiting values</h4><h5 id="prefix"><a class="markdownIt-Anchor" href="#prefix"></a> prefix</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159971.png" alt="prefix" /></p><h5 id="prefixwhile"><a class="markdownIt-Anchor" href="#prefixwhile"></a> prefixWhile</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159211.png" alt="prefixWhile" /></p><h5 id="prefixuntiloutputfrom"><a class="markdownIt-Anchor" href="#prefixuntiloutputfrom"></a> prefixUntilOutputFrom</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159149.png" alt="prefixUntilOutputFrom" /></p><h3 id="combining-operators"><a class="markdownIt-Anchor" href="#combining-operators"></a> Combining Operators</h3><h4 id="prepending"><a class="markdownIt-Anchor" href="#prepending"></a> Prepending</h4><h5 id="prependoutput"><a class="markdownIt-Anchor" href="#prependoutput"></a> prepend(Output…)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162159017.png" alt="prepend(Output…)" /></p><p>The last prepend affects the upstream first. The same below.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">.prepend(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">.prepend(<span class="operator">-</span><span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output: -1 0 1 2</span></span><br></pre></td></tr></table></figure><h5 id="prependsequence"><a class="markdownIt-Anchor" href="#prependsequence"></a> prepend(Sequence)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200197.png" alt="prepend(Sequence)" /></p><h5 id="prependpublisher"><a class="markdownIt-Anchor" href="#prependpublisher"></a> prepend(Publisher)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200927.png" alt="prepend(Publisher)" /></p><h4 id="appending"><a class="markdownIt-Anchor" href="#appending"></a> Appending</h4><h5 id="appendoutput"><a class="markdownIt-Anchor" href="#appendoutput"></a> append(Output…)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200181.png" alt="append(Output…)" /></p><h5 id="appendsequence"><a class="markdownIt-Anchor" href="#appendsequence"></a> append(Sequence)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162200285.png" alt="append(Sequence)" /></p><h5 id="appendpublisher"><a class="markdownIt-Anchor" href="#appendpublisher"></a> append(Publisher)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162203782.png" alt="append(Publisher)" /></p><h4 id="advanced-combining"><a class="markdownIt-Anchor" href="#advanced-combining"></a> Advanced combining</h4><h5 id="switchtolatest"><a class="markdownIt-Anchor" href="#switchtolatest"></a> switchToLatest</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162203240.png" alt="switchToLatest" /></p><h5 id="mergewith"><a class="markdownIt-Anchor" href="#mergewith"></a> merge(with:)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204130.png" alt="merge(with:)" /></p><h5 id="combinelatest"><a class="markdownIt-Anchor" href="#combinelatest"></a> combineLatest</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204136.png" alt="combineLatestPublisher" /></p><h5 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> zip</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204021.png" alt="zip" /></p><h3 id="time-manipulation-operators"><a class="markdownIt-Anchor" href="#time-manipulation-operators"></a> Time Manipulation Operators</h3><h4 id="shifting-time"><a class="markdownIt-Anchor" href="#shifting-time"></a> Shifting time</h4><p><code>delay(for:tolerance:scheduler:options)</code> 运算符对整个值序列进行时间偏移。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204606.png" alt="1.5s delay" /></p><h4 id="collecting-values"><a class="markdownIt-Anchor" href="#collecting-values"></a> Collecting values</h4><p><code>collect(_ strategy:options:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collectMaxCount <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> collectTimeStride <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sourcePublisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Date</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collectedPublisher <span class="operator">=</span> sourcePublisher</span><br><span class="line">  <span class="comment">// 按指定的时间间隔从发布者收集值</span></span><br><span class="line">  .collect(.byTime(<span class="type">DispatchQueue</span>.main, .seconds(collectTimeStride)))</span><br><span class="line">  .flatMap &#123; dates <span class="keyword">in</span> dates.publisher &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collectedPublisher2 <span class="operator">=</span> sourcePublisher</span><br><span class="line">  <span class="comment">// 按指定的时间间隔从发布者收集值并限制收集的值的数量</span></span><br><span class="line">  .collect(.byTimeOrCount(<span class="type">DispatchQueue</span>.main,</span><br><span class="line">                          .seconds(collectTimeStride),</span><br><span class="line">                          collectMaxCount))</span><br><span class="line">  .flatMap &#123; dates <span class="keyword">in</span> dates.publisher &#125;</span><br></pre></td></tr></table></figure><h4 id="holding-off-on-events"><a class="markdownIt-Anchor" href="#holding-off-on-events"></a> Holding off on events</h4><h5 id="debounce"><a class="markdownIt-Anchor" href="#debounce"></a> Debounce</h5><p><code>.debounce(for:scheduler:options:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounced <span class="operator">=</span> subject</span><br><span class="line">  <span class="comment">// 每秒最多允许发送一个值，发送该一秒间隔内发送的最后一个值（如果有）</span></span><br><span class="line">  .debounce(for: .seconds(<span class="number">1.0</span>), scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">  .share()</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note:</strong> One thing to watch out for is the publisher’s completion. If your publisher completes right after the last value was emitted, but before the time configured for <code>debounce</code> elapses, you will never see the last value in the debounced publisher!</p></blockquote><h5 id="throttle"><a class="markdownIt-Anchor" href="#throttle"></a> Throttle</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> throttleDelay <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> throttled <span class="operator">=</span> subject</span><br><span class="line">  .throttle(for: .seconds(throttleDelay), scheduler: <span class="type">DispatchQueue</span>.main, latest: <span class="literal">false</span>)</span><br><span class="line">  .share()</span><br></pre></td></tr></table></figure><p>和 <code>debounce</code> 的区别是：</p><ul><li><code>debounce</code> 等待接收到的值暂停，然后在指定的时间间隔后发出最新的值。</li><li><code>throttle</code> 等待指定的时间间隔，然后发出在该时间间隔内收到的第一个或最新的值。它不关心暂停。</li></ul><h5 id="timing-out"><a class="markdownIt-Anchor" href="#timing-out"></a> Timing out</h5><p><code>timeout(_:scheduler:options:customError:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> timedOutSubject <span class="operator">=</span> subject.timeout(.seconds(<span class="number">5</span>), scheduler: <span class="type">DispatchQueue</span>.main)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TimeoutError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> timedOut</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">TimeoutError</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> timedOutSubject <span class="operator">=</span> subject.timeout(.seconds(<span class="number">5</span>),</span><br><span class="line">                                      scheduler: <span class="type">DispatchQueue</span>.main,</span><br><span class="line">                                      customError: &#123; .timedOut &#125;)</span><br></pre></td></tr></table></figure><h4 id="measuring-time"><a class="markdownIt-Anchor" href="#measuring-time"></a> Measuring time</h4><p><code>measureInterval(using:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="comment">// 在 `DispatchQueue` 的情况下， `TimeInterval` 被定义为“使用该类型的值（以纳秒为单位）创建的 `DispatchTimeInterval` ”</span></span><br><span class="line"><span class="keyword">let</span> measureSubject <span class="operator">=</span> subject.measureInterval(using: <span class="type">DispatchQueue</span>.main)</span><br><span class="line"><span class="comment">// 在 `RunLoop` 调度程序的输出，其大小直接以秒表示</span></span><br><span class="line"><span class="keyword">let</span> measureSubject2 <span class="operator">=</span> subject.measureInterval(using: <span class="type">RunLoop</span>.main)</span><br></pre></td></tr></table></figure><h3 id="sequence-operators"><a class="markdownIt-Anchor" href="#sequence-operators"></a> Sequence Operators</h3><h4 id="finding-values-2"><a class="markdownIt-Anchor" href="#finding-values-2"></a> Finding values</h4><h5 id="min"><a class="markdownIt-Anchor" href="#min"></a> min</h5><p><code>min</code> 运算符可让你找到发布者发出的最小值。它是贪婪的，这意味着它必须等待发布者发送 <code>.finished</code> 完成事件。发布者完成后，运算符仅发出最小值。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162204243.png" alt="min" /></p><h5 id="max"><a class="markdownIt-Anchor" href="#max"></a> max</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205987.png" alt="max" /></p><h5 id="first"><a class="markdownIt-Anchor" href="#first"></a> first</h5><p>不会等待上游发布者完成，而是在收到第一个发出的值时取消订阅。<br />还可以使用 <code>first(where:)</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205218.png" alt="first" /></p><h5 id="last"><a class="markdownIt-Anchor" href="#last"></a> last</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205815.png" alt="last" /></p><h5 id="outputat"><a class="markdownIt-Anchor" href="#outputat"></a> output(at:)</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162205008.png" alt="output(at:)" /></p><h5 id="outputin"><a class="markdownIt-Anchor" href="#outputin"></a> output(in:)</h5><p>该运算符发出索引范围内的各个值，而不是它们的集合。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206858.png" alt="output(in:)" /></p><h4 id="querying-the-publisher"><a class="markdownIt-Anchor" href="#querying-the-publisher"></a> Querying the publisher</h4><h5 id="count"><a class="markdownIt-Anchor" href="#count"></a> count</h5><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206769.png" alt="count" /></p><h5 id="contains"><a class="markdownIt-Anchor" href="#contains"></a> contains</h5><p>如果上游发布者发出指定的值，则 <code>contains</code> 运算符将发出 <code>true</code> 并取消订阅。<br />还可以使用 <code>contains(where:)</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206766.png" alt="contains" /></p><h5 id="allsatisfy"><a class="markdownIt-Anchor" href="#allsatisfy"></a> allSatisfy</h5><p>一旦不满足条件，<code>allSatisfy</code> 发出 <code>false</code> 就立即取消订阅。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206780.png" alt="allSatisfy" /></p><h5 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> reduce</h5><p><code>scan</code> 和 <code>reduce</code> 具有相同的功能，主要区别在于 <code>scan</code> 为每个发出的值发出累积值，而 <code>reduce</code> 一旦上游发布者发送 <code>.finished</code> 完成事件，就会发出单个累积值。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162206410.png" alt="reduce" /></p><h2 id="action"><a class="markdownIt-Anchor" href="#action"></a> Action</h2><h3 id="debugging"><a class="markdownIt-Anchor" href="#debugging"></a> Debugging</h3><h4 id="printing-events"><a class="markdownIt-Anchor" href="#printing-events"></a> Printing events</h4><p><code>print(:to:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">3</span>).publisher</span><br><span class="line">  .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">  .sink &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="acting-on-events-performing-side-effects"><a class="markdownIt-Anchor" href="#acting-on-events-performing-side-effects"></a> Acting on events — performing side effects</h4><p>除了打印信息之外，对特定事件执行操作通常也很有用。我们称之为<strong>执行副作用</strong>，因为您“在侧面”采取的操作不会直接影响下游的其他发布者，但可能会产生类似于修改外部变量的效果。</p><p><code>handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)</code></p><h4 id="using-the-debugger-as-a-last-resort"><a class="markdownIt-Anchor" href="#using-the-debugger-as-a-last-resort"></a> Using the debugger as a last resort</h4><p><code>breakpointOnError()</code><br /><code>breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.breakpoint(receiveOutput: &#123; value <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> value <span class="operator">&gt;</span> <span class="number">10</span> <span class="operator">&amp;&amp;</span> value <span class="operator">&lt;</span> <span class="number">15</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="timers"><a class="markdownIt-Anchor" href="#timers"></a> Timers</h3><h4 id="using-runloop"><a class="markdownIt-Anchor" href="#using-runloop"></a> Using RunLoop</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> runLoop <span class="operator">=</span> <span class="type">RunLoop</span>.main</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> runLoop.schedule(</span><br><span class="line">  after: runLoop.now,</span><br><span class="line">  interval: .seconds(<span class="number">1</span>),</span><br><span class="line">  tolerance: .milliseconds(<span class="number">100</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Timer fired&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runLoop.schedule(after: .<span class="keyword">init</span>(<span class="type">Date</span>(timeIntervalSinceNow: <span class="number">3.0</span>))) &#123;</span><br><span class="line">  subscription.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="using-the-timer-class"><a class="markdownIt-Anchor" href="#using-the-timer-class"></a> Using the Timer class</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> <span class="type">Timer</span></span><br><span class="line">  .publish(every: <span class="number">1.0</span>, on: .main, in: .common)</span><br><span class="line">  .autoconnect()</span><br><span class="line">  .scan(<span class="number">0</span>) &#123; counter, <span class="keyword">_</span> <span class="keyword">in</span> counter <span class="operator">+</span> <span class="number">1</span> &#125;</span><br><span class="line">  .sink &#123; counter <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Counter is <span class="subst">\(counter)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="using-dispatchqueue"><a class="markdownIt-Anchor" href="#using-dispatchqueue"></a> Using DispatchQueue</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>.main</span><br><span class="line"><span class="keyword">let</span> source <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> counter <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> queue.schedule(</span><br><span class="line">  after: queue.now,</span><br><span class="line">  interval: .seconds(<span class="number">1</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  source.send(counter)</span><br><span class="line">  counter <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> source.sink &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Timer emitted <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="key-value-observing"><a class="markdownIt-Anchor" href="#key-value-observing"></a> Key-Value Observing</h3><h4 id="publisherforoptions"><a class="markdownIt-Anchor" href="#publisherforoptions"></a> publisher(for:options:)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">OperationQueue</span>()</span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> queue.publisher(for: \.operationCount)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Outstanding operations in queue: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestObject</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> integerProperty: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> stringProperty: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> arrayProperty: [<span class="type">Float</span>] <span class="operator">=</span> []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">TestObject</span>()</span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> obj.publisher(for: \.integerProperty)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;integerProperty changes to <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> obj.publisher(for: \.stringProperty)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stringProperty changes to <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">let</span> subscription3 <span class="operator">=</span> obj.publisher(for: \.arrayProperty)</span><br><span class="line">  .sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arrayProperty changes to <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">obj.integerProperty <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">obj.integerProperty <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">obj.stringProperty <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">obj.arrayProperty <span class="operator">=</span> [<span class="number">1.0</span>]</span><br><span class="line">obj.stringProperty <span class="operator">=</span> <span class="string">&quot;World&quot;</span></span><br><span class="line">obj.arrayProperty <span class="operator">=</span> [<span class="number">1.0</span>, <span class="number">2.0</span>]</span><br></pre></td></tr></table></figure><h4 id="observation-options"><a class="markdownIt-Anchor" href="#observation-options"></a> Observation options</h4><p><code>options</code> 参数是一个具有四个值的选项集： <code>.initial</code> 、 <code>.prior</code> 、 <code>.old</code> 和 <code>.new</code> 。默认值为 <code>[.initial] </code>。</p><h3 id="resource-management"><a class="markdownIt-Anchor" href="#resource-management"></a> Resource Management</h3><h4 id="the-share-operator"><a class="markdownIt-Anchor" href="#the-share-operator"></a> The share() operator</h4><p><code>share()</code> 运算符的目的是让你通过引用而不是通过值获取发布者。<br /><code>share()</code> 运算符返回 <code>Publishers.Share</code> 类的实例。这个新发布者“共享”上游发布者。</p><p>例如，你正在执行一个网络请求，希望多个订阅者接收结果而不需要多次请求。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">URLSession</span>.shared</span><br><span class="line">  .dataTaskPublisher(for: <span class="type">URL</span>(string: <span class="string">&quot;https://www.kodeco.com&quot;</span>)<span class="operator">!</span>)</span><br><span class="line">  .map(\.data)</span><br><span class="line">  .print(<span class="string">&quot;shared&quot;</span>)</span><br><span class="line">  .share()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;subscribing first&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> shared.sink(</span><br><span class="line">  receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">  receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription1 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;subscribing second&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> shared.sink(</span><br><span class="line">  receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">  receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription2 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="the-multicast_-operator"><a class="markdownIt-Anchor" href="#the-multicast_-operator"></a> The multicast(_:) operator</h4><p><code>multicast(_:)</code> 的独特特征是它返回的发布者是 <code>ConnectablePublisher</code> 。这意味着在调用其 <code>connect()</code> 方法之前，它不会订阅上游发布者。这使你有足够的时间来设置所需的所有订阅者，然后再让它连接到上游发布者并开始工作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Data</span>, <span class="type">URLError</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> multicasted <span class="operator">=</span> <span class="type">URLSession</span>.shared</span><br><span class="line">  .dataTaskPublisher(for: <span class="type">URL</span>(string: <span class="string">&quot;https://www.raywenderlich.com&quot;</span>)<span class="operator">!</span>)</span><br><span class="line">  .map(\.data)</span><br><span class="line">  .print(<span class="string">&quot;multicast&quot;</span>)</span><br><span class="line">  .multicast(subject: subject)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> multicasted</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription1 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> multicasted</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription2 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> multicasted.connect()</span><br></pre></td></tr></table></figure><h4 id="future-2"><a class="markdownIt-Anchor" href="#future-2"></a> Future</h4><p><code>Future</code> 是一个类，而不是一个结构。创建后，立即执行，存储已完成的 <code>Promise</code> 的结果并将其传递给当前和未来的订阅者。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">performSomeWork</span>() <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Performing some work and returning a result&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> future <span class="operator">=</span> <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Error</span>&gt; &#123; fulfill <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> performSomeWork()</span><br><span class="line">    fulfill(.success(result))</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    fulfill(.failure(error))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Subscribing to future...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> future</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;subscription1 completed&quot;</span>) &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription1 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> future</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;subscription2 completed&quot;</span>) &#125;,</span><br><span class="line">    receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;subscription2 received: &#x27;<span class="subst">\(<span class="variable">$0</span>)</span>&#x27;&quot;</span>) &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="advanced-combine"><a class="markdownIt-Anchor" href="#advanced-combine"></a> Advanced Combine</h2><h3 id="error-handling"><a class="markdownIt-Anchor" href="#error-handling"></a> Error Handling</h3><h4 id="never"><a class="markdownIt-Anchor" href="#never"></a> Never</h4><p><code>Failure</code> 类型为 <code>Never</code> 的发布者表明该发布者永远不会失败。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162207260.png" alt="Never" /></p><p><code>Just</code> 始终声明 <code>Failure</code> 为 <code>Never</code> 。</p><h4 id="setfailuretype"><a class="markdownIt-Anchor" href="#setfailuretype"></a> setFailureType</h4><p>将绝对正确的发布者转变为会发出错误的发布者的第一种方法是使用 <code>setFailureType</code> 。这是另一个仅适用于失败类型为 <code>Never</code> 的发布者的运算符。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MyError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ohNo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Just</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  .setFailureType(to: <span class="type">MyError</span>.<span class="keyword">self</span>)</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; completion <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">switch</span> completion &#123;</span><br><span class="line">      <span class="keyword">case</span> .failure(.ohNo):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Finished with Oh No!&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> .finished:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Finished successfully!&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveValue: &#123; value <span class="keyword">in</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Got value: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="assigntoon"><a class="markdownIt-Anchor" href="#assigntoon"></a> assign(to:on:)</h4><p><code>assign</code> 运算符仅适用于不会失败的发布者，与 <code>setFailureType</code> 相同。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">  <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>, person.name)</span><br><span class="line"></span><br><span class="line"><span class="type">Just</span>(<span class="string">&quot;Shai&quot;</span>)</span><br><span class="line">  .handleEvents(</span><br><span class="line">    receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>, person.name) &#125;</span><br><span class="line">  )</span><br><span class="line">  .assign(to: \.name, on: person)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="assignto"><a class="markdownIt-Anchor" href="#assignto"></a> assign(to:)</h4><p><code>assign(to:on:)</code> 会强引用 <code>on</code> 参数的对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="type">Timer</span>.publish(every: <span class="number">1</span>, on: .main, in: .common)</span><br><span class="line">      .autoconnect()</span><br><span class="line">      .prefix(<span class="number">3</span>)</span><br><span class="line">      .assign(to: <span class="operator">&amp;</span><span class="variable">$currentDate</span>)</span><br><span class="line">    <span class="comment">// 下面两行会造成循环引用</span></span><br><span class="line">    <span class="comment">// .assign(to: \.currentDate, on: self)</span></span><br><span class="line">    <span class="comment">// .store(in: &amp;subscriptions)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm <span class="operator">=</span> <span class="type">MyViewModel</span>()</span><br><span class="line">vm.<span class="variable">$currentDate</span></span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="assertnofailure"><a class="markdownIt-Anchor" href="#assertnofailure"></a> assertNoFailure</h4><p>在开发过程中，为确认发布者无法以失败事件完成时，<code>assertNoFailure</code> 运算符非常有用。它不会阻止上游发出故障事件。但是，如果检测到错误，它会崩溃并显示 <code>fatalError</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MyError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ohNo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Just</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  .setFailureType(to: <span class="type">MyError</span>.<span class="keyword">self</span>)</span><br><span class="line">  .tryMap &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="keyword">throw</span> <span class="type">MyError</span>.ohNo &#125;</span><br><span class="line">  .assertNoFailure()</span><br><span class="line">  .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Got value: <span class="subst">\(<span class="variable">$0</span>)</span> &quot;</span>) &#125;)</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h4 id="catching-and-retrying"><a class="markdownIt-Anchor" href="#catching-and-retrying"></a> Catching and retrying</h4><p><code>retry</code> 运算符接受一个数字。如果发布者失败，它将重新订阅上游并重试最多您指定的次数。如果所有重试都失败，它只会将错误推送到下游。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> photoService <span class="operator">=</span> <span class="type">PhotoService</span>()</span><br><span class="line"></span><br><span class="line">photoService</span><br><span class="line">  .fetchPhoto(quality: .high, failingTimes: <span class="number">2</span>)</span><br><span class="line">  .handleEvents(</span><br><span class="line">    receiveSubscription: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Trying ...&quot;</span>) &#125;,</span><br><span class="line">    receiveCompletion: &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">case</span> .failure(<span class="keyword">let</span> error) <span class="operator">=</span> <span class="variable">$0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Got error: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="operator">+</span> .retry(<span class="number">3</span>)</span><br><span class="line"><span class="operator">+</span> .catch &#123; <span class="keyword">_</span> -&gt; <span class="type">PhotoService</span>.<span class="type">Publisher</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed fetching high quality, falling back to low quality&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> photoService.fetchPhoto(quality: .low)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="operator">+</span> .replaceError(with: <span class="type">UIImage</span>(named: <span class="string">&quot;na.jpg&quot;</span>)<span class="operator">!</span>)</span><br><span class="line">  .sink(</span><br><span class="line">    receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">    receiveValue: &#123; image <span class="keyword">in</span></span><br><span class="line">      image</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Got image: <span class="subst">\(image)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure><h3 id="schedulers"><a class="markdownIt-Anchor" href="#schedulers"></a> Schedulers</h3><p>Combine 框架提供了两个与调度程序一起使用的基本运算符：</p><ul><li><code>subscribe(on:)</code> 和 <code>subscribe(on:options:)</code> 在指定的调度程序上创建订阅（开始工作）。</li><li><code>receive(on:)</code> 和 <code>receive(on:options:)</code> 在指定的调度程序上传递值。</li></ul><p>此外，以下运算符将调度程序和调度程序选项作为参数。</p><ul><li><code>debounce(for:scheduler:options:)</code></li><li><code>delay(for:tolerance:scheduler:options:)</code></li><li><code>measureInterval(using:options:)</code></li><li><code>throttle(for:scheduler:latest:)</code></li><li><code>timeout(_:scheduler:options:customError:)</code></li></ul><h4 id="subscribeon-和-receiveon"><a class="markdownIt-Anchor" href="#subscribeon-和-receiveon"></a> subscribe(on:) 和 receive(on:)</h4><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/Combine/202406162208298.png" alt="subscribe(on:) 和 receive(on:)" /></p><ol><li><code>Publisher</code> 接收订阅者并创建一个 <code>Subscription</code></li><li><code>Subscriber</code> 接收订阅并请求来自发布者的值（虚线）</li><li><code>Publisher</code> 开始工作（通过 <code>Subscription</code> ）</li><li><code>Publisher</code> 发出值（通过 <code>Subscription</code> ）</li><li>运算符转换值</li><li><code>Subscriber</code> 接收最终值</li></ol><p>步骤一、二和三通常发生在代码订阅发布者时当前的线程上。但是当您使用 <code>subscribe(on:)</code> 运算符时，所有这些操作都在您指定的调度程序上运行。例如，发布者在后台执行一些昂贵的计算时，以避免阻塞主线程，执行此操作的简单方法是使用 <code>subscribe(on:)</code>。</p><p><code>receive(on:)</code> 允许你指定应使用哪个调度程序来向订阅者传递值。例如在主线程接收值以更新 UI。</p><h4 id="scheduler-implementations"><a class="markdownIt-Anchor" href="#scheduler-implementations"></a> Scheduler implementations</h4><ul><li><code>ImmediateScheduler</code>：立即在当前线程上执行代码，这是默认的执行上下文</li><li><code>RunLoop</code>：绑定到 <code>Foundation</code> 的 <code>Thread</code> 对象</li><li><code>DispatchQueue</code>：可以是串行的也可以是并发的</li><li><code>OperationQueue</code>：调节工作项执行的队列</li><li><code>TestScheduler</code>：一个虚拟的、模拟的调度程序，用于测试</li></ul><h5 id="runloopmain-vs-dispatchqueuemain"><a class="markdownIt-Anchor" href="#runloopmain-vs-dispatchqueuemain"></a> RunLoop.main vs DispatchQueue.main</h5><blockquote><p>RunLoop 是管理输入源（例如应用程序的触摸）的对象的编程接口。 RunLoop 由系统创建和管理，系统还负责为每个线程对象创建一个 RunLoop 对象。系统还负责创建代表主线程的主运行循环。</p><p><code>DispatchQueue.main</code> 是与当前进程的主线程关联的调度队列。系统负责生成代表主线程的队列。调度队列在其关联的线程上串行或并发地执行任务。</p><p><code>RunLoop.main</code> 和 <code>DispatchQueue.main</code> 都在主线程上执行其代码，这意味着您可以使用两者来更新用户界面。</p><p><code>RunLoop.main</code> 和 <code>DispatchQueue.main</code> 之间最显着的区别是后者即使在 RunLoop 繁忙时也能直接执行。例如，在使用 <code>DispatchQueue.main</code> 作为调度程序时，下载的图像即使在滚动时也会立即显示，而使用 <code>RunLoop.main</code> 时图像仅在滚动后显示。换句话说：只要发生用户交互，主运行循环上计划的闭包的执行就会被延迟执行。</p></blockquote><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://developer.apple.com/documentation/combine">Combine</a></li><li><a href="https://www.kodeco.com/books/combine-asynchronous-programming-with-swift/v1.0/">Combine: Asynchronous Programming with Swift</a></li><li><a href="https://www.avanderlee.com/combine/runloop-main-vs-dispatchqueue-main/">RunLoop.main vs DispatchQueue.main: The differences explained</a></li></ul>]]></content>
    
    
    <summary type="html">Combine 是一个声明式、响应式框架，用于随着时间的推移处理异步事件。支持 iOS 13、macOS 10.15、watchOS 6 及之后的系统。这里是我学习 Combine 时的笔记，只是列出要点，没有详细的解释，权当备忘清单。</summary>
    
    
    
    
    <category term="Combine" scheme="http://kiligwyu.com/tags/Combine/"/>
    
  </entry>
  
  <entry>
    <title>Git 备忘清单</title>
    <link href="http://kiligwyu.com/git/"/>
    <id>http://kiligwyu.com/git/</id>
    <published>2024-06-07T10:30:01.000Z</published>
    <updated>2024-07-09T06:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E9%85%8D%E7%BD%AE">配置</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE">查看配置</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E6%9D%A5%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE">使用文本编辑器来编辑配置</a></li><li><a href="#%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1">用户名和邮箱</a></li><li><a href="#%E9%BB%98%E8%AE%A4%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF--%E6%A8%A1%E6%9D%BF">默认提交信息 / 模板</a></li><li><a href="#%E5%88%AB%E5%90%8D">别名</a></li><li><a href="#%E4%BB%A3%E7%90%86">代理</a><ul><li><a href="#%E9%85%8D%E7%BD%AE-git-%E4%BB%A3%E7%90%86">配置 Git 代理</a></li><li><a href="#%E9%85%8D%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86">配置 SSH 代理</a></li></ul></li><li><a href="#%E5%88%A0%E9%99%A4%E9%85%8D%E7%BD%AE">删除配置</a></li></ul></li><li><a href="#%E4%BB%93%E5%BA%93">仓库</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%85%8B%E9%9A%86">创建与克隆</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6">忽略文件</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">远程仓库</a></li><li><a href="#%E5%90%8C%E6%AD%A5">同步</a></li><li><a href="#%E8%A7%82%E5%AF%9F%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93">观察你的仓库</a></li></ul></li><li><a href="#%E5%88%86%E6%94%AF">分支</a></li><li><a href="#%E6%8F%90%E4%BA%A4">提交</a><ul><li><a href="#%E5%81%9A%E5%87%BA%E6%94%B9%E5%8F%98">做出改变</a></li><li><a href="#%E4%B8%B4%E6%97%B6%E6%8F%90%E4%BA%A4">临时提交</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">提交到远程仓库</a></li></ul></li><li><a href="#%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">其他常用操作</a><ul><li><a href="#rebasemergeresetrevert">rebase、merge、reset、revert</a><ul><li><a href="#git-rebase">git rebase</a></li><li><a href="#git-merge">git merge</a></li><li><a href="#git-reset">git reset</a></li><li><a href="#git-revert">git revert</a></li></ul></li><li><a href="#%E6%94%BE%E5%BC%83%E6%9B%B4%E6%94%B9">放弃更改</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF">重命名分支</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B-commit-%E8%AE%B0%E5%BD%95">修改远程 Commit 记录</a></li><li><a href="#worktree">Worktree</a></li><li><a href="#fork-%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5%E4%B8%8A%E6%B8%B8%E4%BB%93%E5%BA%93">Fork 仓库同步上游仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E6%AC%A1%E6%95%B0%E7%BB%9F%E8%AE%A1">提交次数统计</a></li><li><a href="#%E4%BB%93%E5%BA%93%E5%A4%A7%E5%B0%8F">仓库大小</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li><li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 .gitignore 文件中记录的文件</a></li><li><a href="#%E5%AD%A4%E7%AB%8B%E5%88%86%E6%94%AF">孤立分支</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%9C%80%E5%90%8E%E7%9A%84%E6%8F%90%E4%BA%A4">修改最后的提交</a></li></ul></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><p>在的代码管理版本控制工具几乎都是 Git 了，虽然有很多好看好用的 GUI 客户端（推荐 <a href="https://fork.dev">Fork</a>），但常用的命令还是得要了然于心，这里只是列出常用的 Git 命令行指令，以供速查参考。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>本地全局配置文件的路径（macOS）为：<code>~/.gitconfig</code>，本地仓库的配置路径为：<code>[仓库路径]/.git/config</code>。</p><h3 id="查看配置"><a class="markdownIt-Anchor" href="#查看配置"></a> 查看配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示全局 / 仓库配置，在仓库目录下执行该命令则显示当前仓库的配置，在非仓库目录下则显示为全局配置。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config -l` <span class="comment"># -l, --list</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看单项配置 e.g. <span class="string">&#x27;$ git config --get user.name&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --get &lt;key&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用文本编辑器来编辑配置"><a class="markdownIt-Anchor" href="#使用文本编辑器来编辑配置"></a> 使用文本编辑器来编辑配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认的文本编辑器，默认使用 `vim`</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor &lt;editor&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Visual Studio Code</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 CotEditor</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;cot -w&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Sublime Text</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;subl -w&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Xcode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&#x27;xed -w&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Zed</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&#x27;zed -w&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文本编辑器中编辑配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global -e <span class="comment"># -e, --edit</span></span></span><br></pre></td></tr></table></figure><h3 id="用户名和邮箱"><a class="markdownIt-Anchor" href="#用户名和邮箱"></a> 用户名和邮箱</h3><p>添加 <code>--global</code> 参数，则为全局设置；不加则为当前仓库设置，需要在当前仓库目录下执行该命令。（下同）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局设置用户名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局设置邮箱</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email &lt;email&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认提交信息-模板"><a class="markdownIt-Anchor" href="#默认提交信息-模板"></a> 默认提交信息 / 模板</h3><p><code>$ git config --global commit.template &lt;template-file-path&gt;</code></p><p>在提交时，编辑器中就会显示模板文件中的信息，这里推荐 <a href="https://open.leancloud.cn/git-commit-message/">Git Commit 日志风格指南</a> 中的模板。</p><h3 id="别名"><a class="markdownIt-Anchor" href="#别名"></a> 别名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.co checkout</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.br branch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.cm commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global alias.st status</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 配置好后，再输入 git 命令的时候就可以用别名来简化输入了，例如我们要查看状态，只需：&#x27;$ git st&#x27;</span></span></span><br></pre></td></tr></table></figure><p>几个特别实用的别名（via <a href="https://x.com/vikingmute/status/1809039941915324622">@vikingmute</a>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除最近一个提交，保留文件修改</span></span><br><span class="line">$ git config --global alias.undo <span class="string">&quot;reset --soft HEAD^&quot;</span></span><br><span class="line"><span class="comment"># 删除最近一个提交，不保留文件修改</span></span><br><span class="line">$ git config --global alias.cancel <span class="string">&quot;reset --hard HEAD^&quot;</span></span><br><span class="line"><span class="comment"># 提交完了，发现还需要一点小修改，不想新建一个提交</span></span><br><span class="line">$ git config --global alias.onemore <span class="string">&quot;commit -a --amend --no-edit&quot;</span></span><br></pre></td></tr></table></figure><h3 id="代理"><a class="markdownIt-Anchor" href="#代理"></a> 代理</h3><p>由于众所周知的原因，国内访问 GitHub 都巨慢，配置代理可以加快访问速度。</p><h4 id="配置-git-代理"><a class="markdownIt-Anchor" href="#配置-git-代理"></a> 配置 Git 代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global socks.proxy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置代理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy http://127.0.0.1:8888</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy http://127.0.0.1:8888</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global socks.proxy 127.0.0.1:8889</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> http.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> https.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> socks.proxy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只对 github.com 设置代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.https://github.com.proxy socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消 github.com 代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> https.https://github.com.proxy</span></span><br></pre></td></tr></table></figure><h4 id="配置-ssh-代理"><a class="markdownIt-Anchor" href="#配置-ssh-代理"></a> 配置 SSH 代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 ~/.ssh/config 文件</span></span><br><span class="line">Host github.com</span><br><span class="line">  ProxyCommand nc -X 5 -x 127.0.0.1:8889 %h %p</span><br></pre></td></tr></table></figure><h3 id="删除配置"><a class="markdownIt-Anchor" href="#删除配置"></a> 删除配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> &lt;key&gt;</span></span><br></pre></td></tr></table></figure><h2 id="仓库"><a class="markdownIt-Anchor" href="#仓库"></a> 仓库</h2><h3 id="创建与克隆"><a class="markdownIt-Anchor" href="#创建与克隆"></a> 创建与克隆</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的本地仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init &lt;repo-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浅克隆</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> --depth 1 &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将仓库克隆到指定目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;git-url&gt; &lt;path&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将仓库克隆到指定目录，并指定分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;git-url&gt; -b &lt;branch-name&gt; &lt;path&gt; <span class="comment"># -b, --branch</span></span></span><br></pre></td></tr></table></figure><h3 id="忽略文件"><a class="markdownIt-Anchor" href="#忽略文件"></a> 忽略文件</h3><p>文件 <code>.gitignore</code> 指定了 Git 应该忽略的未跟踪的文件，这里推荐 <a href="https://github.com/github/gitignore">github/gitignore</a> 模板。</p><table><thead><tr><th style="text-align:center">符号</th><th>规则</th></tr></thead><tbody><tr><td style="text-align:center">行首 <code>#</code></td><td>全行注释，不支持行尾类注释 (转义 <code>\#</code>)</td></tr><tr><td style="text-align:center">行首 <code>!</code></td><td>否定模式 (转义 <code>\!</code>)</td></tr><tr><td style="text-align:center"><code>**</code></td><td>匹配任意路径</td></tr><tr><td style="text-align:center"><code>*</code></td><td>匹配任意多个字符</td></tr><tr><td style="text-align:center"><code>?</code></td><td>匹配任意一个字符</td></tr><tr><td style="text-align:center"><code>doc/**</code></td><td>匹配 doc 文件夹下的全部内容</td></tr><tr><td style="text-align:center"><code>doc/**/a</code></td><td>匹配任意深度路径下的 a 文件或文件夹</td></tr><tr><td style="text-align:center"><code>/</code></td><td>表示路径分隔符，不区分操作系统</td></tr><tr><td style="text-align:center"><code>/</code> 结尾</td><td>仅会匹配文件夹，否则会匹配文件和文件夹</td></tr><tr><td style="text-align:center">空行</td><td>不匹配任何文件</td></tr><tr><td style="text-align:center">行尾空格</td><td>默认被忽略，可使用 <code>\ </code> 进行转义</td></tr><tr><td style="text-align:center">行首空格</td><td>被正常处理，不会被忽略</td></tr></tbody></table><p>当前 <code>.gitignore</code> 文件定义规则的优先级高于上级路径 <code>.gitignore</code> 定义规则的优先级；后定义的规则优先级高于前面定义规则的优先级。</p><h3 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向本地仓库添加一个新的远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add &lt;name&gt; &lt;url&gt; <span class="comment"># &lt;name&gt; 远程仓库的名称，通常是 origin</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示您设置的远程存储库的名称</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示远程存储库的名称和 URL</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v <span class="comment"># -v, --verbose</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程存储库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote <span class="built_in">rm</span> &lt;name&gt; <span class="comment"># remove, rm</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改 git repo 的 URL</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote set-url origin &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程分支和本地分支的对应关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote show origin</span></span><br></pre></td></tr></table></figure><h3 id="同步"><a class="markdownIt-Anchor" href="#同步"></a> 同步</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取远程仓库所有分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程分支合并到当前分支以使其保持最新状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge &lt;name&gt;/&lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有快进</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --no-ff [<span class="built_in">alias</span>]/[branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅快进</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --ff-only [<span class="built_in">alias</span>]/[branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地分支提交传输到远程存储库分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;name&gt; &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从跟踪远程分支获取并合并任何提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将另一个分支的一个特定提交合并到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;hash-id&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">抛弃本地所有的修改，回到远程仓库的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch --all &amp;&amp; git reset --hard origin/main</span></span><br></pre></td></tr></table></figure><h3 id="观察你的仓库"><a class="markdownIt-Anchor" href="#观察你的仓库"></a> 观察你的仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前活动分支的提交历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示 branchA 上不在 branchB 上的提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> branchB..branchA</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示更改文件的提交，即使跨重命名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示 branchA 中的内容与 branchB 中的内容的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff branchB...branchA</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以人类可读的格式显示 Git 中的任何对象</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show &lt;SHA&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分支"><a class="markdownIt-Anchor" href="#分支"></a> 分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r <span class="comment"># -r, --remotes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有分支，本地和远程</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -av <span class="comment"># -a, --all; -v, -vv, --verbose</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快速切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 my-branch，并更新工作目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;my-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并切换到新分支 new_branch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;new-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从远程分支中创建并切换到本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将分支 branch_a 合并到分支 branch_b</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;branch-b&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge &lt;branch-a&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除名为 my-branch 的分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d &lt;my-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标记当前提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h2><h3 id="做出改变"><a class="markdownIt-Anchor" href="#做出改变"></a> 做出改变</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在工作目录中显示修改后的文件，为您的下一次提交暂存</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂存文件，准备提交</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂存所有更改的文件，准备提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所有暂存文件提交到版本化历史记录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;commit message&quot;</span> <span class="comment"># -m &lt;msg&gt;, --message=&lt;msg&gt;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所有跟踪的文件提交到版本化历史记录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，-a 选项不会暂存未跟踪的新文件（即那些没有被 Git 跟踪过的文件）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -am <span class="string">&quot;commit message&quot;</span> <span class="comment"># -a, --all</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消暂存文件，保留文件更改</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将所有内容恢复到最后一次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原所有修改，不会删除新增的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除新增的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -xdf <span class="comment"># -f, --force</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已更改但未暂存内容的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已 commited 但尚未提交的内容的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --staged</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在指定分支之前应用当前分支的任何提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 A 分支的某一个 commit，放到 B 分支上</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 B 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;B&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 A 分支 &lt;hash-id&gt; 的内容 pick 到 B 分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;hash-id&gt;</span></span><br></pre></td></tr></table></figure><h3 id="临时提交"><a class="markdownIt-Anchor" href="#临时提交"></a> 临时提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存已修改和分阶段的更改</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出隐藏文件更改的堆栈顺序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从存储堆栈顶部编写工作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash pop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">丢弃存储堆栈顶部的更改</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash drop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到某个 stash 的状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash apply &lt;stash@&#123;n&#125;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有的 stash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash clear</span></span><br></pre></td></tr></table></figure><h3 id="提交到远程仓库"><a class="markdownIt-Anchor" href="#提交到远程仓库"></a> 提交到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送当前分支到默认远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送指定分支到远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin &lt;feature-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送标签到远程</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin &lt;tagname&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送所有标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --tags</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销一条远程记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD~1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送到远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f origin HEAD:main</span></span><br></pre></td></tr></table></figure><h2 id="其他常用操作"><a class="markdownIt-Anchor" href="#其他常用操作"></a> 其他常用操作</h2><h3 id="rebase-merge-reset-revert"><a class="markdownIt-Anchor" href="#rebase-merge-reset-revert"></a> rebase、merge、reset、revert</h3><h4 id="git-rebase"><a class="markdownIt-Anchor" href="#git-rebase"></a> git rebase</h4><p><code>git rebase</code> 将一个分支上的更改应用到另一个分支的基础之上。它可以保持提交历史的整洁和线性，而不像<code> git merge</code> 那样生成一个额外的合并提交记录。</p><p>示例：</p><ol><li><p>更新 <code>feature</code> 分支到主分支的最新状态。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 切换到 feature 分支：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout feature-branch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 更新主分支：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin main</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 返回到 feature 分支并执行 rebase：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout feature-branch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase main</span></span><br></pre></td></tr></table></figure></li><li><p>处理冲突</p><p>在 <code>rebase</code> 过程中，如果存在冲突，Git 会暂停并提示你解决冲突。解决冲突后，使用以下命令继续 <code>rebase</code>：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;conflicted-files&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><p>如果要中止 <code>rebase</code> 操作，可以使用：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase --abort</span></span><br></pre></td></tr></table></figure></li><li><p>推送变基后的更改</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --force origin feature-branch</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="git-merge"><a class="markdownIt-Anchor" href="#git-merge"></a> git merge</h4><p><code>git merge</code> 用于将两个或多个分支的开发历史合并在一起的命令。与 <code>git rebase</code> 不同的是，<code>merge</code> 保留了整个分支的历史记录，并在目标分支中创建一个新的合并提交。而 <code>rebase</code> 是将一个分支的改动在另一个分支的基础上重新应用。</p><p>示例：</p><ol><li><p>把 <code>feature-branch</code> 分支合并到 <code>main</code> 分支</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge feature-branch</span></span><br></pre></td></tr></table></figure></li><li><p>处理合并冲突</p></li><li><p>继续合并</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;conflicted-file&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>快进合并 (Fast-forward merge)</p><p>如果正在合并的分支是直接从目标分支创建的，而且目标分支在此期间没有任何新的提交，Git 会自动执行快进合并，不会创建新的合并提交。</p></li><li><p>禁用快进合并</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff feature-branch</span><br></pre></td></tr></table></figure></li><li><p>其他选项</p><ul><li><p><code>--squash</code>：将所有合并的提交压缩成一个提交。不会生成合并提交记录。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --squash feature-branch</span></span><br></pre></td></tr></table></figure><p>使用 <code>--squash</code> 合并后，你需要手动提交：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit</span></span><br></pre></td></tr></table></figure></li><li><p><code>--no-commit</code>：合并内容但不自动提交。你可以检查更改后手动提交。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --no-commit feature-branch</span></span><br></pre></td></tr></table></figure></li><li><p><code>--abort</code>：如果在合并中遇到问题或冲突而不想继续，可以使用该命令终止合并并恢复到合并前的状态。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge --abort</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="git-reset"><a class="markdownIt-Anchor" href="#git-reset"></a> git reset</h4><p><code>git reset</code> 用于撤销更改、重置头指针位置以及修改暂存区和工作目录。它可以根据不同的模式（<code>--soft</code>、<code>--mixed</code> 或 <code>--hard</code>）来改变暂存区和工作目录的状态。</p><ol><li><p><code>--soft</code>：重置 HEAD 到指定提交，暂存区和工作目录不变。常用于修改最后一次提交。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --soft HEAD~1</span></span><br></pre></td></tr></table></figure><p>例如，上述命令将当前分支的 HEAD 移动到前一个提交，保留所有更改在暂存区中。你可以进行新的提交或调整提交信息。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend</span></span><br></pre></td></tr></table></figure></li><li><p><code>--mixed</code>（默认）：重置 HEAD 到指定提交，同步更新暂存区，但工作目录不变。常用于撤销提交但保留更改。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --mixed HEAD~1</span></span><br></pre></td></tr></table></figure></li><li><p><code>--hard</code>：重置 HEAD 到指定提交，同时同步更新暂存区和工作目录。会丢失所有未提交的更改。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD~1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以指定具体的 commit <span class="built_in">hash</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard e7a1e7a1</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="git-revert"><a class="markdownIt-Anchor" href="#git-revert"></a> git revert</h4><p><code>git revert</code> 用于撤销一个或多个已提交的变更，但与 <code>git reset</code> 不同，它不会改变项目的提交历史。相反，它会创建一个新的提交，这个提交包含了撤销指定提交的更改。这样的操作是“向前”撤销，仍然保留所有的提交记录。</p><ul><li><p>单个提交的撤销</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert &lt;commit-hash&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多个提交的撤销</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销最近的三个提交：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert HEAD~3..HEAD</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="放弃更改"><a class="markdownIt-Anchor" href="#放弃更改"></a> 放弃更改</h3><ul><li><p>丢弃工作目录中的更改</p><ul><li><p>使用 <code>git checkout</code>：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复单个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- &lt;path/to/file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全部文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- .</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>git restore</code>：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复单个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全部文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore .</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>丢弃暂存区中的更改</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复单个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset path/to/file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全部文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset</span></span><br></pre></td></tr></table></figure></li><li><p>丢弃未提交的文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看将要被删除的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -n</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">真正执行删除操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -f</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果目录中有未跟踪的子目录并想同时删除，可以使用 -d 选项</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -fd</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="重命名分支"><a class="markdownIt-Anchor" href="#重命名分支"></a> 重命名分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 重命名为 new</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -m &lt;newbranch&gt; <span class="comment"># -m, --move, move/rename a branch</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; <span class="comment">#重命名分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 推送并重置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin -u &lt;newbranch&gt; <span class="comment"># -u, --set-upstream</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin -d &lt;oldbranch&gt; <span class="comment"># 方法 1; -d, --delete</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin :&lt;oldbranch&gt; <span class="comment"># 方法 2</span></span></span><br></pre></td></tr></table></figure><h3 id="修改远程-commit-记录"><a class="markdownIt-Anchor" href="#修改远程-commit-记录"></a> 修改远程 Commit 记录</h3><ol><li><p>使用 <code>git rebase</code> 修改本地 Commit 记录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase -i &lt;base-commit&gt; <span class="comment"># -i, --interactive</span></span></span><br></pre></td></tr></table></figure><p><code>&lt;base-commit&gt;</code> 是想要开始修改历史的位置。例如，如果想修改最后的 3 个提交，可以这样：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase -i HEAD~3</span></span><br></pre></td></tr></table></figure><p>这会打开一个文本编辑器，显示最近 3 次提交的列表。你可以在列表中选择编辑、压缩、删除等操作。</p><ul><li><code>pick</code>：按原样保留此提交</li><li><code>reword</code>：保留此提交但编辑提交信息</li><li><code>edit</code>：保留此提交但会暂停变基，使你可以修改此提交</li><li><code>squash</code>：将此提交与前一个提交合并，并编辑提交信息</li><li><code>fixup</code>：将此提交与前一个提交合并，但不保留此提交的信息</li><li><code>drop</code>：完全删除此提交</li></ul><p>在编辑器中，可能会看到如下内容：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick abc1234 First commit message</span><br><span class="line">pick def5678 Second commit message</span><br><span class="line">pick ghi9012 Third commit message</span><br></pre></td></tr></table></figure><p>可以修改成：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit abc1234 First commit message</span><br><span class="line">pick def5678 Second commit message</span><br><span class="line">pick ghi9012 Third commit message</span><br></pre></td></tr></table></figure><p>然后保存并关闭编辑器。</p></li><li><p>编辑提交</p><p>此时 Git 会停止在第一个需要修改的提交。你可以使用以下命令进行修改：</p><ul><li>修改文件，e.g. <code>git add &lt;modified-file&gt;</code></li><li>使用 <code>git commit --amend</code> 进行提交更改</li></ul><p>修改完每个提交后，可以继续下一个提交：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><p>重复这个过程直到完成所有提交的修改。</p></li><li><p>强制推送到远程仓库</p><p>最后，确保没有人提交进行推送，强制推送这些更改到远程仓库。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f origin &lt;branch-name&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="worktree"><a class="markdownIt-Anchor" href="#worktree"></a> Worktree</h3><p><code>git worktree</code> 用于在同一个 Git 仓库中创建多个工作目录（工作树）。这对于在同一个仓库中的不同分支上进行并行开发特别有用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目前工作目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree list</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建工作目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 作为全新 branch</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree add -b &lt;new_branch_name&gt; &lt;folder_path&gt; &lt;source_branch&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 从已有的 branch</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree add &lt;folder_path&gt; &lt;source_branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除工作目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree remove &lt;worktrees&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新整理工作目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当手动删除了工作目录时，可以使用此命令清理它们的记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git worktree prune</span></span><br></pre></td></tr></table></figure><h3 id="fork-仓库同步上游仓库"><a class="markdownIt-Anchor" href="#fork-仓库同步上游仓库"></a> Fork 仓库同步上游仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 设置上游仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add upstream &lt;git-url&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 本地项目操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch upstream <span class="comment"># 获取上游仓库更新</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stach <span class="comment"># 暂存本地修改(如果有)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a <span class="comment"># 列出所有远程仓库地址(非必须)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase remotes/upstream/main <span class="comment"># 使用远程仓库的提交记录来重写本地提交记录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f <span class="comment"># 强制推送到远程(github)仓库</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stach pop <span class="comment"># 恢复暂存的本地修改(如果有)</span></span></span><br></pre></td></tr></table></figure><h3 id="查看某段代码是谁写的"><a class="markdownIt-Anchor" href="#查看某段代码是谁写的"></a> 查看某段代码是谁写的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git blame &lt;file-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="提交次数统计"><a class="markdownIt-Anchor" href="#提交次数统计"></a> 提交次数统计</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline | <span class="built_in">wc</span> -l</span></span><br></pre></td></tr></table></figure><h3 id="仓库大小"><a class="markdownIt-Anchor" href="#仓库大小"></a> 仓库大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Git 仓库的总大小</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git count-objects -vH <span class="comment"># -v, --verbose; -H, --human-readable</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出 Git 仓库中所有被跟踪的文件的大小</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git ls-files -z | xargs -0 <span class="built_in">du</span> -hs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git ls-files：输出仓库中所有被跟踪的文件的相对路径</span></span><br><span class="line">    # -z：使 git ls-files 以空字节（null 字节）作为分隔符输出文件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xargs：接受输入并将其逐个传递给 <span class="built_in">du</span> 命令</span></span><br><span class="line">    # -0：使 xargs 以空字节（null 字节）作为分隔符输入文件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">du</span>：<span class="built_in">du</span> 命令用于计算文件或目录的磁盘使用情况</span></span><br><span class="line">    # -h 选项表示以人类可读的格式显示（如 KB、MB）</span><br><span class="line">    # -s 选项表示计算总和，不显示子目录的详细信息</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询历史体积大的 10 个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rev-list --objects --all | git cat-file --batch-check=<span class="string">&#x27;%(objecttype) %(objectname) %(objectsize) %(rest)&#x27;</span> | awk <span class="string">&#x27;/^blob/ &#123;print substr($0,6)&#125;&#x27;</span> | <span class="built_in">sort</span> --numeric-sort --key=2 --reverse | <span class="built_in">head</span> -n 10 | <span class="built_in">cut</span> -c 13-</span></span><br></pre></td></tr></table></figure><h3 id="展示忽略的文件"><a class="markdownIt-Anchor" href="#展示忽略的文件"></a> 展示忽略的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status --ignored</span></span><br></pre></td></tr></table></figure><h3 id="清除-gitignore-文件中记录的文件"><a class="markdownIt-Anchor" href="#清除-gitignore-文件中记录的文件"></a> 清除 .gitignore 文件中记录的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git clean -X -f</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-X: remove only files ignored by Git.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f, --force</span></span><br></pre></td></tr></table></figure><h3 id="孤立分支"><a class="markdownIt-Anchor" href="#孤立分支"></a> 孤立分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的孤立分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout --orphan &lt;branch-name&gt;</span></span><br></pre></td></tr></table></figure><p>孤立分支（orphan branch）不包含任何历史提交记录，相当于保存修改，但是重写 commit 历史，从这条分支开始的提交历史是全新的。比如在现有仓库中创建一个全新的项目时特别有用，而不想保留先前项目的历史记录。</p><h3 id="修改最后的提交"><a class="markdownIt-Anchor" href="#修改最后的提交"></a> 修改最后的提交</h3><ol><li><p>查看最后一次提交的信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -1</span></span><br></pre></td></tr></table></figure></li><li><p>修改最后一次提交</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改最后一次提交的作者信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend --author=<span class="string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重写最后的提交消息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend -m <span class="string">&quot;new message&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改最新的提交而不更改提交消息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend --no-edit</span></span><br></pre></td></tr></table></figure></li><li><p>修改提交后，将更改推送到远程仓库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --force origin &lt;branch-name&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://git-scm.com/book/zh/v2">Pro Git</a></li><li><a href="https://wangchujiang.com/reference/docs/git.html">Git 备忘清单</a></li><li><a href="https://learngitbranching.js.org">Learn Git Branching</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git 教程</a></li><li><a href="https://nulab.com/zh-cn/learn/software-development/git-tutorial/">适合初学者的简单 Git 教程</a></li><li><a href="https://segmentfault.com/a/1190000002918123">深入理解学习 Git 工作流（git-workflow-tutorial）</a></li><li><a href="https://wangchujiang.com/git-tips/">Git Tips</a></li><li><a href="https://ohshitgit.com/zh">Oh Shit, Git!?!</a></li><li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html">GitHub 秘籍</a></li><li><a href="https://open.leancloud.cn/git-commit-message/">Git Commit 日志风格指南</a></li><li><a href="https://missing-semester-cn.github.io/2020/version-control/">版本控制 (Git)</a></li><li><a href="https://wizardzines.com/git-cheat-sheet.pdf">git cheat sheet</a></li><li><a href="https://vikingz.me/pro-git/">程序员必会的六条黄金 Git 命令，让你效率提高百分之百</a></li></ul>]]></content>
    
    
    <summary type="html">现在的代码管理版本控制工具几乎都是 Git 了，虽然有很多好看好用的 GUI 客户端（推荐 Fork），但常用的命令还是得要了然于心，这里只是列出常用的 Git 命令行指令，以供速查参考。</summary>
    
    
    
    
    <category term="Git" scheme="http://kiligwyu.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #117（2024.05.20）</title>
    <link href="http://kiligwyu.com/newsletter/117/"/>
    <id>http://kiligwyu.com/newsletter/117/</id>
    <published>2024-05-20T06:50:11.000Z</published>
    <updated>2024-05-20T08:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 117 期。本篇是对过去一周（05.13 - 05.19）的记录、思考与分享。</p><hr /><p>#TIL 这边路边的柳树挺多的，每次从柳树下经过，总感觉有水落下，那么这些水从哪来的呢，网上搜了下，原来是 <a href="https://baike.baidu.com/item/%E6%9F%B3%E6%B2%AB%E8%9D%89/5328818">柳沫蝉</a> 这个家伙的泡沫腺的分泌物，虽然没什么危害对人，但也得及时清洗，尤其对敏感体质人群。</p><p>#TIL iOS 的闹钟，之前有个版本是去掉了时间滚动选择，需要手动输入的，后来可能吐槽人太多，苹果又改回滚动选择了，我现在才发现其实苹果也保留了手动输入时间功能的，只要长按选中的时间松手后就会弹出键盘，就可以手动输入时间了。我个人是更喜欢手动输入时间的，可以快速的设置闹钟时间，可比滑拉半天滚轮快多了。via <a href="https://twitter.com/dsteppenbeck/status/1792323283909796195">@dsteppenbeck</a><br /><img width=50% alt="手动输入闹钟时间" src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405201513187.webp"></img></p><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><ul><li>CaesarZX - <a href="https://www.youtube.com/watch?v=l8RHGeMugOk">陈冠希代言 vvild 小野电子烟广告  | 1分钟版</a></li><li>Branch Education - <a href="https://www.youtube.com/watch?v=dX9CGRZwD-w">How are Microchips Made?</a></li></ul><h2 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h2><ul><li>卡瓦邦噶！-  <a href="https://www.kawabangga.com/posts/2393">为什么要“包含头不包含尾”？</a></li><li><a href="https://blog-cn.nocobase.com/posts/nocobase-opensource-income-3years/">一个不知名的开源项目可以带来多少收入 —— NocoBase 3 年总结分享</a></li><li><a href="https://lutaonan.com/blog/a-year-off-work/">不上班的第一年 | Randy’s Blog</a></li></ul><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E4%BE%AF%E4%B8%96%E8%BE%BE%E5%AE%9A%E5%BE%8B">侯世达定律</a><blockquote><p>做事所花费的时间总是比你预期的要长，即使你的预期中考虑了侯世达定律。</p></blockquote></li><li>VMware Fusion Pro 和 VMware Workstation Pro 对个人免费开放了，macOS 免费且强大虚拟机的新选择 via <a href="https://blogs.vmware.com/teamfusion/2024/05/fusion-pro-now-available-free-for-personal-use.html">VMware Fusion Blog</a></li><li>MASKED FORUM 假面圓桌派 - <a href="https://www.youtube.com/watch?v=nTp9b26KS78">【假面圓桌派】快速瞭解 OpenAI 剛發佈的 GPT-4o｜20 刀買男友、翻譯、導盲犬、老師｜免費羊毛｜iOS 18 的 Siri 不智障</a></li><li><a href="https://github.com/enkia/tokyo-night-vscode-theme">enkia/tokyo-night-vscode-theme</a></li><li><a href="https://blog.orangesai.com/p/ai-native-apps-developments-and-ideas">AI Native Apps 开发的一些实践和思考 | 橘子汽水铺 by orange.ai</a></li><li><a href="https://copybook.me">Copy Book</a>: 收集了互联网上各种常见场景下的标准英文表述和术语，做国际化时可以参考。via <a href="https://twitter.com/luoleiorg/status/1791359200058343635">@luoleiorg</a></li><li><a href="https://github.com/CapSoftware/Cap">CapSoftware/Cap</a>: Open source Loom alternative. Effortless, instant screen sharing.</li><li><a href="https://helm-app.com">Helm</a>: a native macOS app for App Store Connect that helps ship apps and updates faster and easier.</li><li><a href="https://github.com/ajeetdsouza/zoxide">ajeetdsouza/zoxide</a>: A smarter cd command. Supports all major shells.</li><li><a href="https://twitter.com/recatm/status/1790864765461340167">Reddit 问答版：为了赚钱你做过的最恶心的事情是什么？</a></li><li><a href="https://www.apple.com/newsroom/2024/05/apple-announces-new-accessibility-features-including-eye-tracking/">Apple announces new accessibility features, including Eye Tracking, Music Haptics, and Vocal Shortcuts</a><br />Vehicle Motion Cues Can Help Reduce Motion Sickness 这个可太有用了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 117 期。本篇是对过去一周（05.13 - 05.19）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;#TIL 这边路边的柳树挺多的，每次从柳树下经过，总感觉有水落下，那么这些水从哪来的呢，网上搜了下，原来是 &lt;a</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #116（2024.05.13）</title>
    <link href="http://kiligwyu.com/newsletter/116/"/>
    <id>http://kiligwyu.com/newsletter/116/</id>
    <published>2024-05-13T14:18:47.000Z</published>
    <updated>2024-05-13T14:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 116 期。本篇是对过去一周（05.06 - 05.12）的记录、思考与分享。</p><hr /><p>苹果 5 月 7 日发布了新一代 iPad Air 和 iPad Pro，首发 M4 芯片用在了 Pro 上，Pro 更强也更薄了，屏幕也升级了，接下来就看 6 月 WWDC 上公布的新系统了，肯定有 AI 方面的更新。iPad Pro 对我毫无吸引力，这么强的性能，也用不上，我的 9.7 英寸 iPad Pro 还在吃灰呢，不过我比较期待今年的新款 iPhone。</p><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><ul><li>天真的和感伤的小说家 - <a href="https://www.bilibili.com/video/BV17T421Q7ej/">给勇敢辞职的朋友煽风点火</a></li><li>橙红Iris - <a href="https://www.bilibili.com/video/BV1eH4y137qz/">【买齐所有】iPad 编年史（2010-2024）：一块玻璃的艺术之旅</a></li><li>星球研究所Institute for Planets - <a href="https://www.youtube.com/watch?v=0cqoFqj_yOY">恐高慎入！走出大凉山，到底有多难？| The Arduous Journey Out of Liangshan</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=hx1AxPmLAnM">世界上最豪华的火车上，吃的有多美味？</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1kE42137if/">医保DRG改革来了！它能让你安心看病吗？【柴知道】</a></li></ul><h2 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h2><ul><li>WildCat’s Blog - <a href="https://blog.wildcat.io/2024/04/lessons-learned-from-leaving-the-most-valuable-company-zh/">离开第一市值大厂，我学到了什么？</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>可以分析网站使用的技术栈的 Chrome 拓展 <a href="https://chromewebstore.google.com/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a> via <a href="https://twitter.com/vikingmute/status/1789831066578289096">@vikingmute</a>。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405132242482.webp" alt="GitHub 使用的技术栈" /></li><li>棒棒网址生成器：<a href="http://llIlI.lI">llIlI.lI</a> via <a href="https://twitter.com/chenxuu/status/1789321466544013539">@chenxuu</a>。<br />把网址变成棒棒，比如把 <a href="https://kilig.blog/">kilig.blog</a> 变成 <a href="http://IIIIIIlIIIl.llIlI.lI">IIIIIIlIIIl.llIlI.lI</a>，这个跟 <a href="https://ooooooooooooooooooooooo.ooo">Looooooooooooooooooooooonger</a> 有异曲同工之妙。</li><li><a href="https://pushkeen.ai/appstore-icons">pushkeen.ai/appstore-icons</a>: 在线快速获取 App Store 的 App Logo</li><li><a href="https://github.com/jaywcjlove/reference">jaywcjlove/reference</a>: 为开发人员分享快速参考备忘清单 (速查表)</li><li><a href="https://books.epubkit.app">EpubKit 电子书精选</a> via <a href="https://twitter.com/randyloop/status/1788769413086560649">@randyloop</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 116 期。本篇是对过去一周（05.06 - 05.12）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;苹果 5 月 7 日发布了新一代 iPad Air 和 iPad Pro，首发 M4 芯片用在了 Pro 上，P</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #115（2024.05.06）</title>
    <link href="http://kiligwyu.com/newsletter/115/"/>
    <id>http://kiligwyu.com/newsletter/115/</id>
    <published>2024-05-06T00:50:18.000Z</published>
    <updated>2024-05-06T14:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 115 期。本篇是对过去一周（04.29 - 05.05）的记录、思考与分享。</p><hr /><p>五一小长假过的咋样啊朋友们，出去玩了没？<br />我们一号去买了辆三轮，二号五号骑三轮在黑岗口公园玩，三号四号在小孩儿姥姥家。<br />有考虑出远门玩，但考虑到五一哪儿哪儿人都多，带着小孩不方便，遂作罢，骑三轮边上公园玩玩吧。<br />三轮也是一早都想买了的，可以带小孩儿周边遛的。<br />四号在小孩儿舅舅家喝多了居然，还是啤酒，也就喝了一罐半，<a href="https://www.jiuhuar.com/craftbeer/56e13db58b15e6e6e1d4679f.html">橙色炸弹 16 度</a>，这个啤酒不好喝，拉黑 🤣。</p><p>自行车又吃灰好久了，清洗下，骑行黑岗口，是我目前骑行距离最长的一次 🤣。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062146743.jpeg" alt="Outdoor Cycle 26.26KM" /></p><h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><ul><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1KE42157Qp/">【杜比视界】是建模还是实拍？它真的能骗过人眼！</a></li><li>毕的二阶导 - <a href="https://www.bilibili.com/video/BV1yM4m1Z7Ee/">喝 10 瓶水 vs 喝 10 瓶啤酒，哪个更难？？这一口真得讲究…</a></li></ul><h2 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h2><ul><li>枫言枫语 - <a href="https://justinyan.me/post/5968">凯文·凯利 73 岁生日的 101 条人生建议(中文翻译)</a></li><li><a href="https://5km.studio/newsletters/3">5km Studio Newsletter #3</a></li></ul><h2 id="壁纸"><a class="markdownIt-Anchor" href="#壁纸"></a> 壁纸</h2><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg78GDJceZ7bIpHwsLA">必应四月超高清无水印壁纸</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062242292.webp" alt="必应四月超高清无水印壁纸" /></li><li><a href="https://bodhichristian.pixieset.com">bodhichristian.pixieset.com</a>: Wallpapers for everyone. New collection monthly.<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062239659.webp" alt="bodhichristian.pixieset.com" /></li><li><a href="https://basicappleguy.com/basicappleblog/stripes">Stripes Wallpaper Collection</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202405062240501.webp" alt="Stripes Wallpaper Collection" /></li></ul><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li><a href="https://github.com/dylanaraps/neofetch">dylanaraps/neofetch</a> 停止更新了，替代品可以用 <a href="https://github.com/fastfetch-cli/fastfetch">fastfetch-cli/fastfetch</a></li><li><a href="https://github.com/Antonoko/playdate-chinese-IME">Antonoko/playdate-chinese-IME</a>: a high efficiency Chinese/English input method on playdate</li><li><a href="https://docs.proxyman.io/troubleshooting/ios-16-devices-issues">iOS 16 and iOS 17 issues | Proxyman Documentation</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 115 期。本篇是对过去一周（04.29 - 05.05）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;五一小长假过的咋样啊朋友们，出去玩了没？&lt;br /&gt;
我们一号去买了辆三轮，二号五号骑三轮在黑岗口公园玩，三号四</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #114（2024.04.29）</title>
    <link href="http://kiligwyu.com/newsletter/114/"/>
    <id>http://kiligwyu.com/newsletter/114/</id>
    <published>2024-04-29T05:56:55.000Z</published>
    <updated>2024-04-29T06:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 114 期。本篇是对过去一周（04.22 - 04.28）的记录、思考与分享。</p><hr /><p>又是无趣的一周。<br />星巴克办公，为新产品做技术调研，基本确定了实现方案，接下来就是开发了。<br />简单了解下 Telegram 的机器人和 API，把部分通知接入 Telegram。<br />同时也在继续学习 SwiftUI。</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>惜车工场CSW - <a href="https://www.bilibili.com/video/BV1Gz42167HN/">小米 SU7 即将满月，我们有几个新问题想请教雷总！「迟到车评」</a></li><li>两颗皮蛋 - <a href="https://www.bilibili.com/video/BV1am41127dS/">[杜比] 10000 公里深测，特斯拉究竟改变了什么？</a></li><li>崔永元 - <a href="https://www.youtube.com/watch?v=Y8o279e0E4s">说说王志安，说说柴静他们的过去和现在！</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=8NR2s2KcmAc">为什么草莓味的食品没啥草莓味？</a></li><li>柴知道 ChaiKnows Official Channel - <a href="https://www.youtube.com/watch?v=d0sB_AyFn54">人死之后会再社死一次吗？你在网上的秘密守得住吗？【柴知道：人生大题】</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>少数派 - <a href="https://sspai.com/post/88299">iPhone 终于有任天堂模拟器了：聊聊热门应用 Delta 的前世今生</a></li><li><a href="https://franktan.blog/2024/04/25/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E7%9A%84try-swift-tokyo%E5%B0%8F%E8%AE%B0/">第一次参加的 try! Swift Tokyo 小记</a></li><li>肇鑫的日常博客 - <a href="https://zhaoxin.pro/life/17138654694795.html">今天购物的两件小事</a></li><li>Holy Swift - <a href="https://holyswift.app/common-mistakes-to-avoid-when-using-enums-in-swift/">Common Mistakes to Avoid When Using Enums in Swift</a></li><li>肘子的 Swift 记事本 - <a href="https://fatbobman.com/zh/posts/in-depth-exploration-of-overlay-and-background-modifiers-in-swiftui/">深入探索 SwiftUI 中的 Overlay 和 Background 修饰器</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://github.com/lihaoyun6/QuickRecorder">lihaoyun6/QuickRecorder</a>: A lightweight screen recorder based on ScreenCapture Kit for macOS / 基于 ScreenCapture Kit 的轻量化多功能 macOS 录屏工具</li><li><a href="https://github.com/s1ntoneli/AppUpdater">s1ntoneli/AppUpdater</a>: A simple app-updater for macOS, checks your GitHub releases for a binary asset and silently updates your app.</li><li><a href="https://ddyx.me/">低端游戏</a>：在浏览器里玩怀旧游戏。via <a href="https://twitter.com/hzlzh/status/1783386525390328231">@hzlzh</a><ul><li>在线体验 Windows 95/98：<a href="https://copy.sh/v86/">copy.sh/v86/</a>。via <a href="https://twitter.com/hzlzh/status/1783397413207867773">@hzlzh</a></li></ul></li><li><a href="https://sindresorhus.com/icon-preview">Icon Preview</a>: Preview your app icon and menu bar icon.</li><li><a href="https://iknowwhatyoudownload.com/en/peer/">I Know What You Download</a>: 这个网站可以看到你用的 ip 出口和它所属的网段底下的 ip 在 BT 上下载了什么。via <a href="https://twitter.com/Moelin_Moe/status/1782658643802071136">@Moelin_Moe</a></li><li><a href="https://wangchujiang.com/devtutor/">DevTutor for SwiftUI</a>: SwiftUI 的速查手册</li><li><a href="https://epubkit.app/blog/indie-hacker/">硬地骇客 - 两个月 $12000 ARR 实践之路</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 114 期。本篇是对过去一周（04.22 - 04.28）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;又是无趣的一周。&lt;br /&gt;
星巴克办公，为新产品做技术调研，基本确定了实现方案，接下来就是开发了。&lt;br /&gt;</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #113（2024.04.22）</title>
    <link href="http://kiligwyu.com/newsletter/113/"/>
    <id>http://kiligwyu.com/newsletter/113/</id>
    <published>2024-04-22T05:24:31.000Z</published>
    <updated>2024-04-22T06:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 113 期。本篇是对过去一周（04.15 - 04.21）的记录、思考与分享。</p><hr /><p><a href="https://apps.apple.com/app/id6463897064/">Kroma - Your Color Library</a> 更新了了 1.5 版本，日常更新和修复。</p><p>周日去了荷泽看牡丹，并没有很壮观，盛花期可能已经过了，人还特别多，还得看着小朋友，也没有心情拍照，一张都没拍。</p><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>JUNPING - <a href="https://blog.imjp.uk/indie-app-zh">探索打造以用户为中心的独立应用</a></li><li>Piglei - <a href="https://www.piglei.com/articles/three-little-things-on-code-review/">Code Review 时，曾被我忽视的 3 件重要小事</a></li><li>德普王’s Blog - <a href="https://depp.wang/tools/">软件工具推荐</a></li><li>月光博客 - <a href="https://www.williamlong.info/archives/7421.html">看完豆瓣电影 250 后的体验</a></li></ul><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>星球研究所 Institute for Planets - <a href="https://www.youtube.com/watch?v=PprktCMvhLo">天才在左，疯子在右，法国在哪？【新列国志01】 | France: The Land of Geniuses and Maniacs</a></li><li>柴知道 ChaiKnows Official Channel - <a href="https://www.youtube.com/watch?v=d0sB_AyFn54">人死之后会再社死一次吗？你在网上的秘密守得住吗？【柴知道：人生大题】</a></li></ul><h3 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h3><ul><li><a href="https://apps.apple.com/app/id1048524688">Delta - Game Emulator</a> - All-in-One GBA4iOS Successor<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221336313.webp" alt="Delta - App Store Preview Screenshot" /></li></ul><blockquote><p>Delta – Game Emulator 是一款新鲜上架 App Store，适配 iPhone 的游戏模拟器，支持NES、SNES、Game Boy、Game Boy Color、Game Boy Advance、Nintendo DS、Nintendo 64、Sega Genesis 等多种游戏机，需要自备游戏 ROM。<a href="https://www.appinn.com/delta-game-emulator/">@Appinn</a></p></blockquote><p>终于可以在 iPhone 上玩小时候的小游戏了，很早以前我就分享过我收集的小游戏 <a href="https://github.com/KiligWYu/PlayForFun">KiligWYu/PlayForFun</a>，除了游戏 rom，还有一些 Flash 小游戏（swf）。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221347219.webp" alt="在 iPhone 上玩小游戏" /></p><ul><li><p><a href="https://apps.apple.com/app/id6478897923">雀乐</a><br />原落网，iOS 客户端，发现独立、小众好听的音乐。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221350938.webp" alt="雀乐 - App Store Preview Screenshot" /></p></li><li><p><a href="https://sindresorhus.com/command-x">Command X</a> - Cut and paste files in Finder<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404221359770.webp" alt="Command X Preview Screenshot" /></p></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://github.com/tonyhuan/GuanKiapTsingKhai">tonyhuan/GuanKiapTsingKhai</a> - 原俠正楷，整合「芫荽」及「霞鶩文楷輕便版」這二個基於「Klee One」改造的中文字型，並提供簡轉繁字型 (簡體改以繁體顯示) 及偽直排字型 (各單字旋轉 90 度形成直書排版)。<br /><img src="https://github.com/tonyhuan/GuanKiapTsingKhai/raw/main/img/GKTK_Sample_112-00.png" alt="GuanKiapTsingKhai Preview" /></li><li><a href="https://github.com/quilljs/quill">quilljs/quill</a> - 开源富文本编辑器</li><li><a href="https://github.com/Lakr233/BBackupp">Lakr233/BBackupp</a> - Automated iOS Backup Robot.<br />开源的 iOS 备份工具。<br /><img src="https://github.com/Lakr233/BBackupp/raw/main/Resource/Readme/SCR-20240322-khfv.jpeg" alt="BBackupp Preview Screenshot" /></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 113 期。本篇是对过去一周（04.15 - 04.21）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://apps.apple.com/app/id6463897064/&quot;&gt;Kroma</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #112（2024.04.15）</title>
    <link href="http://kiligwyu.com/newsletter/112/"/>
    <id>http://kiligwyu.com/newsletter/112/</id>
    <published>2024-04-15T05:56:50.000Z</published>
    <updated>2024-04-15T06:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 112 期。本篇是对过去一周（04.08 - 04.14）的记录、思考与分享。</p><hr /><p>又到了杨柳絮漫天飞舞的时候，现在还不算严重。</p><p>再过两天，小孩奶奶就来了，我就能轻松些了。</p><p>家里攒了好多花盆了，留着吧没用还占地，弃之可惜。我现在已经不喜欢养花了，最后净剩些盆。</p><p>给图片添加类似 macOS 窗口截图时的阴影的小工具 <a href="https://apps.apple.com/app/id1633245174/">MSS</a> 更新了 1.4 版本，此次更新支持了从剪贴板粘贴图片，也修复了些小问题。</p><h4 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h4><ul><li>吟游诗人基德 - <a href="https://www.bilibili.com/video/BV1Cq421c7hY/">【基德】减肥神技？？168 断食法的真相</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://www.pcspy.net">播客广场</a><ul><li>少数派 - <a href="https://sspai.com/post/87991">为了发现更多感兴趣的播客，我开发了一款工具</a></li></ul></li><li><a href="https://inpaintweb.lxfater.com">Inpaint-web</a> - 免费无限量去水印和物体的在线工具</li><li>#TIL macOS 应用启动时添加 <code>-_NS_4445425547 YES</code> 这个参数，可以在菜单栏获得一个 🐞 菜单，可以获取一些信息方便 debug，也可以用 <code>defaults write -g _NS_4445425547 -bool true</code> 让这个菜单显示在所有 App 上。via <a href="https://twitter.com/tualatrix/status/1777574176330789143">@tualatrix</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404151428686.webp" alt="Finder 的 🐞 菜单" /></li><li>小众软件 - <a href="https://www.appinn.com/just-one-page-pdf/">Just-One-Page-PDF - 将网页保存为 PDF：A4 尺寸，支持保存为一页或多页 PDF[Chrome]</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 112 期。本篇是对过去一周（04.08 - 04.14）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;又到了杨柳絮漫天飞舞的时候，现在还不算严重。&lt;/p&gt;
&lt;p&gt;再过两天，小孩奶奶就来了，我就能轻松些了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #111（2024.04.08）</title>
    <link href="http://kiligwyu.com/newsletter/111/"/>
    <id>http://kiligwyu.com/newsletter/111/</id>
    <published>2024-04-08T14:47:57.000Z</published>
    <updated>2024-04-09T01:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 111 期。本篇是对过去一周（04.01 - 04.07）的记录、思考与分享。</p><hr /><p>又是白天独自带小孩儿的半周，清明假期回小孩儿姥姥家了两天。天气不冷了，白天多带小孩儿在外面玩。乍暖还寒，容易感冒，我就稍有点，小孩儿也感冒了，鼻塞流涕咳嗽，快好了。<br />还得独自带小孩儿一周。在家陪小孩儿时间多了，跟我最亲 😄。</p><p>我最近反思了下自己，我认为自己还是缺乏行动力，看到好多朋友的产品，其实好多我也一早就想做的，可始终没能落地，加上缺乏设计能力，一拖再拖。今年希望可以发布更多产品，MVP 开发，快速迭代。</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>bopular - <a href="https://www.bilibili.com/video/BV1Hm411z7kd/">此处有一些漂亮跟便宜</a></li><li>酱紫表 - <a href="https://www.bilibili.com/video/BV1kt421n7da/">短信转发最全教程｜ 2024 全平台</a></li><li>郭云神奇 - <a href="https://www.bilibili.com/video/BV1fE421M77b/">《大话西游》10 万字拆解：观音 1 句诡异台词，揭开细思极恐的剧情暗线！01</a></li><li>电影广角镜 - <a href="https://space.bilibili.com/1859934844/channel/collectiondetail?sid=2151210">《绝命毒师》中伏笔和隐喻</a></li><li>Hi 科普啦 - <a href="https://www.youtube.com/watch?v=qSDY-YDe2M0">曾经的“红人”黑皮西瓜，为啥一夜之间销声匿迹？它有何致命缺陷</a></li><li>MHYYYY - <a href="https://www.youtube.com/watch?v=3kWzAWIMJrk">愚人节政治梗图合集</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>十里 - <a href="https://5km.studio/blog/frp-proxy">frp 实现内网穿透</a></li><li>东坡肘子 - <a href="https://fatbobman.com/zh/posts/new-frameworks-new-mindset/">新框架、新思维：解析 Observation 和 SwiftData 框架</a></li><li>张小吉 - <a href="https://www.bmms.me/blog/silky-smooth-ios-progress-bar-interaction-explained">超级干干干干货！丝滑的 iOS 进度条解锁交互到底是怎么制作的？</a></li><li><a href="https://research.swtch.com/xz-timeline">Timeline of the xz open source attack</a></li></ul><h3 id="app"><a class="markdownIt-Anchor" href="#app"></a> App</h3><ul><li><a href="https://apps.apple.com/app/id6468948294">MusicBox Mini</a> - Chimes on Your Wrist<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202404090858096.webp" alt="MusicBox Mini" /></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://morerss.com/zh.php">MoreRSS</a> - RSS 订阅合集，via <a href="https://twitter.com/huhexian">@huhexian</a></li><li><a href="https://megabits.xyz">megabits.xyz</a> - Megabits Studio 官网，via <a href="https://twitter.com/Megabits_mzq">@Megabits_mzq</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 111 期。本篇是对过去一周（04.01 - 04.07）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;又是白天独自带小孩儿的半周，清明假期回小孩儿姥姥家了两天。天气不冷了，白天多带小孩儿在外面玩。乍暖还寒，容易感冒</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
</feed>
