<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>𝕶𝖎𝖑𝖎𝖌&#39;𝖘 𝕭𝖑𝖔𝖌</title>
  
  <subtitle>代码之外</subtitle>
  <link href="http://kiligwyu.com/atom.xml" rel="self"/>
  
  <link href="http://kiligwyu.com/"/>
  <updated>2024-11-07T16:46:12.305Z</updated>
  <id>http://kiligwyu.com/</id>
  
  <author>
    <name>𝕶𝖎𝖑𝖎𝖌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>答问卷</title>
    <link href="http://kiligwyu.com/blog-questionnaire-response/"/>
    <id>http://kiligwyu.com/blog-questionnaire-response/</id>
    <published>2024-11-07T13:57:18.000Z</published>
    <updated>2024-11-07T16:46:12.305Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到 Dayu 老师的 <a href="https://anotherdayu.com/2024/5962/">博客作者呀，我想采访你这 9 个问题！</a>，那么本篇我也来回答一下。</p><h4 id="1-简单介绍下自己或者你的博客"><a class="markdownIt-Anchor" href="#1-简单介绍下自己或者你的博客"></a> 1. 简单介绍下自己或者你的博客？</h4><p>你好啊，朋友，我是 Kilig，&quot;Kilig&quot;这个词语是我还在上大学时，在 <a href="https://u148.net">U148.net</a>（“有意思吧”，一个我曾经很喜欢的一个站点，由于没有网络出版服务许可证，早已关闭）的『你那么美：17 个无法翻译的漂亮单词』一文中看到的，就拿来当昵称了，“塔加拉族语，名词，形容那种喜欢一个人喜欢得好像胃里正有成千上万只蝴蝶翩翩，一张嘴就要全部飞出来一样的醉醺醺、麻酥酥感。”。在网络上，我常用的昵称还有 “KiligWYu”，由于昵称占用或长度限制的原因。</p><p>我是一名苹果平台开发者，主要还是从事 iOS 开发，业余项目见 <a href="https://kilig.studio">kilig.studio</a>，目前在整合已有的项目，也有新项目的开发计划。</p><p>这个博客一开始是为了写点技术文章而搭建的，不过技术文章没有几篇，目前主要是发些周报，记录一下生活并分享一些网络上刷到的有趣的东西，目前已经更新了 131 期。</p><h4 id="2-什么契机让你开始写博客"><a class="markdownIt-Anchor" href="#2-什么契机让你开始写博客"></a> 2. 什么契机让你开始写博客？</h4><p>从事开发工作之后，总想着得有一个技术博客，于是大约在 15、16 年时候开始用 Octopress + GitHub Pages 搭建博客，17 年转到 Hexo + GitHub Pages 时删掉了之前的文章，现在博客的第一篇文章就是 <a href="/from-octopress-to-hexo/">从 Octopress 迁移到 Hexo</a>。</p><p>前几年有一篇没一篇的更新着，22 年开始写“Kilig 的碎周报”，坚持每周一更，为什么写碎周报，在 <a href="/newsletter/1/">碎周报第一期</a> 里有说明。</p><h4 id="3-你是如何完成创作的"><a class="markdownIt-Anchor" href="#3-你是如何完成创作的"></a> 3. 你是如何完成创作的？</h4><p>创作谈不上，顶多算流水账，碎周报到现在更新到第 131 期，几乎每周都有更新，为了尽量减少碎周报的编辑时间，我用 Swift 写了个自用的命令行小工具，每看到一个值得分享的内容时，就把链接丢到终端里，转成 Markdown 链接并保存到本地文件中，这样在编辑当期的碎周报时，直接复制过来，省不少时间。<br />𝕏 上的有趣的推文也都点赞，再从点赞的列表里择一些出来，放到碎周报里。<br />还有很一小部分内容，会发到 Telegram 的 Saved Message 里，再编辑到到碎周报里。</p><h4 id="4-运营博客的过程中是否有失去过动力如果有是为什么恢复的如果没有请问您又是如何保持创作的激情"><a class="markdownIt-Anchor" href="#4-运营博客的过程中是否有失去过动力如果有是为什么恢复的如果没有请问您又是如何保持创作的激情"></a> 4. 运营博客的过程中是否有失去过动力？如果有，是为什么恢复的？如果没有，请问您又是如何保持创作的激情？</h4><p>我的博客不关心数据，靠自己的表达欲和分享欲在支撑，今年碎周报就断了有两个多月，由于工作生活的变故。我发现写周报这件事情，一旦断更，断更一时爽一直断一直爽（不是），后来我觉得我还是有分享欲的，就又恢复了周报的更新。</p><h4 id="5-如何搭建博客以及运营博客每年需要投入的资金"><a class="markdownIt-Anchor" href="#5-如何搭建博客以及运营博客每年需要投入的资金"></a> 5. 如何搭建博客，以及运营博客每年需要投入的资金？</h4><p>搭建博客网络上一堆教程，什么样的教程都有，不管是自建服务还是使用第三方服务，甚至 Apple Notes 和 Telegram Channel 都可以变身博客，怎么搭博客不重要，关键还是要坚持输出。</p><p>我的博客使用免费的 GitHub Pages，图床也使用 GitHub，每年的花费也就续费两个域名的钱，<a href="https://kilig.blog/">kilig.blog</a> 和 <a href="https://KiligWYu.com/">KiligWYu.com</a>，域名托管在 NameCheap，今年续费花费 $42.22。</p><h4 id="6-推荐-1-篇你博客中的文章并推荐一个你喜欢读的博客聊聊原因"><a class="markdownIt-Anchor" href="#6-推荐-1-篇你博客中的文章并推荐一个你喜欢读的博客聊聊原因"></a> 6. 推荐 1 篇你博客中的文章，并推荐一个你喜欢读的博客，聊聊原因。</h4><p>惭愧，我博客里，我觉得没有哪一篇能拿出来推荐。</p><p>我推荐刘毅老师的博客 <a href="https://61.life">61.life</a>，刘毅老师在博客中记录分享他的生活，我当初看到刘毅老师的博客，我也搞了个 kilig.life，在我博客的第一篇文章里都有提过，不过 kilig.life 没坚持多久就被我关了，因为我发现我的流水账没啥可分享的 😂。</p><h4 id="7-推荐-1-个近期喜欢的事物"><a class="markdownIt-Anchor" href="#7-推荐-1-个近期喜欢的事物"></a> 7. 推荐 1 个近期喜欢的事物？</h4><p>近期电子产品买了 HomePods 和 iPhone 16 Pro Max 两个我很满意的产品，也发了 <a href="/homepod-usage-experience/">HomePod 使用体验</a> 和 <a href="/iPhone-16-Pro-Max/">iPhone 16 Pro Max 使用体验</a>。</p><p>别的近期让我很是喜欢的事物，黑神话悟空算一个，都有点想买 PS5 Pro 来玩的冲动，不过被我克制住了，主要还是穷 🤣。</p><p>另外，推荐一款 2011 年发布的、我一直都很喜欢的、见人就推荐的 Flash 小游戏吧，“One And One Story”。</p><blockquote><p>The story of a boy, the story of a girl, the story of both: One and One Story, a game about love, pain and life.</p></blockquote><p>“One And One Story”这个古老的 Flash 游戏，现在或许还能在网络上玩到。我有保存它的源文件，<a href="https://github.com/KiligWYu/PlayForFun/raw/refs/heads/main/swf/One%20and%20One%20Story.swf">点击下载</a>。</p><h4 id="8-想做还没有做的事或想尝试还没有尝试的主题"><a class="markdownIt-Anchor" href="#8-想做还没有做的事或想尝试还没有尝试的主题"></a> 8. 想做还没有做的事，或想尝试还没有尝试的主题？</h4><p>一直想出国去趟日本，以后吧，一定会去的。</p><h4 id="9-写到这里闭上你的眼睛深呼吸几分钟或是出去溜达一圈然后回来写任何你想写的东西"><a class="markdownIt-Anchor" href="#9-写到这里闭上你的眼睛深呼吸几分钟或是出去溜达一圈然后回来写任何你想写的东西"></a> 9. 写到这里，闭上你的眼睛，深呼吸几分钟，或是出去溜达一圈，然后回来写任何你想写的东西。</h4><p>已经过了 0 点了，开一罐啤酒，继续写完剩下的。</p><p>有太多想要的、想做的，最近在找新的 iOS 开发工作也不很顺利，也有些焦虑，总之还是希望自己可以静下心来，做些事情，看些书，多走出去，去体验、去感受。</p><hr /><p>答于 2024 年 11 月 07 日，答完已经 08 日了，晚安了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前看到 Dayu 老师的 &lt;a href=&quot;https://anotherdayu.com/2024/5962/&quot;&gt;博客作者呀，我想采访你这 9 个问题！&lt;/a&gt;，那么本篇我也来回答一下。&lt;/p&gt;
&lt;h4 id=&quot;1-简单介绍下自己或者你的博客&quot;&gt;&lt;a class=&quot;ma</summary>
      
    
    
    
    
    <category term="杂文随笔" scheme="http://kiligwyu.com/tags/%E6%9D%82%E6%96%87%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #131（2024.11.04）</title>
    <link href="http://kiligwyu.com/newsletter/131/"/>
    <id>http://kiligwyu.com/newsletter/131/</id>
    <published>2024-11-04T07:28:22.000Z</published>
    <updated>2024-11-04T14:15:33.556Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 131 期。本篇是对过去一周（10.28 - 11.03）的记录、思考与分享。</p><hr /><p>在读库的微信小程序上买了读库 2025 全年阅读计划（M 计划：两个月读两本），上一次购买读库还是 2022 年，为什么购买读库的阅读计划呢，一方面是想增加些阅读量，读库精编的文章质量自然没的说，可以闭眼买，另一方面，我这段时间有个想法，想着家里增加点实体书，传家倒不敢说，只是想着小朋友长大了，可以读读爸爸曾经读过的书，也是蛮有意思的。当然除了读库，以后还会买些其他书。</p><p>苹果发布了新款的 iMac、Mac mini、MacBook Pro，手里 M1 MacBook Pro，日常还能胜任，<a href="https://9to5mac.com/2024/11/03/apple-macbook-pro-redesign-2026/">传闻 2026 款 MacBook 将会重新设计</a>，等下一代全新设计的 MacBook Pro。</p><p>快乐时光总是短暂的。在家虽没多少时间码代码；带小朋友逛超市、去野餐；给小朋友、家人做好吃的，我很享受做饭的过程，也很有成就感。<br />很多菜谱散落在网上各个平台，有空整理一下？思考一下有没合适的产品形态？打造个人专属菜谱？</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>-纯黑- - <a href="https://b23.tv/D2euhfo">纯黑《黑神话：悟空》全程无伤攻略解说 第十四期（完）</a></li><li>新昼 xx - <a href="https://b23.tv/rsbdfiZ">信号差连不上？有手就行，200 出头搞定 Wifi7 + 光纤扩展副路由，性价比爆炸</a></li><li>-LKs- - <a href="https://b23.tv/RbX6Nv0">真实锐评丨我的各种 2024 年度之最！</a></li><li>郭云神奇 - <a href="https://b23.tv/qqJPczq">《大话西游》1 个「被删减」的唐僧，却暗藏着全片最残酷的真相！（大结局）</a></li><li>郭云神奇 - <a href="https://b23.tv/O3g6bqn">《黑社会》10 万字终极解读：剧情暗线！细恐隐喻！删减剧情！真实结局全揭秘！</a></li><li>钛科闹了技 Technology - <a href="https://b23.tv/SIQvxGL">Mac 视频画面碎裂？一年测试 一份大活</a></li><li>柴知道 - <a href="https://b23.tv/3xg1hxc">¥200和¥8000的机械键盘有什么区别？键盘侠们都在玩些什么？</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg-dtDJceZ7bIpHwsLA">必应 2024.10 超高清无水印壁纸</a></li><li><a href="https://github.com/Lakr233/Halloween24">Lakr233/Halloween24</a></li><li><a href="https://testflight.apple.com/join/RfJ2NXT8">Join the StevePinyin beta</a><br />一键解决英文系统下，通讯录里中文名字的排序问题。</li><li><a href="https://github.com/fatbobman/iCloudSyncStatusKit">fatbobman/iCloudSyncStatusKit</a>: A Swift library that monitors the iCloud account status and responds to synchronization events when using Core Data with CloudKit.</li><li><a href="https://apps.apple.com/app/id6450330892">‎Conflux - Video Player</a></li><li><a href="https://surgeee.me/409/">国行 IPhone 16 系列开启 Apple Intelligence 保姆级教程 | Steve</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 131 期。本篇是对过去一周（10.28 - 11.03）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在读库的微信小程序上买了读库 2025 全年阅读计划（M 计划：两个月读两本），上一次购买读库还是 2022 年</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #130（2024.10.28）</title>
    <link href="http://kiligwyu.com/newsletter/130/"/>
    <id>http://kiligwyu.com/newsletter/130/</id>
    <published>2024-10-28T13:47:07.000Z</published>
    <updated>2024-10-28T14:48:02.349Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 130 期。本篇是对过去一周（10.21 - 10.27）的记录、思考与分享。</p><hr /><ul><li>之前的碎周报里，有时候会遗漏些内容，我一般会发在评论区，现在我决定还是更新在正文里，博客的评论功能，以后可能就关闭了。</li><li>当我要在 Mac App Store 买软件时候，才发现我的付款方式没了，账单地址被覆盖成了购物地址，可能是我前段时间误操作造成的，也没注意。<br />我用的是美区的 Apple ID，付款方式使用的是美区的 PayPal，当我要修改账单地址时，发现没那么容易，在手机端设置时，电话号码的区号老师被自动格式化为 1 位，本应该是 3 位；在网页端上，就没有电话号码的输入框，提交一点反应都没，看接口报错也是电话的原因；在 Mac App Store 里设置，老师提示“Try again later”。<br />于是我先买了张 $50 的 Gift Card，付款成功，先用着。<br />又经过多次尝试，最后在 Mac App Store 里添加 PayPal 成功了，怎么成功的我也很懵，先试了添加 Visa 卡，肯定失败的，在 Visa 卡后面有个 PayPal，点了就成功了，我之前试过直接添加 PayPal 的。反正最后是设置 PayPal 付款成功了。</li><li>看了 <a href="https://johnresig.com/blog/write-code-every-day/">Write Code Every Day</a> 这篇文章，我觉得我也可以实践下作者提出的“Write Code Every Day”的理念，要做的事情太多，会加重拖延症，每天做一些，每天进步一点。<br />但我发现就这也不是很容易坚持的，因为每天要做的事情还是太多，看书、学英语、练习打字、Side Projects 等等，Todoist、Reading List、RSS 订阅、邮件订阅等，又攒了太多内容，本来就不多的空余时间，有时候周末还要回家，晚上火车白天陪小朋友玩，要做到“Write Code Every Day”也不是件容易的事情，不过，每天总有些空余时间，不管多少，要做的事情没法全做可以做一部分，正所谓“不积跬步，无以至千里；不积小流，无以成江海。”。</li><li>由于公司法务合规问题，现在一个月只能上十五天的班了，本月又能休息一周了，正好回家陪小朋友玩。</li><li>看了电影 <a href="https://movie.douban.com/subject/26656728/">泳者之心 Young Woman and the Sea (2024)</a> 和 <a href="https://movie.douban.com/subject/1291580/">杀死比尔 Kill Bill: Vol. 1 (2003)</a>。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202410282155860.webp" style="width: 50%;" alt="泳者之心 Young Woman and the Sea (2024)"><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202410282155859.webp" style="width: 50%;" alt="杀死比尔 Kill Bill: Vol. 1 (2003)"></li><li>小朋友晚上在床上疯玩的时候，不知怎的，胳膊（肘关节）又脱臼了，之前左胳膊脱臼过，两次，这次是右胳膊，好在媳妇儿是儿童医院大夫，医院的人脉广，找了住在附近的骨科大夫，几秒钟就复位了。带小朋友还是要注意些的，脱臼多了反而会更容易脱臼，习惯性脱臼。<br />我小时候胳膊也脱臼过一次，上小学了，秋天的一个月圆之夜，跟朋友们在（麦）厂上疯玩，肩关节脱臼了，我爸半夜带我去找村里的大夫，给纠正过来。</li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://johnresig.com/blog/write-code-every-day/">Write Code Every Day</a></li><li><a href="https://yinji.org/5339.html">一天之中最舒服的时刻 - 印记</a></li></ul><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>是老胡没错 - <a href="https://www.bilibili.com/video/BV1QsyBYjE95/">一生嘴硬的男人们</a></li><li>斑鸠鸭 - <a href="https://www.bilibili.com/video/BV1X5yaYfEYj/">从方小萍到许三多，国产剧谁还赞美“愚人”？</a></li><li>斑鸠鸭 - <a href="https://www.bilibili.com/video/BV1EUyoYkE8v/">新一代的脱口秀喜剧之王，为什么是他？</a></li><li>橙红Iris - <a href="https://www.bilibili.com/video/BV1wPyLYYEQB/">【买齐所有】vivo 编年史(2012 - 2024）：生存，还是理想？这是个问题</a></li><li>Leya蕾雅 - <a href="https://www.youtube.com/watch?v=XEDKVgRxySs">痛入骨髓 - 最強心理恐怖遊戲「寂靜嶺 2」原版+重製版完整鑒賞 ︳沉默之丘2 ︳Silent Hill 2 Original + Remake Retrospective</a></li><li>六分超超 - <a href="https://www.bilibili.com/video/BV1cpyWYHESd/">没人比苹果更懂“抄袭”了…</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://basicappleguy.com/basicappleblog/iphone-16-pro-internals">iPhone 16 Pro &amp; Pro Max Internals Wallpapers</a></li><li><a href="https://neo-developer.binbat.com">Neo Developer - 新生代开发者指南</a>：本文档类似经典课程《计算机教育中缺失的一课》但更加注重工程化和团队协作效率</li><li><a href="https://janereader.com">Jane Reader - A modern epub reader</a></li><li><a href="https://x.com/Jimmy_JingLv/status/1848720927087022469">制糖工厂的充电宝又炸了</a><br />制糖工厂家的产品设计的很好，很好看，但质量安全方面可能差一些，为好设计买单的前提是安全。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 130 期。本篇是对过去一周（10.21 - 10.27）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;之前的碎周报里，有时候会遗漏些内容，我一般会发在评论区，现在我决定还是更新在正文里，博客的评论功能，</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #129（2024.10.21）</title>
    <link href="http://kiligwyu.com/newsletter/129/"/>
    <id>http://kiligwyu.com/newsletter/129/</id>
    <published>2024-10-21T14:13:50.000Z</published>
    <updated>2024-10-22T14:12:52.963Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 129 期。本篇是对过去一周（10.14 - 10.20）的记录、思考与分享。</p><hr /><p>10.22 更新：</p><p>有一些忘了发的，我都会发在评论里，我觉得还是在正文里补写一下，毕竟评论哪天我可能就关掉了。</p><p>我还买了个小鹰背包，Osprey Daylite Plus 黑色 20L。这里还要感谢 <a href="https://x.com/hzlzh">@hzlzh</a> 老师的，之前看自力老师的推文，说要换背包，我发邮件过去询问了，最后还是买的小鹰，那我也下单小鹰吧。<br />我的上个背包还是开信用卡刷卡送的，没有型、没有侧边网兜，就两仓，一个放电脑，一个放其他东西，都没地方放 iPad 了，早就想换了的，一直凑合背着。<br />这个背包，我刚拿到时候，感觉有点大，不过实际上背起来也正好，小一号的 13L 稍有点小，装不下我以后要买的 16 寸电脑，背负系统，也没可参照的。以后就背这个包了。</p><p>还有一首乐音忘了发了， <a href="https://music.apple.com/us/album/whiskey-sunset/1741754984?i=1741754987">MV 的 Whiskey Sunset</a>，也是 <a href="https://space.bilibili.com/1859934844">电影广角镜</a> 制作的 <a href="https://space.bilibili.com/1859934844/channel/collectiondetail?sid=3794811">风骚律师的象征和隐喻</a> 系列视频的片头曲。</p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/whiskey-sunset/1741754984?i=1741754987"></iframe><hr /><p>最近才开始在 YouTube 上看一些国内的单口喜剧节目，有很多喜欢的演员，像呼兰、毛豆、黑灯、付航等，什么时候有机会去线下看一次。</p><p>我的港版 iPhone 16 Pro Max 使用也快一个月了，简单写了篇 <a href="/iPhone-16-Pro-Max/">iPhone 16 Pro Max 使用体验</a>。</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>紫雨 carol - <a href="https://www.bilibili.com/video/BV1nimjYgEco/">31《黑神话：悟空》全流程、剧情讲解梳理、4K 最高画质攻略【第六回：未竟】03.全结局，完结！</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=Hy1U63vhXdc">原产于中国的拉面，为什么会成为日本国民美食？</a></li><li>Little Chinese Everywhere - <a href="https://www.youtube.com/watch?v=9XHAx8gkOOM">Where CHINA meets NORTH KOREA 🇨🇳🇰🇵 I S2, EP96</a></li><li>-LKs- - <a href="https://www.bilibili.com/video/BV1pQCmYdE1b/">包场整个音乐厅，用云宫迅音带你听懂交响乐！</a><br />什么时候也去线下听一场音乐会。</li><li>十万个品牌故事 - <a href="https://www.bilibili.com/video/BV1B5CRYPEQ9/">世界上最猛的润滑剂，为何让男人爱不释手？</a></li><li>小 Lin 说 - <a href="https://www.youtube.com/watch?v=s3iM7VslPsQ">一口气了解洗钱 它能玩得有多花</a></li><li>纪实杂谈 - <a href="https://www.youtube.com/watch?v=MkREAsri5i4">《黑神话悟空》还有另外的结局？制作人：说了太多东西，真不敢放出来！</a></li><li>付航脱口秀 - <a href="https://www.bilibili.com/video/BV15g411A7Z9/">付航的故事动画片</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://anotherdayu.com/2024/5962/">博客作者呀，我想采访你这 9 个问题！</a></li><li><a href="https://www.brain-hole.org/post/summary/">一通举报电话背后的故事让我脊背发凉</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>蓝点网 - <a href="https://www.landiannews.com/archives/106201.html">苹果工程师解释钥匙串生成的随机密码：让你短时间内记住但不会长期记住</a></li><li><a href="https://shots.so">Create Amazing Mockups</a></li><li><a href="https://github.com/jaywcjlove/awesome-swift-macos-apps">jaywcjlove/awesome-swift-macos-apps</a></li><li>Jimmy Cheung - <a href="https://www.figma.com/community/file/1405488261476464561">Somno Sleep App Illustration Design</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 129 期。本篇是对过去一周（10.14 - 10.20）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;10.22 更新：&lt;/p&gt;
&lt;p&gt;有一些忘了发的，我都会发在评论里，我觉得还是在正文里补写一下，毕竟评论哪天我可</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>iPhone 16 Pro Max 使用体验</title>
    <link href="http://kiligwyu.com/iPhone-16-Pro-Max/"/>
    <id>http://kiligwyu.com/iPhone-16-Pro-Max/</id>
    <published>2024-10-18T05:55:46.000Z</published>
    <updated>2024-10-18T15:28:27.429Z</updated>
    
    <content type="html"><![CDATA[<p>使用 iPhone 16 Pro Max 已经有三周了，总的来说很满意，这里简单记录一下。</p><h2 id="购买"><a class="markdownIt-Anchor" href="#购买"></a> 购买</h2><p>我的上一台 iPhone 还是 2019 年发布的 11 Pro Max，512GB、暗夜绿色，是我很喜欢的颜色，11 系列发布那年的 11 月份买的。这几年用下来，我一直没有戴壳和贴膜，今年大约四五月份时候后背玻璃摔碎了，边框四角有些磕碰掉漆，屏幕上有两三道稍深些的划痕，但不细看也看不出来，电池容量也降到了 74%，iOS 系统越来越大，加上硬件损耗，发热卡顿也越来越严重，续航大大降低，今年早些时候我就决定买今年的新 iPhone 了。</p><p>每年 iPhone 都挤牙膏一样，变化不大，但从 11 Pro Max 升级到 16 Pro Max，那升级可就很大了。屏幕从 6.5 英寸增大到 6.9 英寸，边框更窄、支持 ProMotion、全天候显示、亮度也增加了；芯片从 A13 升级到 A18 Pro；电池更大，续航大幅增加；摄像头升级、灵动岛功能、、USB-C 接口、5G 蜂窝网络、操作按钮、相机控制等等，升级巨大，详细的对比可见 <a href="https://www.apple.com.cn/iphone/compare/?modelList=iphone-11-pro-max,iphone-16-pro-max">iPhone 11 Pro Max 和 iPhone 16 Pro Max 机型比较</a>。</p><p>iPhone 16 系列发布后，我竟然还有些犹豫，一是觉得 11 其实也够用，换个电池，相能依旧足够；二是不想再用国行版，Apple Intelligence 的饼也吃不上。这里非常感谢 <a href="https://twitter.com/hzlzh">@hzlzh</a> 老师，看到 <a href="https://twitter.com/hzlzh/status/1838806953637925230">自力老师买了港版的 iPhone 16 Pro Max</a>，我发邮件过去咨询了下，最后也决定买港版，在闲鱼上找了个看上去靠谱的卖家，上海线下面交。最后买了港版 iPhone 16 Pro Max，512GB、白色，今年的白色很好看，沙漠色也好看，白色有现货就买了白色。</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>出色的大屏、超长的续航、流畅的系统，总之我很满意。</p><h3 id="线缆"><a class="markdownIt-Anchor" href="#线缆"></a> 线缆</h3><p>我的旧手机 11 Pro Max，卖不上价了，继续留着自用，拿来当测试机。11 还是 Lighting 的接口，所以 Lighting 线缆还要用，我现在用到的线缆有些多，A2L、A2C、C2L、C2C，还有 A-Micro USB，加上 Apple Watch 的充电线，太多线了，全升级到 C 口也要一笔开销，也不可能，毕竟一些没有 C 口的设备也是刚需，C2C 一根线走天下还要很长的时间啊。</p><h3 id="壳与膜"><a class="markdownIt-Anchor" href="#壳与膜"></a> 壳与膜</h3><p>我的 11 就没戴壳和贴膜，虽然屏幕有些划痕，后背玻璃也摔碎了，那是因为手机用久了，就想换新的，用起来也没那么爱惜了，摔坏了就有借口买新的了 🤣。<br />我 16 也不戴壳和贴膜，像我比较仔细、爱惜东西的人，而且现在的手机也还挺耐摔，没必要为了几乎不会发生的事情，而戴壳贴膜，牺牲掉科技进步所带来的使用体验。但万一发生了小概率事件，虽然肉疼但我接受，就跟不买保险一样。</p><h3 id="软硬件"><a class="markdownIt-Anchor" href="#软硬件"></a> 软硬件</h3><p>系统与软件这方面跟我的 11 比起来，没有多大的不同，11 上没有的灵动岛是我很喜欢的，灵动岛的交互让人心情愉悦。<br />另外就是港版跟国行的差别了，没有了低电量的弹框、App 首次打开时的联网弹框等，使用体验有些微提升。<br />在一个就是 Apple Intelligence 的饼了，我主力使用美区的 Apple Account，可以使用苹果智能了，虽然港版也用不了 ChatGPT，而且 Siri 也只能用英文的，我日常用 Siri 也不多，苹果智能加持的 Siri 依旧是不太聪明的样子，还要很长的路要走。<br />相机控制按键，跟大家吐槽的一样，不太好用，我拍照也少，但多一个快速启动相机入口也是不错的，希望苹果之后可以通过系统更新，提升相机控制按键的使用体验，并开放更多功能给该按键。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>要问我 iPhone 16 Pro Max 上最喜欢的功能是什么，答案是几年前的 iPhone 上早就有了的灵动岛和全天候显示了。<br />都说 iPhone 16 Pro 系列是新一代钉子户机型，我也觉得，各方面都很优秀，还能用上 Apple Intelligence，我的下一台 iPhone 或许是 iPhone 21？。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 iPhone 16 Pro Max 已经有三周了，总的来说很满意，这里简单记录一下。&lt;/p&gt;
&lt;h2 id=&quot;购买&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#购买&quot;&gt;&lt;/a&gt; 购买&lt;/h2&gt;
&lt;p&gt;我的上一台 iPhone 还是 201</summary>
      
    
    
    
    
    <category term="iPhone 16 Pro Max" scheme="http://kiligwyu.com/tags/iPhone-16-Pro-Max/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #128（2024.10.14）</title>
    <link href="http://kiligwyu.com/newsletter/128/"/>
    <id>http://kiligwyu.com/newsletter/128/</id>
    <published>2024-10-14T13:28:58.000Z</published>
    <updated>2024-10-14T15:25:28.571Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 128 期。本篇是对过去一周（10.07 - 10.13）的记录、思考与分享。</p><hr /><p>在第 126 期里，我说我在开发一个 macOS 小工具，已经暂停了，因为在沙盒环境下，Quick Action 的功能无法实现，而 Quick Action 算是一个比较重要的差异点，可以在不打开 App 的情况下实现功能，就像 <a href="https://apps.apple.com/app/id1633245174/">MSS</a> 一样，不用打开 App 就可以给图片添加边框阴影。如果非沙盒环境就不能上架 Mac App Store，那我就没啥动力开发了，做最小化实现留着自己用了好了。</p><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/%D0%BA%D1%83%D0%BA%D1%83%D1%88%D0%BA%D0%B0/1288416464?i=1288417351"></iframe><ul><li>影视飓风 - <a href="https://www.bilibili.com/video/BV1Cx2JYSEBb/">清晰度不如 4 年前！视频变糊是你的错觉吗？</a><br />影视飓风这期视频吐槽没说到点上，还全网下架了，不过在别人的账号下还能看到。另外可以听听下面的播客：<ul><li>津津乐道 - <a href="https://podcasts.apple.com/us/podcast/%E6%B4%A5%E6%B4%A5%E4%B9%90%E9%81%93/id108644234">科技乱炖：视频变糊是资本的锅？影视飓风错的有点离谱</a></li><li>三无环 - <a href="https://podcasts.apple.com/us/podcast/no-169-%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E8%B6%8A%E7%9C%8B%E8%B6%8A%E7%B3%8A-%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/id1475113228?i=1000672717473">No.169 视频网站越看越糊，意味着什么？</a></li></ul></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1BWxse9E2G/">制霸表情包！GIF是如何成为梗图之王的？</a></li><li>花生説 - <a href="https://www.youtube.com/watch?v=7wTE0ru29ko">「花生」浅谈魅族 21 年发展史：四次重开！草根创业天花板？</a><br />我的第一款智能手机就是魅族的 MX，当时非常喜欢魅族的 MX 系列手机。</li><li>小唯的公寓 Wei’s Apartment - <a href="https://www.youtube.com/watch?v=sne1Ph4u8Cw">一个普通人的英语学习小 tip｜从哑巴英语到流利日常</a></li><li>Veritasium - <a href="https://www.youtube.com/watch?v=w5ebcowAJD8">How do QR codes work? (I built one myself to find out)</a></li><li><a href="https://www.bilibili.com/video/BV13L2yYeEn8/">纯黑《寂静岭2：重制版》沉浸式惊怂实况_实况</a></li><li>惜车工场 CSW - <a href="https://www.bilibili.com/video/BV1bV2hYtE2f/">腾势 Z9 GT！自主大 GT 从无到有，这回成了？「迟到车评」</a></li><li>星球研究所 Institute for Planets - <a href="https://www.youtube.com/watch?v=y0lFRiRvkzI">China’s Xinjiang Revealed: Not What You Thought!</a></li><li>陈一枝你坐下 - <a href="https://www.bilibili.com/video/BV1ew411U7kS/">如何避免各种“瘾”火烧身？</a></li><li>韦恩英语 - <a href="https://www.bilibili.com/video/BV1oX4y1w7gs/">Kurt Vonnegut 冯内古特 - 好故事的类型</a></li><li>4A 广告提案网 - <a href="https://www.bilibili.com/video/BV1do2DYfEt5/">徐志胜最新沙雕广告：我有一个朋友，他是根绒毛</a><br />里面的配乐《<a href="https://music.163.com/song?id=2634543570">绒毛之歌</a>》也还挺好听。<br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2634543570&auto=0&height=66"></iframe></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>Randy’s Blog - <a href="https://lutaonan.com/blog/ai-writing/">AI 和写作</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://stock.greatdk.com">概念股搜索器</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 128 期。本篇是对过去一周（10.07 - 10.13）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在第 126 期里，我说我在开发一个 macOS 小工具，已经暂停了，因为在沙盒环境下，Quick Action</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #127（2024.10.08）</title>
    <link href="http://kiligwyu.com/newsletter/127/"/>
    <id>http://kiligwyu.com/newsletter/127/</id>
    <published>2024-10-08T11:40:32.000Z</published>
    <updated>2024-10-08T16:44:53.867Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 127 期。本篇是对过去两周（09.23 - 10.07）的记录、思考与分享。</p><hr /><p>国庆节的票是真难买啊，我 29 日晚上回去，7 号晚上回来，候补了好长时间都没候补到，都是买了一站的票，上车后坐餐车。来回路上看了 <a href="https://movie.douban.com/subject/26628357/">一个叫欧维的男人决定去死 En man som heter Ove (2015)</a>、<a href="https://movie.douban.com/subject/35736202/">狗神 DogMan (2023)</a>、<a href="https://movie.douban.com/subject/1297192/">致命 ID Identity (2003)</a> 和 <a href="https://movie.douban.com/subject/1300613/">土拨鼠之日 Groundhog Day (1993)</a>。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202410082359905.webp" style="width: 50%;" alt="一个叫欧维的男人决定去死 En man som heter Ove (2015)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202410082359904.webp" style="width: 50%;" alt="狗神 DogMan (2023)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202410082359903.webp" style="width: 50%;" alt="致命 ID Identity (2003)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202410082359901.webp" style="width: 50%;" alt="土拨鼠之日 Groundhog Day (1993)"><p>朋友们假期都去哪玩了呀，我们会了趟老家，吃吃喝喝在洛阳玩了一天。</p><p>我外爷轮到我妈来照顾了，趁国庆节放假，媳妇儿可以少请几天假。在老家看到我外爷，我忽然觉得我外爷好孤独，连个说话的人都没有，日子一天天过去，说难听点，就是在“等死”。或许以后我可以写篇关于我外爷的文章。</p><p>在闲鱼买了 iPhone 16 Pro Max，白色，港版，512GB，线下面交，本来想买沙漠色，但没现货，就买了白色的，个人觉得白色和沙漠色都很好看，从 11 Pro Max 升级上来，使用两周多，稍后等我再写篇使用感受。</p><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://carlosgong.github.io/posts/2024011101.html">20240111: 35 岁</a></li><li><a href="https://tw93.fun/2024-09-09/future.html">聊聊未来技术趋势</a></li><li><a href="https://quail.ink/commonsense/p/so-many-chinese-people-killed-in-japan-no-reflection-on-anti-chinese-thought">那么多中国人在日本被杀，怎么就没人反思仇华思想？ | 基本常识</a></li></ul><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>差评君 - <a href="https://www.youtube.com/watch?v=Y1rCOuZHF00">NASA 都被坑了?为啥美国人还坚持用这些奇怪的单位?</a></li><li>杨光_建厨师 - <a href="https://www.bilibili.com/video/BV18Zs6eXEmB/">【转行】清华毕业的建筑师、公司老板为什么去做美食博主？讲讲我自己的故事</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1TTsre2EBP/">磁带是怎么记录你的青春的？它为什么适合盗版？</a></li><li>Harry 的數碼遊牧之旅 - <a href="https://www.youtube.com/watch?v=rVIUt1kjDMM">歡迎 13 - Swift 開發者的日常分享大會 #9 (feat. 13)</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg-V6DJceZ7bIpHwsLA">必应 9 月超高清无水印壁纸</a>。</li><li><a href="https://sindresorhus.com/supercharge">Supercharge</a>: Elevate your Mac experience.</li><li><a href="https://github.com/MythicApp/Mythic">MythicApp/Mythic</a>: An open-source macOS game launcher with the ability to play Windows games through a custom implementation of Apple’s Game Porting Toolkit — supporting multiple platforms (Epic &amp; Steam TBA)</li><li><a href="https://github.com/elrumo/macOS_Big_Sur_icons_replacements">elrumo/macOS_Big_Sur_icons_replacements</a>: Replacement icons for popular apps in the style of macOS Big Sur</li><li><a href="https://github.com/nadimkobeissi/mkbsd">nadimkobeissi/mkbsd</a>: Download all the wallpapers in MKBHD’s “Panels” app</li><li><a href="https://www.toptal.com/developers/gitignore">gitignore.io</a>: Create useful .gitignore files for your project</li><li><a href="https://app.uiboy.com">APPLORE - Discover and Explore App Icons</a></li><li><a href="https://www.patreon.com/posts/ios-kai-fa-de-du-112741361">iOS 開發的年度週期 | 13</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 127 期。本篇是对过去两周（09.23 - 10.07）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;国庆节的票是真难买啊，我 29 日晚上回去，7 号晚上回来，候补了好长时间都没候补到，都是买了一站的票，上车后坐</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #126（2024.09.23）</title>
    <link href="http://kiligwyu.com/newsletter/126/"/>
    <id>http://kiligwyu.com/newsletter/126/</id>
    <published>2024-09-23T14:36:18.000Z</published>
    <updated>2024-09-23T15:22:38.574Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 126 期。本篇是对过去一周（09.18 - 09.22）的记录、思考与分享。</p><hr /><p>本期周报只有半周，由于上期中秋节晚更的缘故。</p><p>本周在做一个 macOS 的小工具，进度 40% 了，在国庆前发布。</p><h3 id="apps"><a class="markdownIt-Anchor" href="#apps"></a> Apps</h3><ul><li><p><a href="https://apps.apple.com/app/id6670337467">Expenzio - Expense Tracker</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409232307300.webp" style="width: 50%;" alt="Expenzio - Expense Tracker"></p></li><li><p><a href="https://apps.apple.com/app/id6683308033">‎CassetteOne - Ambience &amp; Music</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409232311957.webp" style="width: 50%;" alt="CassetteOne - Ambience & Music"></p></li><li><p><a href="https://apps.apple.com/app/id6657986705">‎Daylights - Highlight Journal</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409232315013.webp" style="width: 50%;" alt="Daylights - Highlight Journal"></p></li></ul><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>嗑书的阿冉叔 - <a href="https://www.bilibili.com/video/BV1imtLePEyu/">为什么黑神话第三回，叫《屁》？8千字深度解析《屁》的满级佛学</a></li><li>司文的不思議世界 - <a href="https://www.youtube.com/watch?v=S3bBbHgE4Rs">爲什麽沒有直徑壹光年的恒星？2024 年目前已知的宇宙中最大恒星！WOH G64！</a></li><li>差评君 - <a href="https://www.youtube.com/watch?v=OFEuopIFNvo">电话普及二十年，年轻人却害怕接电话了？</a></li></ul><h3 id="文章-x"><a class="markdownIt-Anchor" href="#文章-x"></a> 文章 / 𝕏</h3><ul><li><a href="https://b123400.net/blog/I-no-longer-write-Haskell">我已經沒在工作用 Haskell 了</a></li><li><a href="https://xiaowenz.com/run-a-uk-company/">如何注册和维护一个英国公司 更新于 2024 年 9 月</a></li><li><a href="https://x.com/AwakeningBear01/status/1836928566401151160">@AwakeningBear01</a> 分享的英雄联盟段位升级带来的人生感悟：<blockquote><ol><li>在人生初期，如果你没背景没资源，你最好找到自己热爱的东西，并将其到达专精程度。</li><li>第二阶段，找到志同道合的队友，一同进步，目的是降低自己的负面情绪带来的的影响。</li><li>找到心流，通过刻意训练，不断重复来提高你的个人表现，从专精到极限。</li><li>通过数据，顺应趋势，等待属于自己的版本和风口，人生并不像游戏，可以重开，所以等待适合自己的版本非常重要。</li><li>复盘，不断找到更好的策略，在失败中找到自己的问题所在，不断优化。</li><li>迭代复利，善战者无赫赫之功，做好复利规划，用策略代替情绪波动，直至真正意义上的胜利。</li></ol></blockquote></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>『Tips：iPhone 新机数据迁移，可以使用 USB 3/4 有线连接大幅提高传输速度（我这无线是 9 小时，有线 30 分钟）。但是记得在配置开始阶段就需要将两设备进行有线连接，而不能等到数据恢复的选项时再连接，有线成功握手后，传输数据的按钮会有非常明确的一个动画表示是有线连接状态。』via <a href="https://x.com/Blankwonder/status/1836984047047737561">@Blankwonder</a></li><li><a href="https://github.com/Lakr233/NotchNotification">Lakr233/NotchNotification</a>: Display Notification Inside Mac’s Notch.</li><li><a href="https://github.com/PlayCover/PlayCover">PlayCover/PlayCover</a>: Run iOS apps and games on Apple Silicon Macs with mouse, keyboard and controller support.</li><li><a href="https://github.com/langren1353/GM_script">langren1353/GM_script</a>: AC-baidu: 重定向优化百度搜狗谷歌搜索_去广告_favicon_双列</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 126 期。本篇是对过去一周（09.18 - 09.22）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;本期周报只有半周，由于上期中秋节晚更的缘故。&lt;/p&gt;
&lt;p&gt;本周在做一个 macOS 的小工具，进度 40% 了</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #125（2024.09.18）</title>
    <link href="http://kiligwyu.com/newsletter/125/"/>
    <id>http://kiligwyu.com/newsletter/125/</id>
    <published>2024-09-18T13:21:54.000Z</published>
    <updated>2024-09-18T14:04:40.060Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 125 期。本篇是对过去一周（09.09 - 09.17）的记录、思考与分享。</p><hr /><p>各位朋友，中秋节过的如何？，本期周报晚两天更新，中秋节回家没有带电脑，因为我知道带了也没空开。带小朋友回姥姥家玩，几个小朋友吵闹了几天。<br />然后又该抢国庆的票了。</p><p>这次回家路上看了四部爱在电影，爱在三部曲加另一部爱在。<a href="https://movie.douban.com/subject/1296339/">爱在黎明破晓前 Before Sunrise (1995)</a>、<a href="https://movie.douban.com/subject/1291990/"><br />爱在日落黄昏时 Before Sunset (2004)</a>、<a href="https://movie.douban.com/subject/10808442/">爱在午夜降临前 Before Midnight (2013)</a> 和 <a href="https://movie.douban.com/subject/3036465/">爱在记忆消逝前 The Leisure Seeker (2017)</a>。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409182133590.webp" style="width: 50%;" alt="爱在黎明破晓前 Before Sunrise (1995)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409182133589.webp" style="width: 50%;" alt="爱在日落黄昏时 Before Sunset (2004)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409182133588.webp" style="width: 50%;" alt="爱在午夜降临前 Before Midnight (2013)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409182133587.webp" style="width: 50%;" alt="爱在记忆消逝前 The Leisure Seeker (2017)"><p>熬夜看了苹果发布会，我现在用的是 iPhone 11 Pro Max，后盖玻璃摔碎了，电池容量只有 74% 了，电池衰减加上硬件损耗加上系统越来越复杂，使用起来经常发烫加卡顿，已经忍了好长时间了，本来想买台新款 Pro Max 的，但我想想似乎还没 PS5 Pro 吸引力大，就算是 iPhone 11 Pro Max，日常使用性能也是过剩的，周末有空去换个电池，就又满血复活，还能再用几年。</p><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>杨光_建厨师 - <a href="https://www.bilibili.com/video/BV11xpjezEBV/">全面解析！如何做出软烂不柴、红亮颤悠的红烧肉【解构家常菜】</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1W84EeJEZg/">千兆网下载跑不满，真是你的问题？Steam下载速度怎么这么快？</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>『Cuto 壁纸新版本 2.10.0 更新了，现在你可以在 Cuto app 里、iOS 18 控制中心、锁屏，一键更换喜欢的壁纸了。另外我们推出了『2024 用户最爱』合辑，囊括了最近一年最受欢迎的 50 张壁纸，升系统换新机别忘了试试。』via <a href="https://x.com/icodesign_me/status/1834030512006136281">@icodesign_me</a></li><li><a href="https://appleslides.com">Apple Bento Slides - Explore Apple Event Presentations</a></li><li><a href="https://github.com/pablopunk/SwiftShift">pablopunk/SwiftShift</a>: Sweet window management for macOS</li><li><a href="https://meatfighter.com/ascii-silhouettify/spa/index.html#/">ASCII Silhouettify</a></li><li><a href="https://github.com/rektdeckard/departure-mono">rektdeckard/departure-mono</a>: A monospaced pixel font with a lo-fi, techy vibe</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 125 期。本篇是对过去一周（09.09 - 09.17）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;各位朋友，中秋节过的如何？，本期周报晚两天更新，中秋节回家没有带电脑，因为我知道带了也没空开。带小朋友回姥姥家玩</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #124（2024.09.09）</title>
    <link href="http://kiligwyu.com/newsletter/124/"/>
    <id>http://kiligwyu.com/newsletter/124/</id>
    <published>2024-09-09T12:21:22.000Z</published>
    <updated>2024-09-09T14:17:29.294Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 124 期。本篇是对过去一周（09.02 - 09.08）的记录、思考与分享。</p><hr /><ol><li>更新了一下 <a href="https://apps.apple.com/app/id6463897064/">Kroma</a>，主要是 UI 方面的改进，改进了可用性，之前在部分颜色下，页面上的元素对比度不够，下周发版。</li><li>准备复活一个已下架的应用，整合几个功能单一的 apps，之后会把已整合的 app 下架。因为功能单一的 app，上架或更新都成问题，目前已经确定了功能和实现方案，使用 SwiftUI + TCA，项目进度 0%。</li><li>在数码荔枝买了窗口管理工具 <a href="https://manytricks.com/moom/">Moom</a>，以前还在订阅 SetApp 时候使用过 Moom。Moom 4 改变巨大，更加的简单易用了，UI 也更贴合 macOS。<br />我之前使用 <a href="https://apps.apple.com/app/id441258766">Magnet</a>，在本碎周报的 <a href="/newsletter/108/">第 108 期</a> 里，我有说过，Magnet 可能会造成系统卡顿（by <a href="https://twitter.com/zhizijun/status/1768129567720603818">@zhizijun</a>），就改用 <a href="https://rectangleapp.com/">Rectangle</a>。现在改用 Moom 了，Moom 的自定义程度也更大。<br />Moom 有个我喜欢的功能就是按下修饰键时，移动鼠标可以快速方便地移动窗口位置，在 Moom 之前，我使用在 Dock 栏可以预览窗口的工具 <a href="https://bahoom.com/hyperdock">HyperDock</a>，HyperDock 可以设置按下鼠标左键时移动窗口，我更喜欢 HyperDock 的按下鼠标左键时再移动窗口，但 HyperDock 在 macOS Sequoia 上该功能失效了，而且 HyperDock 也好多年没更新了。我去给 Moom 提个反馈，看能不能加上按下鼠标左键时再移动窗口。<br />说到预览窗口，近期有个开源项目 <a href="https://github.com/ejbills/DockDoor/">ejbills/DockDoor</a>，不过现在还没 HyperDock 好用，等 DockDoor 进化吧，以后或许可以替代 HyperDock。<br />另外可以看看 MacStories 对 Moom 的介绍文章 <a href="https://www.macstories.net/reviews/moom-4-mac-window-management-upgraded/">Moom 4: Mac Window Management, Upgraded</a> 以及 <a href="https://manytricks.com/blog/">Moom 的官方博客</a> 以获取更多信息。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409092151349.webp" style="width: 50%;" alt="Moom Settings"><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409092152648.webp" style="width: 50%;" alt="HyperDock Settings"></li><li>买了打字指法练习工具 <a href="https://apps.apple.com/app/id1035137927">KeyKey</a>，每天花一点点时间来练习正确的指法。打字练习工具也有很多，比如 <a href="https://github.com/RealKai42/qwerty-learner">RealKai42/qwerty-learner</a> 和 <a href="https://github.com/wintermute-cell/ngrrram">wintermute-cell/ngrrram</a> 等，但我更喜欢 KeyKey。<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409092158584.webp" style="width: 50%;" alt="KeyKey"></li></ol><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><ul><li>电影广角镜 - <a href="https://www.bilibili.com/video/BV1WNHreTEZk/">《风骚律师》的象征和隐喻01：小律师吉米，处处禁止通行的一天</a></li><li><a href="https://meethigher.top/blog/2024/black-wukong-youji/">黑神话悟空 - 妖怪平生录</a></li><li>-LKs- - <a href="https://www.bilibili.com/video/BV1KEpceFEtS/">给UP主打工到底爽不爽？幕后员工真实锐评！</a></li><li>1379 号观察员 - <a href="https://www.youtube.com/watch?v=g4FJzhEr8_g">孔乙己（恐已己）- 鲁镇往事</a></li><li>吸奇侠 - <a href="https://www.youtube.com/watch?v=X8z2_Dp-xJQ">【吸奇侠】聊《黑神话：悟空》第三回「夜生白露」小动画，谁信善？谁作恶？</a></li><li>笑锦要沉稳 - <a href="https://www.bilibili.com/video/BV1mopceAE7z/">因为他人善啊</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li>某高老师 - 人间观察 - <a href="https://someonegao.com/dream-of-the-mountain">梦断黑风岭 - Dream Of The Mountain</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://www.macstories.net/reviews/reeder-a-new-approach-to-following-feeds/">Reeder: A New Approach to Following Feeds</a></li><li><a href="https://meethigher.top/blog/2024/black-wukong-youji/">黑神话悟空 - 妖怪平生录</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 124 期。本篇是对过去一周（09.02 - 09.08）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;更新了一下 &lt;a href=&quot;https://apps.apple.com/app/id646389</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>记一次数据无法保存的诡异问题</title>
    <link href="http://kiligwyu.com/data-write-issue/"/>
    <id>http://kiligwyu.com/data-write-issue/</id>
    <published>2024-09-05T15:34:25.000Z</published>
    <updated>2024-09-05T16:10:24.316Z</updated>
    
    <content type="html"><![CDATA[<p>我一个稳定运行了多年的 macOS 应用，从 macOS Sequoia 15.1 上个 Beta 版开始，遇到一个奇怪的问题，就是 <code>Data</code> 的 <code>write(to:options:)</code> 函数无法保存数据到本地，API 返回的图片数据无法保存到本地，且不会抛出任何异常。</p><span id="more"></span><p>简单如以下代码，项目运行后控制台输出了“save success”，但本地却没有相关文件，这就很匪夷所思了。打断点在第 3 行，然后在访达中可以看到该文件，但继续运行，文件就消失了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> data.write(to: localURL)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;save success&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🤔，是哪个进程删了该文件？终端执行以下命令来监控该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fs_usage | grep <span class="string">&quot;/Users/wy/Pictures/Tapet/2024/09/04.jpg</span></span><br></pre></td></tr></table></figure><p>再次运行项目，终端输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">21:51:49  stat64        /Users/wy/Pictures/Tapet/2024/09/04.jpg                       0.000005   usernoted</span><br><span class="line">21:51:49  getattrlist   /Users/wy/Pictures/Tapet/2024/09/04.jpg                       0.000058   usernoted</span><br><span class="line">21:51:49  open          /Users/wy/Pictures/Tapet/2024/09/04.jpg                       0.000075   usernoted</span><br><span class="line">21:51:49  stat64        /Users/wy/Pictures/Tapet/2024/09/04.jpg                       0.000011   usernoted</span><br><span class="line">21:51:49  lstat64       /System/Volumes/Data/Users/wy/Pictures/Tapet/2024/09/04.jpg   0.000039   fseventsd</span><br></pre></td></tr></table></figure><p>让 AI 来解读一下这些 log：</p><blockquote><ul><li><code>stat64</code> 是一种系统调用，用于获取文件的状态信息，如文件大小、权限、修改时间等。这里可以看到 <code>usernoted</code> 进程对该文件执行了 <code>stat64</code> 操作，检查了文件的元数据。</li><li><code>getattrlist</code> 是一个用于获取文件属性列表的系统调用，它比 <code>stat64</code> 更灵活，可以请求特定的属性。这表明 <code>usernoted</code> 正在进一步检查文件的属性。</li><li><code>open</code> 是一个常见的文件操作，用于打开文件进行读取、写入或其他操作。这里显示 <code>usernoted</code> 进程打开了该文件，可能是为了读取文件内容或进一步处理。</li><li><code>lstat64</code> 是类似于 <code>stat64</code> 的系统调用，但与 <code>stat64</code> 不同的是，<code>lstat64</code> 用于获取符号链接文件的状态信息，而不解析链接到的实际文件路径。这里 <code>fseventsd</code> 进程对文件执行了 <code>lstat64</code> 操作，<code>fseventsd</code> 是文件系统事件守护进程，用于监控和记录文件系统的变化。</li><li><code>usernoted</code> 是 macOS 系统中的一个系统进程，主要负责处理用户通知。它与 macOS 的通知中心紧密集成，管理和显示用户的通知。这个进程确保当某些事件发生时，系统能够生成适当的通知并显示在通知中心或者通过弹出窗口提醒用户。</li></ul></blockquote><p>看起来并没有哪个进程删文件，那是系统问题？试了 <a href="https://github.com/Lakr233/FixTim">FixTim</a>，还是无法保存图片，后来我还试了在虚拟机里新安装 macOS Sequoia 15.1 Beta，居然可以保存。🤔🤔</p><p>同样的图片，放在项目中，再保存到本地，是可以的，从 API 获取的就不行；如果保存位置 <code>localURL</code> 中不加文件拓展名，可以保存，那是数据问题？不应该啊。🤔🤔🤔</p><p>那我换个方式保存图片，先把 API 返回的 data 转成 <code>NSImage</code>，<code>NSImage</code> 有 <code>var tiffRepresentation: Data? &#123; get &#125;</code> 属性，再转成 <code>NSBitmapImageRep</code> 再保存到本地。下面是 <a href="https://stackoverflow.com/questions/46432709/saving-nsimage-in-different-formats-locally#answer-46481947">StackOverflow</a> 上的一段代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">NSImage</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>(<span class="params">as</span> <span class="params">fileName</span>: <span class="type">String</span>,</span><br><span class="line">            <span class="params">fileType</span>: <span class="type">NSBitmapImageRep</span>.<span class="type">FileType</span> <span class="operator">=</span> .jpeg,</span><br><span class="line">            <span class="params">at</span> <span class="params">directory</span>: <span class="type">URL</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> tiffRepresentation <span class="operator">=</span> tiffRepresentation,</span><br><span class="line">          directory.isDirectory,</span><br><span class="line">          <span class="operator">!</span>fileName.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> <span class="type">NSBitmapImageRep</span>(data: tiffRepresentation)<span class="operator">?</span></span><br><span class="line">        .representation(using: fileType, properties: [:])<span class="operator">?</span></span><br><span class="line">        .write(to: directory.appendingPathComponent(fileName).appendingPathExtension(fileType.pathExtension))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(error)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">URL</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> isDirectory: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">try?</span> resourceValues(forKeys: [.isDirectoryKey]))<span class="operator">?</span>.isDirectory <span class="operator">==</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">NSBitmapImageRep</span>.<span class="title class_">FileType</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> pathExtension: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> .bmp:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;bmp&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .gif:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .jpeg:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .jpeg2000:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;jp2&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .png:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;png&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .tiff:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;tif&quot;</span></span><br><span class="line">    <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个问题到底是什么原因造成的呢，可能跟我的系统环境有关，暂时先用 <code>NSBitmapImageRep</code> 绕过去，等正式版我再试试。</p><hr /><ul><li><a href="https://apps.apple.com/app/id1573715683/">Tapet</a>: Bing UHD &amp; watermark-free wallpaper tool.</li><li><a href="https://github.com/Lakr233/FixTim">FixTim</a>: Fix every runtime bug on macOS.</li><li><a href="https://stackoverflow.com/questions/46432709/saving-nsimage-in-different-formats-locally#answer-46481947">StackOverflow - Saving NSImage in Different Formats Locally</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我一个稳定运行了多年的 macOS 应用，从 macOS Sequoia 15.1 上个 Beta 版开始，遇到一个奇怪的问题，就是 &lt;code&gt;Data&lt;/code&gt; 的 &lt;code&gt;write(to:options:)&lt;/code&gt; 函数无法保存数据到本地，API 返回的图片数据无法保存到本地，且不会抛出任何异常。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Develop" scheme="http://kiligwyu.com/tags/Develop/"/>
    
    <category term="Tapet" scheme="http://kiligwyu.com/tags/Tapet/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #123（2024.09.02）</title>
    <link href="http://kiligwyu.com/newsletter/123/"/>
    <id>http://kiligwyu.com/newsletter/123/</id>
    <published>2024-09-02T09:24:16.000Z</published>
    <updated>2024-09-02T10:36:29.135Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 123 期。本篇是对过去一周（08.26 - 09.01）的记录、思考与分享。</p><hr /><p>周末看了 ★ <a href="https://movie.douban.com/subject/36934908/">因果报应 Maharaja (2024)</a> 和几乎同名的电影 <a href="https://movie.douban.com/subject/36912449/">真相守护者 Maharaj (2024)</a>，跟豆瓣评论区的“受害者”一样，本来要看《因果报应》，结果看了《真相守护者》，《真相守护者》的评分也太低了，一般情况下我会跳过这些低评分的电影的，结果阴差阳错看完了。我挺喜欢印度电影的，在高中时候看了第一部印度电影 <a href="https://movie.douban.com/subject/4136145/">通缉令 Wanted (2009)</a>（这部电影到现在我还很喜欢的），就喜欢上了印度电影，后来看了不少的印度电影，印度电影中的歌舞可以说是特色了。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409021745782.webp" style="width: 50%;" alt="因果报应 Maharaja (2024)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409021746899.webp" style="width: 50%;" alt="误看的《真相守护者 Maharaj (2024)》"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202409021746148.webp" style="width: 50%;" alt="我看的第一部印度电影《通缉令 Wanted (2009)》"><p>本周看了不少《黑神话：悟空》的评测、解读、教程都视频，除了游戏本身，其中的隐含的寓意也都非常深刻，看一些解读可以帮助理解，相关链接在后文中可以找到。据传 PS5 Pro 快要发布了，等我到时候买一台，一定要好好体验下这款大作，立个 flag 在此。</p><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><ul><li>柴知道 - <a href="https://www.bilibili.com/video/BV1d74y127GP/">“真实续航”=“标称续航”打 5 折？新能源车为什么总是“续航虚标”？【柴知道：车圈化简】</a></li><li>天真的和感伤的小说家 - <a href="https://www.bilibili.com/video/BV12x4y1s7W6/">小林的书单推荐【寂寞的书单】</a></li><li>范特蜥 - <a href="https://www.bilibili.com/video/BV1Y4sxemENc">黑神话悟空豪华版小曲欣赏（72 首已上传完毕）</a><br />《黑神话：悟空》里的 72 首小曲，我下载下来提取音频，本地循环播放了。</li><li>张子贺 Zake - <a href="https://www.bilibili.com/video/BV1dx4y1x7mz/">休学 + 拒绝百万年薪，不是有所成就才算活着</a></li><li>天真的和感伤的小说家 - <a href="https://www.bilibili.com/video/BV1o1421t7ep/">我祖母的一生真寂寞啊</a></li><li>超粒方 - <a href="https://www.youtube.com/watch?v=hsPRA2enykE">一次看懂《黑神話:悟空》為何爭議不斷? 到底是不是好遊戲?</a></li><li>吸奇侠 - <a href="https://www.youtube.com/watch?v=cbHbF587zoQ">【吸奇侠】聊《黑神话：悟空》第二回小动画，志怪奇闻、人性善恶</a></li><li>中队长同志 - <a href="https://www.bilibili.com/video/BV1Jr421T7gh/">天上最后的光《黑神话:弥勒》隐藏结局未济卦释义“无火处无经”</a></li><li>紫雨 carol - <a href="https://www.bilibili.com/video/BV17Z421K7ib/">01《黑神话：悟空》全流程、剧情讲解梳理、4K 最高画质攻略【第一回：火照黑云】</a></li><li>极客羊 - <a href="https://www.youtube.com/watch?v=fxbEacG15iI">爆肝50个小时！盘点《黑神话：悟空》里 14 个彩蛋和细节！</a></li><li>极客羊 - <a href="https://www.youtube.com/watch?v=-vEVLDamIxI">细节满满，耐人寻味！盘点《黑神话：悟空》21个超赞的彩蛋和细节！【第二期】</a></li><li>黑椒墨鱼 - <a href="https://www.youtube.com/watch?v=p8uhDfuvrMo">大聖降過的妖爲何都回來了？黑神話悟空到底講了個什麽故事？【D9 蒙太奇】</a></li><li>黑椒墨鱼 - <a href="https://www.youtube.com/watch?v=kQIKvo6egiM">黑神話需要上百小時 通關三次才能發現的彩蛋【彩蛋藝術館】</a></li><li>软件那些事儿 - <a href="https://podcasts.apple.com/us/podcast/%E8%BD%AF%E4%BB%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/id1147186605?i=1000667222732">No.458 GitHub 数万 stars 的 yihong 讲如何做开源</a></li><li>凑近点看 - <a href="https://podcasts.apple.com/us/podcast/%E5%87%91%E8%BF%91%E7%82%B9%E7%9C%8B/id1580036852?i=1000666929749">VOL 155 - 试试你的水温：让我们 Small Talk 一下 x 不把天聊 si</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://atpx.com/blog/disable-comments/">为什么关闭评论</a></li><li>印记 - <a href="https://yinji.org/5298.html">博客精简计划：取消评论</a></li><li><a href="https://www.piglei.com/articles/programmer-reading-list-1/">程序员阅读清单：我喜欢的 100 篇技术文章（1-20）</a></li><li><a href="https://mp.weixin.qq.com/s/NXCW47EBSrbPJaQX7WBlBA">第 50 本书小结</a></li><li><a href="https://mp.weixin.qq.com/s/73eW7N1ZR1Lqu0MLFeNDnw">数字游民创业周记 05：租了一间办公室，一人公司，一人工位，开始自己交社保</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE1MzIwNg==&amp;mid=2247485005&amp;idx=1&amp;sn=757dcd7c6cf1f70fd4427c4d443ace5f">程序员自由创业周记 #40：结束了</a></li><li><a href="https://laike9m.com/blog/tui-yan-du-li-kai-fa-chan-pin-wo-zuo-liao-na-xie-chang-shi,159/">推广独立开发产品，我做了哪些尝试</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg-UbDJceZ7bIpHwsLA">必应八月超高清无水印壁纸</a> by Kilig。</li><li><a href="https://github.com/eythaann/Seelen-UI">eythaann/Seelen-UI</a>: The Fully Customizable Desktop Environment for Windows 10/11 with a windows tiling manager included.</li><li><a href="https://localsend.org">LocalSend: Share files to nearby devices</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 123 期。本篇是对过去一周（08.26 - 09.01）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;周末看了 ★ &lt;a href=&quot;https://movie.douban.com/subject/3693490</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Xcode Cloud 使用指南</title>
    <link href="http://kiligwyu.com/Xcode-Cloud/"/>
    <id>http://kiligwyu.com/Xcode-Cloud/</id>
    <published>2024-08-31T04:50:19.000Z</published>
    <updated>2024-08-31T05:47:53.002Z</updated>
    
    <content type="html"><![CDATA[<p>一早就想写篇介绍 Xoode Cloud 的文章的，相关截图都准备好了，但迟迟没有动笔，现在看到了 Darryl Bayliss 的 <a href="https://darrylbayliss.net/getting-setup-with-xcode-cloud/">Getting Setup With Xcode Cloud</a> 一文，好了我不用写了，那我就把这篇文章翻译一下好了。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311314273.webp" alt="我准备的 Xcode Cloud 截图"><p>我现在正在使用 macOS Sequoia Beta 和 Xcode 16 Beta，也正是因为我可以使用 Xcode Cloud 来发布应用，所以我才敢大胆地使用 Beta 版系统。<br />下面是完整译文，本译文使用到了 AI 翻译，但个人精校。</p><hr /><h2 id="xcode-cloud-入门"><a class="markdownIt-Anchor" href="#xcode-cloud-入门"></a> Xcode Cloud 入门</h2><p>Xcode Cloud 是 Apple 提供的一个持续集成和持续交付（Continuous Integration 和 Continuous Delivery，简称 CI/CD）平台。它能够自动化处理一些繁琐的工作流程，如构建应用、测试、签名以及分发。</p><p>你可能会问，为什么要使用 Xcode Cloud？如果你曾经手动将应用归档，然后提交到 App Store Connect，你就会知道这些步骤非常耗时。</p><p>有了 Xcode Cloud，你只需在 Xcode 中点击几下按钮，就可以轻松实现自动化。让我们来看看如何操作。</p><h3 id="设置-xcode-cloud"><a class="markdownIt-Anchor" href="#设置-xcode-cloud"></a> 设置 Xcode Cloud</h3><p>要使用 Xcode Cloud，有一些前提条件，主要包括：</p><ul><li>加入 Apple 开发者计划</li><li>在 App Store Connect 上创建一个应用</li><li>将你的开发者 Apple ID 添加到 Xcode 中</li></ul><p>你的项目还需要存储在一个 <a href="https://developer.apple.com/documentation/xcode/requirements-for-using-xcode-cloud#Developer-account-requirements">git 仓库</a>中。Xcode Cloud 大量使用 git 作为触发器，以便知道何时开始运行。</p><p>如果你需要更多详细信息，可以查阅 <a href="https://developer.apple.com/documentation/xcode/requirements-for-using-xcode-cloud#Developer-account-requirements">完整的要求列表</a>。</p><p>一旦设置完成，就可以开始设置工作流了。在 Xcode 顶部，点击 Git 分支，会弹出一个窗口。你会看到一个名为 <strong>创建工作流</strong> 的选项。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311316320.png" alt="Create Workflow"><p>点击该选项后，Xcode 会显示一个新窗口，询问你要为哪个应用创建工作流。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311317691.png" alt="应用选择"><p>选择一个应用并点击 <strong>Next</strong>。接下来，你将进入一个新的界面，来自定义你的工作流。</p><h3 id="创建工作流程"><a class="markdownIt-Anchor" href="#创建工作流程"></a> 创建工作流程</h3><p>工作流界面包含几个不同的部分。首先是 <strong>General</strong> 部分，在这里你可以填写关于工作流的信息。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311317991.png" alt="General 选项"><p>在这里，你可以为你的工作流命名，并描述它的功能。无论你是独立开发者，还是团队中有多个工程师需要使用同一工作流，这对你来说都是很有用的。</p><p>你还可以在这一部分中限制工作流的编辑权限，确保其他团队成员在没有适当权限的情况下不会篡改工作流。</p><p>接下来是 <strong>Environment</strong> 部分。在这里，你可以选择你的工作流将使用的 Xcode 和 macOS 的版本。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311318504.png" alt="Environment 选项"><p>Xcode Cloud 提供了多种 Xcode 版本，包括测试版。这对于你想创建多个工作流来构建和测试不同配置时非常有用。</p><p>在 <strong>Environment</strong> 部分，你还可以选择在每次构建前清理工作流。如果不勾选该选项，每个工作流都会存储派生数据和每次构建的其他信息，以加快后续的构建速度。</p><p>虽然这通常是有益的，但根据你的需求，你可能希望避免这种情况。例如，将构建版本交付给 TestFlight 进行外部测试时，需要一个干净的构建。</p><p>最后，你可以为工作流设置环境变量。应用程序使用的自定义构建脚本可以获取这些变量，以扩展工作流。如果变量值需要保密，你可以勾选“Secret”选项框，变量值将被隐藏。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311318405.png" alt="Secret 选项"><p>在设置完工作流信息并配置环境后，下一步就是创建触发器，这些触发器将使工作流运行。</p><h3 id="启动条件"><a class="markdownIt-Anchor" href="#启动条件"></a> 启动条件</h3><p>接下来的部分叫做 <strong>Start Conditions</strong>。在这里，你可以告诉工作流哪些条件应当触发它运行。默认情况下，Xcode 会将启动条件设置为对任何分支上的任何文件的任何更改。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311319122.png" alt="启动条件"><p>建议根据需要调整这个设置，因为默认情况下，每次提交都会触发工作流运行。一个可选的方法是将启动条件限制为仅在特定分支上运行。首先，选择 <strong>Custom Branches</strong> 单选按钮，然后开始输入分支的名称。Xcode 会搜索你的 git 分支，并建议与你的搜索匹配的分支。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311321777.png" alt="启动条件 - 自定义分支"><p>你还可以选择基于对特定文件或文件夹的更改来触发工作流，包括特定类型的文件。可以添加多个文件触发器，这样你就能为文件更改构建复杂的触发规则。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311322195.png" alt="启动条件 - 文件"><p>如果你需要不同的触发器，可以点击启动条件旁边的“+”按钮来创建不同的启动触发器。Xcode 为多种情况提供了不同的触发器。</p><p>这些触发器包括 git 标签的更改、Pull Request 的更改、特定分支的定时器，最后还有手动启动工作流。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311323907.png" alt="更多启动条件"><p>大多数触发器都有一个常见的选项，就是 <strong>Auto Cancel Builds</strong>。如果你的触发器可能会多次启动工作流，这个功能非常有用。与其等待每个构建完成，Xcode Cloud 会取消较旧的构建并优先处理最新的构建。</p><p>这个功能非常实用，所以默认是启用的！</p><p>当你对工作流启动触发器感到满意时，你就可以继续设置工作流要执行的操作了。</p><h3 id="工作流动作"><a class="markdownIt-Anchor" href="#工作流动作"></a> 工作流动作</h3><p>在任何优秀的 CI/CD 平台中，定期和重复地执行动作是确保应用成功构建并快速发现问题的良好实践。</p><p>Xcode Cloud 也不例外，它允许你从一系列动作中进行选择。默认情况下，你的工作流包括一个 <strong>Build</strong> 动作，用于构建你选择的 app scheme。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311324277.png" alt="Build 动作"><p>如果 scheme 存在问题，Xcode Cloud 会提供有用的警告，以便你进行处理。</p><p>与启动触发器类似，你可以添加更多的构建动作作为工作流的一部分。这些操作包括运行测试、运行分析器，以及在将应用分发到 TestFlight 或 App Store 之前对其进行归档。</p><p>测试和分析构建操作包含一个 <strong>Requirement</strong> 设置。该设置决定构建操作是否必须通过才能让工作流继续。例如，如果你希望在某个测试失败时使工作流失败，那么你可以强制执行此要求。</p><p>有趣的是，目前测试构建操作似乎不支持 visionOS。</p><p>你可以根据需要为工作流配置任意数量的构建操作。例如，你可以为项目中的每个方案运行测试，然后在一个工作流中构建、归档和分发每个应用。</p><p>当你设置好构建动作后，就可以进入工作流的最后部分，设置后续动作。</p><h3 id="后续动作"><a class="markdownIt-Anchor" href="#后续动作"></a> 后续动作</h3><p>后续动作允许你在工作流完成之前执行一些操作。这些操作包括向 TestFlight 用户分发新构建版本，对 macOS 应用进行公证，以及通过 Slack 或电子邮件通知其他人工作流的结果。</p><p><strong>Notify</strong> 动作让你可以在一定程度上控制发送的消息内容。你可以选择接收所有 <strong>Build Success</strong> 消息，或者在工作流从之前的失败中修复时收到通知，甚至可以选择不接收任何通知！</p><p>对于 <strong>Build Failure</strong> 消息，也有类似的选项。你可以选择接收所有失败消息、仅接收中断工作流的失败消息，或者完全不接收失败消息。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311325211.png" alt="后续动作 - 通知"><h3 id="保存工作流"><a class="markdownIt-Anchor" href="#保存工作流"></a> 保存工作流</h3><p>当设置好工作流后，点击窗口右下角的 <strong>Save</strong> 按钮。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311325072.png" alt="保存"><p>Xcode Cloud 会检查工作流，并让你知道是否存在需要解决的问题。如果一切正常，工作流窗口会消失，你会回到 Xcode 界面。</p><p>再次点击 Xcode 顶部的 git 分支，这次选择 <strong>Manage Workflows</strong>。会出现一个新窗口，显示你为应用创建的工作流。</p><p>如果你想编辑工作流，选择该工作流并点击左下角的齿轮按钮。你也可以在选中工作流时点击 <code>-</code> 按钮来删除它。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311325585.png" alt="管理工作流"><h3 id="在-xcode-cloud-中运行-shell-脚本"><a class="markdownIt-Anchor" href="#在-xcode-cloud-中运行-shell-脚本"></a> 在 Xcode Cloud 中运行 Shell 脚本</h3><p>Xcode Cloud 支持在工作流的特定部分运行 Shell 脚本。如果你需要为工作流进行更高级的配置，这将非常有用，并且可以让你的工作流进一步自定义。</p><p>探讨这一主题超出了本文的范围，不过你可以在 <a href="https://developer.apple.com/documentation/xcode/writing-custom-build-scripts">开发者文档</a> 中找到更多信息。</p><h3 id="在-xcode-和-app-store-connect-中查看你的工作流"><a class="markdownIt-Anchor" href="#在-xcode-和-app-store-connect-中查看你的工作流"></a> 在 Xcode 和 App Store Connect 中查看你的工作流</h3><p>你可以在 Xcode 中查看工作流的结果，方法是点击 <strong>Report Navigator</strong>，然后点击 <strong>Cloud</strong> 选项卡。每个工作流及其构建结果都会显示在这里。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311326781.png" alt="工作流结果报告"><p>你还可以在 App Store Connect 中查看和操作你的工作流，方法是导航到你的 App Store 列表，并在列表顶部选择 <strong>Xcode Cloud</strong> 选项卡。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311326749.png" alt="在 App Store Connect 上管理工作流"><h3 id="费用"><a class="markdownIt-Anchor" href="#费用"></a> 费用</h3><p>Xcode Cloud 包含在每个 Apple Developer Program 会员资格中。每个会员每月提供 25 小时的计算时间。如果超出这个时间，你可以选择多种订阅选项来获得更多的时间。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408311327651.png" alt="费用"><h3 id="延伸阅读"><a class="markdownIt-Anchor" href="#延伸阅读"></a> 延伸阅读</h3><p>表面上看，Xcode Cloud 是一个易于使用的 Apple 应用 CI/CD 平台。然而，别被它的简单迷惑，只需点击几下按钮，你就可以开始创建覆盖大多数用例的高效工作流。</p><p>如果你想了解更多，我建议从以下资源开始：</p><ul><li><a href="https://developer.apple.com/documentation/Xcode/Xcode-Cloud">Xcode Cloud Developer Documentation</a>：官方文档，涵盖一般用法以及如何充分利用 Xcode Cloud 的深入主题。</li><li><a href="https://developer.apple.com/documentation/xcode/developing-a-workflow-strategy-for-xcode-cloud">Developing a workflow strategy for Xcode Cloud</a>：关于如何使用 Xcode Cloud 改进 CI/CD 的最佳实践。</li><li><a href="https://developer.apple.com/documentation/xcode/configuring-webhooks-in-xcode-cloud">Configuring Webhooks with Xcode Cloud</a>：关于如何使用 Webhooks 将 Xcode Cloud 事件暴露给你自己的工具和服务的建议。</li></ul><h3 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h3><p>如果你喜欢这篇博客文章，可以在 <a href="https://ko-fi.com/darrylbayliss">Kofi</a> 上给我捐助。</p><p>你也可以点击下方的链接，在社交媒体上关注我，了解更多关于软件工程的内容。</p><hr /><p>以上就是原文全部内容了，Xcode Cloud 作为苹果官方的 CI/CD 工具，使用简单，25 小时的免费额度不多，但对于我来说，用于构建个人应用，还算够用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一早就想写篇介绍 Xoode Cloud 的文章的，相关截图都准备好了，但迟迟没有动笔，现在看到了 Darryl Bayliss 的 &lt;a href=&quot;https://darrylbayliss.net/getting-setup-with-xcode-cloud/&quot;&gt;Ge</summary>
      
    
    
    
    
    <category term="Xcode Cloud" scheme="http://kiligwyu.com/tags/Xcode-Cloud/"/>
    
    <category term="CI/CD" scheme="http://kiligwyu.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #122（2024.08.26）</title>
    <link href="http://kiligwyu.com/newsletter/122/"/>
    <id>http://kiligwyu.com/newsletter/122/</id>
    <published>2024-08-26T12:38:04.000Z</published>
    <updated>2024-08-26T14:28:31.860Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 122 期。本篇是对过去一周（08.19 - 08.25）的记录、思考与分享。</p><hr /><p>我发现博客上有几篇文章时间错乱了，原因是这样的，上上周 <a href="https://apps.apple.com/us/app/id6502180430">FileZilla Pro RemoteDrive</a> “限免”时候，我试试能不能取代 OneDrive 客户端，就把 OneDrive 删除了，然后发现并不好用，就把 OneDrive 又装回来了，而我博客的文章是软链接到 OneDrive 里的，而这几篇文章里的 metadata 里缺少 date 字段，默认使用文件的创建日期，而我把 OneDrive 装回来时，文件的创建时间就变了，导致有几篇文章发布时间不对。而这几篇文章发布时间可能已经错过一次了，很早之前当我把文件软链接到 OneDrive 里的时候，文件的创建日期可能已经变了。我试着找到文件的创建日期，把时间修改回来，不过可能还是不对，但，没关系了，重要的文件本身。<br />另外，<a href="https://x.com/FileZillaPro/status/1823806078343373023">FileZilla Pro RemoteDrive 不是限免，是要转订阅制了</a>。</p><p>周末又回家了，周末要是不加班的话，完全可以考虑回去的，周五晚上走，周日晚上回，不耽误上班，有卧铺坐卧铺，没卧铺就硬座吧。路上看了 <a href="https://movie.douban.com/subject/27119398/">莫斯科绅士 A Gentleman in Moscow (2024)</a>，一部八集的英剧，一晚上看完，还有 <a href="https://movie.douban.com/subject/34996127/">疯狂的麦克斯：狂暴女神 Furiosa: A Mad Max Saga (2024)</a>。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408262050551.webp" style="width: 50%;" alt="莫斯科绅士 A Gentleman in Moscow (2024)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408262050961.webp" style="width: 50%;" alt="疯狂的麦克斯：狂暴女神 Furiosa: A Mad Max Saga (2024)"><h3 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h3><ul><li>杨光_建厨师 - <a href="https://www.bilibili.com/video/BV1BS421X7FH/">如何做出细腻绵密、颜色翠绿的绿豆沙/绿豆汤【解构家常菜】</a></li><li>Pablo Cimadevila - <a href="https://www.youtube.com/watch?v=mwwq0TAX3lA">CIRCLE OF LIFE necklace</a></li><li>老蒋巨靠谱 - <a href="https://www.bilibili.com/video/BV1nM4m1176V/">从产业角度聊聊《黑神话》</a></li><li>天真的和感伤的小说家 - <a href="https://www.bilibili.com/video/BV1cW42197dd/">郁达夫骂沈从文，你以为大学生就有饭吃了</a></li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://mp.weixin.qq.com/s/oRNNRtxpR4MJ-ETtjGhiFw">“干了这么多年了，只会干这个”，似乎并不是个错</a></li><li><a href="https://jhuo.ca/post/telegram_russian_hacker/">Telegram 传奇：俄罗斯富豪、黑客高手、极权和阴谋</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://github.com/eyelly-wu/appstore-discounts">eyelly-wu/appstore-discounts</a>: An open-source App Store discounts tracker built on GitHub Actions, supporting RSS, Telegram and DingTalk notifications.</li><li><a href="https://github.com/wasi-master/13ft">wasi-master/13ft</a>: My own custom <a href="http://12ft.io">12ft.io</a> replacement.</li><li><a href="https://x.com/DalinHuang/status/1826786684995879122">👨‍💻 从 Google 到 Shopify 👜：一场面试的旅程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 122 期。本篇是对过去一周（08.19 - 08.25）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我发现博客上有几篇文章时间错乱了，原因是这样的，上上周 &lt;a href=&quot;https://apps.apple.</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #121（2024.08.19）</title>
    <link href="http://kiligwyu.com/newsletter/121/"/>
    <id>http://kiligwyu.com/newsletter/121/</id>
    <published>2024-08-19T11:36:39.000Z</published>
    <updated>2024-08-19T16:03:39.702Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 121 期。本篇是对过去一周（08.12 - 08.18）的记录、思考与分享。</p><hr /><p>周末在路上看了四部电影，★ <a href="https://movie.douban.com/subject/1787291/">被嫌弃的松子的一生 嫌われ松子の一生 (2006)</a>、★ <a href="https://movie.douban.com/subject/6985810/">狩猎 Jagten (2012)</a>、 <a href="https://movie.douban.com/subject/30182726/">狩猎 The Hunt (2020)</a>、★ <a href="https://movie.douban.com/subject/35371261/">铃芽之旅 すずめの戸締まり (2022)</a>，其中《铃芽之旅》下载时候没检查，下成了国语配音的版本，看起来好别扭。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192011599.webp" style="width: 50%;" alt="被嫌弃的松子的一生 嫌われ松子の一生 (2006)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192012550.webp" style="width: 50%;" alt="狩猎 Jagten (2012)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192012268.webp" style="width: 50%;" alt="狩猎 The Hunt (2020)"><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192012583.webp" style="width: 50%;" alt="铃芽之旅 すずめの戸締まり (2022)"><p>周末在外面一家小店吃饭时候，店内有个有意思的音箱，<a href="https://future-mirror.com/morrart.html">MORROR ART</a> 悬浮透明歌词音箱，很不错的装饰品，查了下价格，¥3200+ 有点贵了。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408192350673.webp" style="width: 50%;" alt="MORROR ART 音箱（图片截自官网）"><h3 id="影音"><a class="markdownIt-Anchor" href="#影音"></a> 影音</h3><ul><li>司文的不思議世界 - <a href="https://www.youtube.com/watch?v=-4a6s3kkxD0">被拖欠20年工資的天文學家，從貧苦和疾病中掙紮，擊碎了千百年來人們對宇宙的固有認知｜約翰內斯·開普勒</a></li><li>代码之外 Beyond Code - <a href="https://podcasts.apple.com/us/podcast/%E7%AC%AC-11-%E9%9B%86-owen-%E8%81%8A%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91%E7%9A%84%E8%B5%B7%E6%BA%90-%E8%A3%B8%E8%BE%9E%E4%B8%89%E5%B9%B4%E7%9A%84%E7%BB%8F%E5%8E%86-%E5%81%9A%E7%A9%B7%E4%BA%BA%E4%B9%9F%E8%83%BD%E7%94%A8%E7%9A%84%E4%BA%A7%E5%93%81-%E5%A4%A7%E4%BA%9A%E6%B9%BE%E7%9A%84%E7%94%9F%E6%B4%BB/id1688972924?i=1000664981781">‎第 11 集 | Owen 聊沉浸式翻译的起源、裸辞三年的经历、做穷人也能用的产品、大亚湾的生活</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=SpUi5Omd-dU">被吹上天的万能厨具，空气炸锅真的比油炸更健康吗？</a></li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=LdAZlnSxc7A">funnyCoder 14 期 - 和 david 聊聊加拿大程序员职场和移民问题</a></li><li>无穷小亮的科普日常 - <a href="https://www.bilibili.com/video/BV1g4421S7mE/">螽斯在厄瓜多尔能整出无数种花活</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://imfile.io">ImFile</a>：顺畅、高速、强大而便捷的下载工具</li><li>@haozes - <a href="https://twitter.com/haozes/status/1822608036915257388">小米 AX3600 路由器 + iPhone 15 Pro 低电量模式下连接，会导致路由器 crash</a>，“这个应该是 iPhone 15 使用了 160hz 频段的信号，以前的设备都没，但路由器出的时候，手机还没有，兼容性问题”</li><li><a href="https://github.com/internet-development/www-server-mono">internet-development/www-server-mono</a>: Server Mono is a font released by the Internet Development Studio Company.</li><li>Randy’s Blog - <a href="https://lutaonan.com/blog/code-artists/">「代码艺术家」不会被 AI 取代</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 121 期。本篇是对过去一周（08.12 - 08.18）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;周末在路上看了四部电影，★ &lt;a href=&quot;https://movie.douban.com/subject/</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #120（2024.08.12）</title>
    <link href="http://kiligwyu.com/newsletter/120/"/>
    <id>http://kiligwyu.com/newsletter/120/</id>
    <published>2024-08-12T12:41:22.000Z</published>
    <updated>2024-08-12T14:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 120 期。本篇是对过去一周（08.05 - 08.11）的记录、思考与分享。</p><hr /><p>昨天发了一篇《<a href="/homepod-usage-experience">HomePod 使用体验</a>》，是我使用 HomePod 半月来的一些感受。</p><p>最近升级了下我的 Markdown 链接解析工具，加了自动保存到本地文件的功能，这样，我可以方便的把一周来各种链接都自动保存到一起，写周报时候可以拷过来，再稍微修改下就可以了，大大提升效率。</p><h2 id="一些链接"><a class="markdownIt-Anchor" href="#一些链接"></a> 一些链接</h2><h3 id="开源项目"><a class="markdownIt-Anchor" href="#开源项目"></a> 开源项目</h3><ul><li><a href="https://github.com/tom-doerr/zsh_codex">tom-doerr/zsh_codex</a>: This is a ZSH plugin that enables you to use OpenAI’s Codex AI in the command line.</li><li><a href="https://github.com/ccbikai/BroadcastChannel">ccbikai/BroadcastChannel</a>: Turn your Telegram Channel into a MicroBlog.</li></ul><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><ul><li><a href="https://www.roczhang.com/28.html">28</a></li><li>Apple Developer - <a href="https://developer.apple.com/cn/news/">关于设计的幕后故事：Lost in Play</a></li></ul><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><ul><li>枫言枫语 - <a href="https://podcasts.apple.com/us/podcast/%E6%9E%AB%E8%A8%80%E6%9E%AB%E8%AF%AD/id1069600190">Vol. 123 无主题闲聊 02</a></li><li>IC实验室 - <a href="https://www.youtube.com/watch?v=HWxZfXUoOKs">齁甜费列罗，凭啥让人着魔？</a></li><li>老蒋巨靠谱 - <a href="https://www.bilibili.com/video/BV1WH4y1c7GP/">对话何同学：我是一块情绪的海绵</a></li><li>黑神话悟空 - <a href="https://www.bilibili.com/video/BV1oH4y1c7Kk/">《黑神话：悟空》最终预告 | 8 月 20 日，重走西游</a></li><li>Frame Order - <a href="https://www.youtube.com/watch?v=JbDYpA_WQFw">When A Waiter Steals Your Date | Cartoon Box 413</a></li><li>斑鸠鸭 - <a href="https://www.bilibili.com/video/BV1LW421976E/">范伟的演技，什么水平？</a></li><li>鞑厨高寒 - <a href="https://www.bilibili.com/video/BV1Yr421K7EA/">咖啡没有那么多废话</a></li><li>电影广角镜 - <a href="https://www.bilibili.com/video/BV1Jn4y1f7uX/">老白的地狱之路，小粉的炼狱之陟，《绝命毒师》的伏笔和隐喻最终章</a></li><li>老肉雜談 - <a href="https://www.youtube.com/watch?v=I2pVB0I5OeI">為什麼說蚯蚓是世界上最重要的動物？達爾文研究40年，發現蚯蚓的瘋狂真相！如果地球上沒有蚯蚓</a></li><li>老肉雜談 - <a href="https://www.youtube.com/watch?v=S6XItwN2UQ0">貓頭鷹為什麼這麼恨鷹？怎麼又跟烏鴉打起來了？原來牠們是鳥類中的「貓」！飛行完全沒有聲音的真正原因</a></li><li>Little Chinese Everywhere - <a href="https://www.youtube.com/watch?v=NA7mj_9GHTI">Lhasa - Tibet’s Most Famous City! S2, EP86</a></li><li>差评君 - <a href="https://www.youtube.com/watch?v=6aKBdRl2Gq8">一杯冰卖你3块5，凭什么能卖这么贵?</a></li><li>赛博食录 - <a href="https://www.youtube.com/watch?v=9Ud296rBAe0">为什么法棍这么硬，真的是用来当武器吗？</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1FZ421M7Mj/">真心话：你真的需要智驾吗？5年后，你的智驾还能用吗?【柴知道：车圈化简】</a></li><li>4A广告提案网 - <a href="https://www.bilibili.com/video/BV1Cb421E7UR/">苹果广告到了泰国也变沙雕了</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="http://wandawhirl.com">Wanda Whirl</a></li><li><a href="https://cali.design">Cali Kuo</a></li><li>Steam - <a href="https://store.steampowered.com/app/3117780/YinYang_PingPong/">Yin-Yang Ping-Pong</a></li><li>Chrome Extension - <a href="https://chromewebstore.google.com/detail/%E7%AD%89%E7%AD%89%E6%A0%87%E7%AD%BE-%E4%BF%9D%E6%8C%81%E4%B8%93%E6%B3%A8/iechpbdmenjodjnfjendoheikjbdholm">等等标签 - 保持专注</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 120 期。本篇是对过去一周（08.05 - 08.11）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;昨天发了一篇《&lt;a href=&quot;/homepod-usage-experience&quot;&gt;HomePod 使用体验&lt;</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>HomePod 使用体验</title>
    <link href="http://kiligwyu.com/homepod-usage-experience/"/>
    <id>http://kiligwyu.com/homepod-usage-experience/</id>
    <published>2024-08-11T09:52:21.000Z</published>
    <updated>2024-08-11T13:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 HomePod 已经有半个月了，分享一下使用体验，仅针对我个人的使用体验和看法，先说结论，很满意。下面就展开讲讲。</p><h2 id="购买-homepod"><a class="markdownIt-Anchor" href="#购买-homepod"></a> 购买 HomePod</h2><p>HomePod 产品发发售都有六年多的时间了，第二代 HomePod 发售也一年多了，那么我为什么到现在才购买 HomePod？HomePod 的定位是带有音响功能的智能家居中枢，而我想要的只不过是个电脑的外接音响，而 HomePod 作为外接音响是不合格的，而我用了好多年的 Beats Pill+，基本够用，近段时间由于工作上的变化，我又回到了上海，恰好 <a href="https://www.beatsbydre.com/speakers/beats-pill">新一代的 Beats Pill 也发布了</a>，本想买个 Pill 的，可是等了一个多月还没发售，<s>我又重新思考了下自己的需求</s>，最后决定购买 HomePod。</p><p>我希望每天下班回到家（出租屋）后，屋里能充满音乐，偶尔看看电影，Pill 就能满足需求，而新款 Pill 迟迟未发售，加上我也想尝试下 HomePod，还有就是可能跟我当时的心情有关，那一周的时间情绪都非常低落，所以有点消费的冲动。决定购买 HomePod 也是一瞬间的事情，临下班前下单，下班直奔零售店，当我拿到 HomePod 那一刻，感受到了 HomePod 的分量，好重啊，更加期待它的实际表现了。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112054627.webp" style="width: 50%;" alt="我在 𝕏 上发的帖子"><h2 id="日常使用"><a class="markdownIt-Anchor" href="#日常使用"></a> 日常使用</h2><p>房间里有个音响，可以明显提升生活质量，尤其是一个人租住时候。正如我前面所说，HomePod 我主要拿来听音乐了，它的音质自然不必说，何况我也不是音乐发烧友。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112055842.webp" alt="我的桌面" /></p><p>目前房间里的桌子有些小了，再放上一个 27 英寸的显示器，空间就更不够用了，我甚至把床头柜搬过来，放在桌子旁边当个边几用了。HomePod 就放在显示器旁边，它的优点之一就是可以当成一个独立的设备，可以不依赖于手机或电脑，大多数时候它都在脱离其他设备在播放音乐，但同时，依旧可以在手机上看到 HomePod 的状态，可以非常方便地在手机上接管控制。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112055618.webp" style="width: 50%;" alt="iPhone 上控制 HomePod"><p>另一个优点就是语音控制了，Siri 虽然还是公认的智障，但相比其他家的语音控制，明显好用的多。比如我说“Siri 下一首”、“Siri 大点声”、“Siri 随机播放我的收藏”、“Siri 播放 LP 的 Lost on You 专辑”，基本上都可以快速的得到正确回应，我可以把整条命令说完而不必叫它等它回应了再说命令，Siri 也不会有像“好的主人”这样多余的恶心的回复，很棒。唯一不太行的是，我的资料库里面大部分都是非中文音乐，让 Siri 播放这些音乐经常识别错误，不过这不是 Siri 的问题是我的问题。</p><p>HomePod 不太适合电脑外接音响的主要原因是，连接走的是 AirPlay 2 协议，而非蓝牙协议，因此就有音画不同步的问题。我也经常会在 MacBook 上连接控制 HomePod，听听音乐、看看视频或电影，操作非常的不跟手，延迟非常明显，比如切歌、暂停、快进快退等，总要慢个一两秒，不过用 Safari 浏览器看视频，可以自动音画同步，播放器的话，IINA 固定延迟 2s，设置让音频快 2s 即可。总的来说，我可以接受，问题不大。</p><h2 id="智能家居"><a class="markdownIt-Anchor" href="#智能家居"></a> 智能家居</h2><p>智能家居中枢是 HomePod 的另一大卖点了，不过这方面我的使用体验就非常有限了，我只有米家台灯 1S 增强版这一个可以接入 HomeKit 的设备，让 Siri 控制开关灯还是蛮方便的。</p><p>另外一点，就是 HomeKit 的自动化，在 Home App 里设置一些自动化，比如我就设置了当我到家时候就开灯并开始随机播放我的收藏，每天当我下班到家后，我还没进门音乐就已经响起来了，体验很好，这也是别的普通音响所不能的。</p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408112059942.webp" style="width: 50%;" alt="我的自动化设置"><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>就我目前的情况，主要还是拿 HomePod 来听 Apple Music，其他智能设备也非常有限，我对 HomePod 总的来说非常满意，要说还有什么不满意的地方，那就是应该再买一个组一对儿才好，以后吧。</p>]]></content>
    
    
    <summary type="html">使用 HomePod 已经有半个月了，分享一下使用体验，仅针对我个人的使用体验和看法，先说结论，很满意。下面就展开讲讲。</summary>
    
    
    
    
    <category term="HomePod" scheme="http://kiligwyu.com/tags/HomePod/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #119（2024.08.05）</title>
    <link href="http://kiligwyu.com/newsletter/119/"/>
    <id>http://kiligwyu.com/newsletter/119/</id>
    <published>2024-08-05T12:46:20.000Z</published>
    <updated>2024-08-05T15:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 119 期。本篇是对过去一周（07.29 - 08.04）的记录、思考与分享。</p><hr /><p>周日晚上的火车晚点了两个多小时，在候车厅玩 <a href="https://apps.apple.com/us/app/vampire-survivors/id6478975337">Vampire Survivors+</a>，这个游戏八月一号上架了 Apple Arcade。周末两天也在玩这个游戏。<br />我一直觉得火车应该是受天气影响较小的交通工具，而实际上受天气影响还蛮大的，尤其是夏季短时强对流恶劣天气。本次晚点就是受陕西境内的天气影响。前段时间还遇到，临发车前被通知车次停运，估计也是天气原因。今年的恶劣天气异常多，各地暴雨洪涝灾害不断。</p><p>看了 <a href="https://www.imdb.com/title/tt0434409/">V 字仇杀队 V for Vendetta (2005)</a> 和 <a href="https://movie.douban.com/subject/1291565/">疯狂约会美丽都 Les triplettes de Belleville (2003)</a> 两部电影。</p><p><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408052057818.webp" alt="V 字仇杀队 V for Vendetta (2005)" /><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202408052057489.webp" alt="疯狂约会美丽都 Les triplettes de Belleville (2003)" /></p><h3 id="开源项目"><a class="markdownIt-Anchor" href="#开源项目"></a> 开源项目</h3><ul><li><a href="https://github.com/hzeyuan/x-cards">hzeyuan/x-cards</a>: Easy share X anywhere,in any format<ul><li><a href="https://x-cards.net">x-cards.net</a></li></ul></li><li><a href="https://github.com/lihaoyun6/Logoer">lihaoyun6/Logoer</a>: Change the style of the Apple logo in macOS menu bar / 更换 macOS 菜单栏苹果 Logo 样式的小工具</li><li><a href="https://github.com/Kyle-Ye/XcodeLLMEligible">Kyle-Ye/XcodeLLMEligible</a>: 国行 Mac 使用 Xcode LLM 的方法</li><li><a href="https://github.com/jaywcjlove/symbol-scribe">jaywcjlove/symbol-scribe</a>: In messaging applications, use interesting emoji emoticons such as smiley faces, kaomojis, and various other symbols.<ul><li><a href="https://wangchujiang.com/symbol-scribe/">Symbol Scribe</a></li></ul></li><li><a href="https://github.com/CyC2018/CS-Notes">CyC2018/CS-Notes</a>: 📚 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</li></ul><h3 id="apps"><a class="markdownIt-Anchor" href="#apps"></a> Apps</h3><ul><li><a href="https://apps.apple.com/app/id6503706164">StyleGuide - HIG Menubar App</a></li><li><a href="https://apps.apple.com/app/id6503827110">Miley AI - Personal Journal AI</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li><a href="https://1drv.ms/u/s!AuQ7aUGVDnCMg98pDJceZ7bIpHwsLA">必应七月超高清无水印壁纸</a></li><li>三輪 - <a href="https://sanlun.bike/post/shang-hai-shu-cheng">上海书城</a></li><li>晨钟酱 Official - <a href="https://www.bilibili.com/video/BV1Hz421z7wr/">山寨机如何伪造配置？逆向源码后我直呼离谱！</a></li><li><em>#TIL</em> <a href="https://jc0b.computer/posts/enabling-touchid-for-sudo-macos-sonoma/">Enabling Touch ID for sudo in macOS Sonoma</a></li><li><em>#TIL</em> iPhone 的相机，拍照时候，按住拍照按钮向左滑，可以连拍。</li><li><a href="https://askhackers.com">askhackers.com</a>: Get answers from the world’s top hackers</li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=sQPaBY7RpDw">funnyCoder13期 - 和同事李豹聊聊大厂被裁后的思考，自媒体重新起航</a></li><li>IC实验室 - <a href="https://www.youtube.com/watch?v=e9A4BF-gIG4">俞敏洪和董宇辉为什么没有撕起来？- IC实验室出品</a></li><li>纳豆奶奶 - <a href="https://www.youtube.com/watch?v=pHjXkALzDHA">為什麼美國人越窮越胖？ 300公斤的流浪漢你看過嗎？ ？</a></li><li>星球研究所 Institute for Planets - <a href="https://www.youtube.com/watch?v=IJzI0vxUTMU">一条“线”也能成功申遗？不愧是中国！拆开北京中轴线，你会看见什么？ | BEIING CANNOT BE WITHOUT A CENTRAL AXIS</a></li><li>小Lin说 - <a href="https://www.youtube.com/watch?v=NM1hSguZ4fI">【硬核】一口气了解外汇 | Everything You Need To Know About Foreign Exchange</a></li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=plDC3QP9qIU">34岁程序员带全家离开北京</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1A142187KH/">复古网红 CCD 当年是怎么死的？它值得怀念吗？</a></li><li>柴知道 - <a href="https://www.bilibili.com/video/BV1Vb421779F/">无线电玩到尽头有多强？通话免费，覆盖全球，直通月球！</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi There! 感谢阅读 Kilig 的碎周报第 119 期。本篇是对过去一周（07.29 - 08.04）的记录、思考与分享。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;周日晚上的火车晚点了两个多小时，在候车厅玩 &lt;a href=&quot;https://apps.apple.com/us</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #118（2024.07.29）</title>
    <link href="http://kiligwyu.com/newsletter/118/"/>
    <id>http://kiligwyu.com/newsletter/118/</id>
    <published>2024-07-29T13:27:34.000Z</published>
    <updated>2024-07-29T16:11:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi There! 感谢阅读 Kilig 的碎周报第 118 期。本篇是从上期到现在（07.28）的记录、思考与分享。</p><hr /><p>上期还是 05.20 ，由于工作生活发生了较大变动，停更了两个多月了。我又开始了双城生活，不是郑州开封，而是开封上海，对，我又回上海了，要不是疫情，我可能早就又回上海了，趁现在，在上海再多发展些年。<br />我现在基本上一周、两周就回家一次，坐普快，周五晚上回家，周日晚上回来，不影响白天上班，买不到卧铺就硬座。往后看的影视会多一些，在火车上打发时间，可以把我的待看清单清一清了，看过的我都放在 <a href="/learninpublic/2024/">这里</a> 了。<br />另外我还是有些分享欲的，所以碎周报恢复更新。</p><h3 id="好买了"><a class="markdownIt-Anchor" href="#好买了"></a> 好，买了</h3><p>又到上海，置办了些提升生活品质的好物。</p><ul><li>徕芬电动牙刷 - 徕芬的广告真的是铺天盖地，徕芬的电动牙刷是牙刷界最苹果的，我的上一支电动牙刷还是好多年前的小米的入门款，趁此机会换了徕芬，不过是在闲鱼买的二手，全新且便宜。</li><li>HomePod - 我有一个 Beats Pill，用了好多年了，新款的 Beats Pill 马上就要发售了，『将于今年夏季推出』，本打算买新款 Pill 的，等了一个多月还没发售，改决定买 HomePod 了，相比 Pill，HomePod 音质更好、支持 Siri、HomeKit、无需开关机，缺点更贵、不便携、当蓝牙音响来用的话有些延迟，不过我使用苹果全家桶，主要用来听 Apple Music，延迟问题可以接受，所以买 HomePod 了，下班前 Apple Store 下单，零售店自提。</li><li>米家台灯 1S 增强版 - 颜值高、支持 HomeKit。</li><li>美国 Harry’s 手动剃须刀 - 𝕏 友推荐的，很不错，刀片也很耐用，用了两个多月了，依旧锋利。</li></ul><hr /><p>买了 <a href="https://app.cloudcone.com/?ref=11590">CloudCone</a> 的 VPS，通过 <a href="https://yinji.org/cloudcone.html">小胡同学的博客</a>，2 vCPU, 1GB RAM, 55GB Disk, 15.25 USD 一年，目前部署了 <a href="https://github.com/suno-ai/bark">Bark</a>、<a href="https://github.com/DIYgod/RSSHub">RSSHub</a>、<a href="https://github.com/FreshRSS/FreshRSS">FreshRSS</a>。</p><h3 id="开源项目"><a class="markdownIt-Anchor" href="#开源项目"></a> 开源项目</h3><ul><li><a href="https://github.com/yaoxieyoulei/mytv-android">yaoxieyoulei/mytv-android</a>: 使用 Android 原生开发的电视直播软件。</li><li><a href="https://github.com/djyde/icondog">djyde/icondog</a>: An open-source icons manager for open-source icons.</li><li><a href="https://github.com/rwv/lookscanned.io">GitHub - rwv/lookscanned.io</a>: 📚 <a href="http://LookScanned.io">LookScanned.io</a> - Make your PDFs look scanned.</li><li><a href="https://github.com/apparata/mkprivacy">apparata/mkprivacy</a>: UI tool for creating Apple privacy manifest property lists.</li><li><a href="https://github.com/piotrkulpinski/openalternative">piotrkulpinski/openalternative</a>: A community driven list of open source alternatives to proprietary software and applications.</li><li><a href="https://github.com/alienator88/Pearcleaner">alienator88/Pearcleaner</a>: A free, source-available and fair-code licensed mac app cleaner.</li><li><a href="https://github.com/KonghaYao/chinese-free-web-font-storage">KonghaYao/chinese-free-web-font-storage</a>: 中文网字计划 (Chinese Webfont Project) 是一个免费的中文 web 字体库，支持在线加载及查看字体信息。Explore our free CJK web font library that enables online loading and font information viewing.</li><li><a href="https://github.com/jaywcjlove/free-font">jaywcjlove/free-font</a>: 收录商用免费汉字字体，还包括开源英文字体 Free Font。</li><li><a href="https://github.com/hehonghui/awesome-english-ebooks">hehonghui/awesome-english-ebooks</a>: 经济学人 (含音频)、纽约客、卫报、连线、大西洋月刊等英语杂志免费下载，支持 epub、mobi、pdf 格式，每周更新。</li><li><a href="https://github.com/ducaale/xh">ducaale/xh</a>: Friendly and fast tool for sending HTTP requests.</li><li><a href="https://github.com/bensadeh/tailspin">bensadeh/tailspin</a>: 🌀 A log file highlighter.</li><li><a href="https://github.com/work7z/MDGJX">work7z/MDGJX</a>: 秒达工具箱，借助独创高效的输入方式，让您可以快速呼出各类工具、文档及笔记等资源，免费安全无广告，现已完全开源！</li><li><a href="https://github.com/nate-parrott/ball">nate-parrott/ball</a>: It’s a little ball that lives in your dock. It’s fun. It’s a ball.</li><li><a href="https://github.com/ejbills/DockDoor">ejbills/DockDoor</a>: Window peeking for macOS.</li><li><a href="https://github.com/Pintree-io/pintree">Pintree-io/pintree</a>: An intuitive tool for managing and exporting your local bookmarks into a shareable website.</li></ul><h3 id="apps"><a class="markdownIt-Anchor" href="#apps"></a> Apps</h3><ul><li><a href="https://sindresorhus.com/menu-bar-spacing">Menu Bar Spacing</a>: Customize the gap between menu bar items.</li><li><a href="https://bananabin.app">BananaBin</a>: You never notice when your bin is full. BananaBin reminds you to clear it in time.</li><li><a href="https://apps.apple.com/app/id6478312533">SteveWatch</a>: A brand new VOD player.<br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202407292330241.webp" alt="SteveWatch" /></li></ul><h3 id="音视频"><a class="markdownIt-Anchor" href="#音视频"></a> 音视频</h3><ul><li><a href="https://music.apple.com/us/album/the-death-of-slim-shady-coup-de-gr%C3%A2ce/1755022177">The Death of Slim Shady (Coup De Grâce)</a><br><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/the-death-of-slim-shady-coup-de-gr%C3%A2ce/1755022177"></iframe><br></li><li><a href="https://music.apple.com/us/playlist/%E8%AF%95%E8%AF%95%E8%80%B3%E6%9C%BA/pl.u-V9D7mPEUB1GbxBk">试试耳机 - Tw93</a><br><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/%E8%AF%95%E8%AF%95%E8%80%B3%E6%9C%BA/pl.u-V9D7mPEUB1GbxBk"></iframe><br></li><li><a href="https://music.apple.com/us/playlist/%E5%8D%81%E5%A4%A7%E4%B8%93%E8%BE%91/pl.u-mJy81mECzBL49zM">十大专辑 - Tw93</a><br><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="450" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/playlist/%E5%8D%81%E5%A4%A7%E4%B8%93%E8%BE%91/pl.u-mJy81mECzBL49zM"></iframe><br></li><li>另外还有 WWDC24 的几张专辑都不错，Apple Music 搜索 WWDC24 试听。</li></ul><hr /><ul><li>疯投圈 - <a href="https://podcasts.apple.com/us/podcast/%E7%96%AF%E6%8A%95%E5%9C%88/id1088178402?i=1000663250696">中式快餐如何超越麦当劳？</a></li><li>疯投圈 - <a href="https://podcasts.apple.com/us/podcast/%E5%92%96%E5%95%A1%E6%88%98%E4%BA%892024/id1088178402?i=1000661453334">咖啡战争 2024</a></li><li>代码之外 Beyond Code - <a href="https://podcasts.apple.com/us/podcast/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96-beyond-code/id1688972924?i=1000661620497">读书时间！一起读《软技能：代码之外的生存指南》</a></li><li>代码之外 Beyond Code - <a href="https://podcasts.apple.com/us/podcast/%E7%AC%AC-9-%E9%9B%86-cali-%E8%81%8A%E4%BD%90%E7%8E%A9%E6%98%AF%E4%B8%80%E5%AE%B6%E6%80%8E%E6%A0%B7%E7%9A%84%E5%85%AC%E5%8F%B8-%E5%86%99%E7%AE%80%E5%8E%86%E7%9A%84%E5%BB%BA%E8%AE%AE-%E5%9C%A8%E7%BE%8E%E5%9B%BD%E7%9A%84%E8%AF%BB%E4%B9%A6%E5%B7%A5%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E9%AA%8C-%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E8%AE%BE%E8%AE%A1/id1688972924?i=1000659363499">第 9 集 | Cali 聊佐玩是一家怎样的公司、写简历的建议、在美国的读书工作、远程工作的经验、程序员学设计</a></li><li>金汤力电台 - <a href="https://podcasts.apple.com/us/podcast/%E9%87%91%E6%B1%A4%E5%8A%9B%E7%94%B5%E5%8F%B0/id1477337241?i=1000662934039">细读经典西游｜乌巢禅师的秘密 / 黄风岭背后的阴谋 / 黑神话悟空 boss 原引章节出现</a></li><li>个体户指南 - <a href="https://podcasts.apple.com/us/podcast/%E4%B8%AA%E4%BD%93%E6%88%B7%E6%8C%87%E5%8D%97/id1664310297?i=1000662889398">E17 个体户自力：离职后，想在深圳做一个数字游民</a></li></ul><hr /><ul><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=n94ypQ-5gdA">程序员面试街道足球队</a></li><li>花果山大圣 - <a href="https://www.youtube.com/watch?v=6hzKtdzJrFg">funnyCoder12期-程序员的职业成长与自我驱动：Tinyfool大哥的20年技术与人生</a></li><li><a href="https://x.com/hzlzh/status/1810001817545347178">AlanBeck 新作，感受黄金分割之美</a></li><li>林亦LYi - <a href="https://www.youtube.com/watch?v=rzbbqjVLbJE">万字解析！库克终于把乔布斯的iPhone 4S做完了？</a></li><li>MASKED FORUM 假面圓桌派 - <a href="https://www.youtube.com/watch?v=OkTxLwqaIvY">【假面圓桌派】蘿蔔快跑武漢引爆無人駕駛熱潮，對比特斯拉 Robotaxi 的區別</a></li><li>MHYYYY - <a href="https://www.youtube.com/watch?v=hPYMUatzcY0">8小时工作制是社会主义与资本主义的共同追求——生产过剩|经济危机|失业潮与996|减少内卷才能提高工资</a></li><li>电影广角镜 - <a href="https://www.bilibili.com/video/BV1gE421A7ug/">沃尔特的谎言，从第一个到最后一个，IMDB满分《绝命毒师》的伏笔和隐喻24</a></li><li>郭云神奇 - <a href="https://www.bilibili.com/video/BV1RM4m117EG/">《大话西游》1个10倍慢放才能看清的细节！诡异3字揭开隐藏剧情？07</a></li></ul><h3 id="壁纸"><a class="markdownIt-Anchor" href="#壁纸"></a> 壁纸</h3><ul><li><a href="">必应 2024 年 5 月超高清无水印壁纸</a></li><li><a href="">必应 2024 年 6 月超高清无水印壁纸</a></li><li><a href="https://bear.app/wallpapers/#starlit-lullaby">Bear Wallpapers</a></li></ul><h3 id="其他有趣的"><a class="markdownIt-Anchor" href="#其他有趣的"></a> 其他有趣的</h3><ul><li>GitLab - <a href="https://learn.gitlab.com/allremote/remote-playbook">The Remote Playbook</a>: from a global leader in distributed work.</li><li>印记 - <a href="https://yinji.org/5178.html">笔记的方法：持续不断记录，意义自然浮现</a></li><li><a href="https://www.arno.org/on-the-origins-of-ds-store">On the origins of DS_store</a></li><li>久坐的朋友们一定要注意保护好前列腺啊 via <a href="https://x.com/gxgexiao">@gxgexiao</a><br /><img src="https://cdn.jsdelivr.net/gh/KiligWYu/Pics/2024/202407292306780.webp" alt="via @gxgexiao" /></li><li><a href="https://survey.stackoverflow.co/2024/">StackOverflow 2024 Developer Survey</a></li><li><a href="https://blog.hahaha.cc/life/33/">那些我喜欢的博主</a></li><li>Tw93 - <a href="https://tw93.fun/2024-05-08/sony.html">我居然用回有线耳机了</a></li></ul>]]></content>
    
    
    <summary type="html">上期还是 05.20 ，由于工作生活发生了较大变动，停更了两个多月了。我又开始了双城生活，不是郑州开封，而是开封上海，对，我又回上海了，要不是疫情，我可能早就又回上海了，趁现在，在上海再多发展些年。我现在基本上一周、两周就回家一次，坐普快，周五晚上回家，周日晚上回来，不影响白天上班，买不到卧铺就硬座。另外我还是有些分享欲的，碎周报也恢复更新。</summary>
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency 备忘清单</title>
    <link href="http://kiligwyu.com/concurrency/"/>
    <id>http://kiligwyu.com/concurrency/</id>
    <published>2024-07-06T07:39:14.000Z</published>
    <updated>2024-07-06T07:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0">异步函数</a><ul><li><a href="#%E5%BC%82%E6%AD%A5%E6%8A%9B%E5%87%BA%E5%87%BD%E6%95%B0">异步抛出函数</a></li><li><a href="#%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0">第一个异步函数</a></li><li><a href="#%E8%B0%83%E7%94%A8%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%83%BD%E6%88%90%E6%9C%AC">调用异步函数的性能成本</a></li></ul></li><li><a href="#%E5%BC%82%E6%AD%A5%E5%B1%9E%E6%80%A7">异步属性</a></li><li><a href="#%E4%BD%BF%E7%94%A8-async-let-%E8%B0%83%E7%94%A8%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0">使用 async let 调用异步函数</a><ul><li><a href="#wait-%E5%92%8C-async-let-%E7%9A%84%E5%8C%BA%E5%88%AB">wait 和 async let 的区别</a></li><li><a href="#async-var">async var？</a></li></ul></li><li><a href="#continuations">Continuations</a><ul><li><a href="#%E5%8F%AF%E4%BB%A5%E6%8A%9B%E5%87%BA%E9%94%99%E7%9A%84-continuations">可以抛出错的 Continuations</a></li><li><a href="#%E5%AD%98%E5%82%A8-continuations">存储 Continuations</a></li></ul></li><li><a href="#%E5%9C%A8%E4%B8%8D%E6%94%AF%E6%8C%81%E5%B9%B6%E5%8F%91%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8">在不支持并发的函数中进行异步调用</a></li><li><a href="#sequence-asyncsequence-%E5%92%8C-asyncstream">Sequence、AsyncSequence 和 AsyncStream</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-for-wait-%E5%BE%AA%E7%8E%AF-asyncsequence">使用 for wait 循环 AsyncSequence</a></li><li><a href="#%E4%BD%BF%E7%94%A8-map-filter-%E7%AD%89%E6%93%8D%E4%BD%9C-asyncsequence">使用 map ()、filter () 等操作 AsyncSequence</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E6%AD%A5%E5%BA%8F%E5%88%97">创建自定义异步序列</a></li><li><a href="#%E5%B0%86-asyncsequence-%E8%BD%AC%E6%8D%A2%E4%B8%BA-sequence">将 AsyncSequence 转换为 Sequence</a></li></ul></li><li><a href="#task">Task</a><ul><li><a href="#task-%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C">Task 的创建和运行</a></li><li><a href="#detached-task">Detached Task</a></li><li><a href="#%E4%BB%8E%E4%BB%BB%E5%8A%A1%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C">从任务中获取结果</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E4%BC%98%E5%85%88%E7%BA%A7">任务优先级</a></li><li><a href="#%E4%BC%98%E5%85%88%E7%BA%A7%E5%8D%87%E7%BA%A7">优先级升级</a></li><li><a href="#%E5%8F%96%E6%B6%88%E4%BB%BB%E5%8A%A1">取消任务</a></li><li><a href="#%E4%BC%91%E7%9C%A0%E4%BB%BB%E5%8A%A1">休眠任务</a></li><li><a href="#%E4%B8%BB%E5%8A%A8%E6%9A%82%E5%81%9C%E4%BB%BB%E5%8A%A1">主动暂停任务</a></li></ul></li><li><a href="#task-group">Task Group</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1%E7%BB%84%E5%B9%B6%E5%90%91%E5%85%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1">创建任务组并向其中添加任务</a></li><li><a href="#%E5%8F%96%E6%B6%88%E4%BB%BB%E5%8A%A1%E7%BB%84">取消任务组</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B">如何处理任务组中的不同结果类型</a></li></ul></li><li><a href="#swiftui-%E4%B8%AD%E7%9A%84-task-%E4%BF%AE%E9%A5%B0%E7%AC%A6">SwiftUI 中的 task() 修饰符</a></li><li><a href="#actors">Actors</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%9A%94%E7%A6%BB">函数参数隔离</a></li><li><a href="#%E9%83%A8%E5%88%86%E9%9A%94%E7%A6%BB">部分隔离</a></li><li><a href="#%E4%BD%BF%E7%94%A8-mainactor-%E5%9C%A8%E4%B8%BB%E9%98%9F%E5%88%97%E4%B8%8A%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81">使用 @MainActor 在主队列上运行代码</a></li><li><a href="#%E5%85%A8%E5%B1%80-actor-%E6%8E%A8%E6%96%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">全局 actor 推断的工作原理</a></li><li><a href="#actor-%E8%B7%B3%E8%B7%83">actor 跳跃</a></li><li><a href="#actors-classes-and-structs-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB">actors, classes, and structs 之间的区别</a></li></ul></li><li><a href="#%E5%8F%A6%E8%A7%81">另见</a></li></ul><p>本篇是 <a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a> 的学习笔记。简要记录，备忘清单。推荐看原教程，配合代码示例更佳清晰易懂。</p><hr /><blockquote><p>Concurrency is about dealing with many things at once, parallelism is about doing many things at once. Concurrency is a way to structure things so you can maybe use parallelism to do a better job. —— Rob Pike</p></blockquote><p>默认情况下，所有 Swift 函数都是同步的。同步函数会导致阻塞，从而导致性能问题。异步函数不会阻塞。</p><h2 id="异步函数"><a class="markdownIt-Anchor" href="#异步函数"></a> 异步函数</h2><p>通过关键字 <code>async</code> 来创建异步函数，在异步函数内部，可以使用 <code>await</code> 关键字来调用其他异步函数。</p><ul><li><code>async</code> 是函数类型的一部分。</li><li>用 <code>async</code> 标记函数意味着它可能会执行异步工作，而不是必须执行异步工作。同样， <code>throws</code> 也是如此 - 通过函数的某些路径可能会抛出异常，但其他路径可能不会。</li></ul><p>当使用 <code>await</code> 调用异步函数时，我们标记了一个挂起点，这是函数可以挂起自身的地方（实际上是停止运行），以便可以进行其他工作。在未来的某个时刻，该函数的工作完成，Swift 会将其从 “假死” 般的状态中唤醒，并继续工作。</p><ul><li>当一个异步函数被挂起时，所有调用它的异步函数也会被挂起。异步函数具有常规同步函数所没有的特殊暂停能力。正是由于这个原因，同步函数无法直接调用异步函数。</li><li>一个函数可以根据需要多次挂起，使用 <code>await</code> 关键字。</li><li>被挂起的函数不会阻塞它正在运行的线程，而是放弃该线程，以便 Swift 可以做其他工作。</li><li>当函数恢复时，它可能与以前一样在同一个线程上运行，但也可能不是。</li></ul><h3 id="异步抛出函数"><a class="markdownIt-Anchor" href="#异步抛出函数"></a> 异步抛出函数</h3><p>把函数标记为 <code>async throws</code> ，使用 <code>try await</code> 调用该函数。注意关键字的顺序，在函数定义中是 “异步，抛出”，但在调用站点是 “抛出，异步”。<code>try await</code> 不仅比 <code>await try</code> 更容易阅读，而且它也更能反映代码执行时实际发生的情况：我们正在等待某些工作完成，以及它何时完成完成后我们将检查它是否最终抛出错误。</p><blockquote><p>This order restriction is arbitrary, but it’s not harmful, and it eliminates the potential for stylistic debates.</p></blockquote><h3 id="第一个异步函数"><a class="markdownIt-Anchor" href="#第一个异步函数"></a> 第一个异步函数</h3><p>如果只有异步函数可以调用其他异步函数，那么是什么调用了第一个异步函数？</p><p>有三种主要方式：</p><ol><li>在使用 <code>@main</code> 属性的简单命令行程序中，你可以将 <code>main()</code> 方法声明为异步方法。这意味着您的程序将立即启动到异步函数，因此你可以自由调用其他异步函数。</li><li>在使用 SwiftUI 等构建的应用程序中，框架本身有多个可以触发异步函数的地方。例如， <code>refreshable()</code> 和 <code>task()</code> 修饰符都可以自由调用异步函数。</li><li>Swift 提供了专用的 <code>Task</code> API。</li></ol><h3 id="调用异步函数的性能成本"><a class="markdownIt-Anchor" href="#调用异步函数的性能成本"></a> 调用异步函数的性能成本</h3><p>同步和异步函数在内部使用不同的调用约定，异步变体的效率稍低。</p><p>每当我们使用 <code>await</code> 调用异步函数时，我们都会在代码中标记一个潜在的挂起点，Swift 无法在编译时判断 <code>await</code> 调用是否会挂起，运行时发生的情况取决于调用是否挂起：</p><ul><li>如果发生暂停，那么 Swift 将暂停该函数及其所有调用者，这会产生很小的性能成本。</li><li>如果没有发生暂停，则不会发生暂停，并且您的函数将继续以与同步函数相同的效率和时序运行。</li></ul><p>异步函数还有一个副作用：使用 <code>await</code> 不会导致您的代码在继续之前等待一个运行循环。相较于 <code>DispatchQueue.main.async &#123; … &#125;</code> 使用 <code>await</code> ，代码将立即执行。</p><h2 id="异步属性"><a class="markdownIt-Anchor" href="#异步属性"></a> 异步属性</h2><p>Swift 中，只读计算属性也可以是异步的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contents: <span class="type">T</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// more code to come</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-async-let-调用异步函数"><a class="markdownIt-Anchor" href="#使用-async-let-调用异步函数"></a> 使用 async let 调用异步函数</h2><p>有时您想同时运行多个异步操作，然后等待它们的结果返回，最简单的方法是使用 <code>async let</code> 。比如同时发起两个网络请求：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">loadData</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> (userData, <span class="keyword">_</span>) <span class="operator">=</span> <span class="type">URLSession</span>.shared.data(from: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-24601.json&quot;</span>)<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> (messageData, <span class="keyword">_</span>) <span class="operator">=</span> <span class="type">URLSession</span>.shared.data(from: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-messages.json&quot;</span>)<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// more code to come</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上面的代码：</p><ul><li>即使 <code>data(from:)</code> 方法是异步的，我们也不需要在它之前使用 <code>await</code> 因为这是由 <code>async let</code> 暗示的。</li><li><code>data(from:)</code> 方法也会抛出异常，但我们不需要使用 <code>try</code> 来执行它，因为它会被推迟到我们真正想要读取其返回值的时候。Swift 编译器将自动跟踪哪些 <code>async let</code> 常量可能引发错误，并在读取其值时强制使用 <code>try</code> 。</li><li>这两个网络调用都会立即开始，但可能以任何顺序完成。</li></ul><h3 id="wait-和-async-let-的区别"><a class="markdownIt-Anchor" href="#wait-和-async-let-的区别"></a> wait 和 async let 的区别</h3><p><code>await</code> 会等待工作完成，以便我们可以读取其结果，而 <code>async let</code> 则不会。</p><p>例如，如果您想要发出两个网络请求，其中一个请求与另一个请求相关，那么应当使用 <code>await</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first <span class="operator">=</span> <span class="keyword">await</span> requestFirstData()</span><br><span class="line"><span class="keyword">let</span> second <span class="operator">=</span> <span class="keyword">await</span> requestSecondData(using: first)</span><br></pre></td></tr></table></figure><p>而如果两个网络请求没有依赖关系，则可以使用 <code>async let</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getAppData</span>() <span class="keyword">async</span> -&gt; ([<span class="type">News</span>], [<span class="type">Weather</span>], <span class="type">Bool</span>) &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> news <span class="operator">=</span> getNews()</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> weather <span class="operator">=</span> getWeather()</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">let</span> hasUpdate <span class="operator">=</span> getAppUpdateAvailable()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> (news, weather, hasUpdate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-var"><a class="markdownIt-Anchor" href="#async-var"></a> async var？</h3><p>Swift 的 <code>async let</code> 语法提供了简短、有用的语法，可以同时运行大量工作，让我们可以稍后等待它们。但是，它只能用作 <code>async let</code> - 不可能使用 <code>async var</code>。</p><p>如果使用 <code>async var</code> 异步创建一个变量，然后修改变量的值，那么我们取消了异步工作吗？如果不是，当异步工作完成时，它会覆盖我们的新值吗？即使我们明确设置了值，在读取值时是否仍然需要使用 await ？所以只能使用 <code>async let</code>。</p><h2 id="continuations"><a class="markdownIt-Anchor" href="#continuations"></a> Continuations</h2><p>使用 Continuations，使我们能够在带有完成处理程序的旧函数和新异步代码之间创建一座桥梁。</p><ul><li><a href="https://developer.apple.com/documentation/swift/checkedcontinuation"><code>CheckedContinuation</code></a>: A mechanism to interface between synchronous and asynchronous code, logging correctness violations.</li><li><a href="https://developer.apple.com/documentation/swift/unsafecontinuation"><code>UnsafeContinuation</code></a>: A mechanism to interface between synchronous and asynchronous code, without correctness checking.</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Message</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> from: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">Message</span>]) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-messages.json&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; data, <span class="keyword">_</span>, <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Message</span>].<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">        completion(messages)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completion([])</span><br><span class="line">  &#125;.resume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>() <span class="keyword">async</span> -&gt; [<span class="type">Message</span>] &#123;</span><br><span class="line">  <span class="keyword">await</span> withCheckedContinuation &#123; continuation <span class="keyword">in</span></span><br><span class="line">    fetchMessages &#123; messages <span class="keyword">in</span></span><br><span class="line">      continuation.resume(returning: messages)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">await</span> fetchMessages()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Downloaded <span class="subst">\(messages.count)</span> messages.&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意，在程序的每个执行路径中，必须准确地调用一次 resume 方法。 否则会造成 continuation 泄露，</p><p>如果您仔细检查了代码并且确定它是正确的，那么将 <code>withCheckedContinuation()</code> 函数替换为对 <code>withUnsafeContinuation()</code> 的调用，其工作原理完全相同方式，但不会增加检查您是否正确使用延续的运行时成本。</p><h3 id="可以抛出错的-continuations"><a class="markdownIt-Anchor" href="#可以抛出错的-continuations"></a> 可以抛出错的 Continuations</h3><p><code>withCheckedThrowingContinuation()</code> 和 <code>withUnsafeThrowingContinuation()</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Message</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> from: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>(<span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">Message</span>]) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/user-messages.json&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; data, <span class="keyword">_</span>, <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Message</span>].<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">        completion(messages)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completion([])</span><br><span class="line">  &#125;.resume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An example error we can throw</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">FetchError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> noMessages</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchMessages</span>() <span class="keyword">async</span> -&gt; [<span class="type">Message</span>] &#123;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="keyword">await</span> withCheckedThrowingContinuation &#123; continuation <span class="keyword">in</span></span><br><span class="line">      fetchMessages &#123; messages <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> messages.isEmpty &#123;</span><br><span class="line">          continuation.resume(throwing: <span class="type">FetchError</span>.noMessages)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          continuation.resume(returning: messages)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="type">Message</span>(id: <span class="number">1</span>, from: <span class="string">&quot;Tom&quot;</span>, message: <span class="string">&quot;Welcome to MySpace! I&#x27;m your new friend.&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messages <span class="operator">=</span> <span class="keyword">await</span> fetchMessages()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Downloaded <span class="subst">\(messages.count)</span> messages.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="存储-continuations"><a class="markdownIt-Anchor" href="#存储-continuations"></a> 存储 Continuations</h3><p>通过将 Continuations 存储为属性，我们就可以在多个不同的地方恢复它。</p><p>下面以 <code>LocationManager</code> 为例，把 <code>continuation</code> 存储在属性中，位置更新成功或失败是在两个代理方法中，分别在这两个方法中恢复 continuation。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LocationManager</span>: <span class="title class_">NSObject</span>, <span class="title class_">ObservableObject</span>, <span class="title class_">CLLocationManagerDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> locationContinuation: <span class="type">CheckedContinuation</span>&lt;<span class="type">CLLocationCoordinate2D</span>?, <span class="type">Error</span>&gt;?</span><br><span class="line">  <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">CLLocationManager</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    manager.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">requestLocation</span>() <span class="keyword">async</span> <span class="keyword">throws</span> -&gt; <span class="type">CLLocationCoordinate2D</span>? &#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="keyword">await</span> withCheckedThrowingContinuation &#123; continuation <span class="keyword">in</span></span><br><span class="line">      locationContinuation <span class="operator">=</span> continuation</span><br><span class="line">      manager.requestLocation()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">locationManager</span>(<span class="keyword">_</span> <span class="params">manager</span>: <span class="type">CLLocationManager</span>, <span class="params">didUpdateLocations</span> <span class="params">locations</span>: [<span class="type">CLLocation</span>]) &#123;</span><br><span class="line">    locationContinuation<span class="operator">?</span>.resume(returning: locations.first<span class="operator">?</span>.coordinate)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">locationManager</span>(<span class="keyword">_</span> <span class="params">manager</span>: <span class="type">CLLocationManager</span>, <span class="params">didFailWithError</span> <span class="params">error</span>: <span class="type">Error</span>) &#123;</span><br><span class="line">    locationContinuation<span class="operator">?</span>.resume(throwing: error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> locationManager <span class="operator">=</span> <span class="type">LocationManager</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">LocationButton</span> &#123;</span><br><span class="line">      <span class="type">Task</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> location <span class="operator">=</span> <span class="keyword">try?</span> <span class="keyword">await</span> locationManager.requestLocation() &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;Location: <span class="subst">\(location)</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;Location unknown.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(height: <span class="number">44</span>)</span><br><span class="line">    .foregroundColor(.white)</span><br><span class="line">    .clipShape(<span class="type">Capsule</span>())</span><br><span class="line">    .padding()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在不支持并发的函数中进行异步调用"><a class="markdownIt-Anchor" href="#在不支持并发的函数中进行异步调用"></a> 在不支持并发的函数中进行异步调用</h2><p>通过使用 <code>Task</code> 来解决问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">doAsyncWork</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Doing async work&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">doRegularWork</span>() &#123;</span><br><span class="line">  <span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> doAsyncWork()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doRegularWork()</span><br></pre></td></tr></table></figure><h2 id="sequence-asyncsequence-和-asyncstream"><a class="markdownIt-Anchor" href="#sequence-asyncsequence-和-asyncstream"></a> Sequence、AsyncSequence 和 AsyncStream</h2><ul><li><code>Sequence</code> 协议，它不断返回值，直到通过返回 <code>nil</code> 终止序列。</li><li><code>AsyncSequence</code> 协议几乎与 <code>Sequence</code> 相同，但序列中的每个元素都是异步返回的。<ul><li>从异步序列读取值必须使用 `await</li></ul></li><li>更高级的异步序列（<code>AsyncStream</code>）生成值的速度可能比您读取它们的速度快，在这种情况下，您可以丢弃额外的值或缓存它们以便稍后读取。`</li></ul><h3 id="使用-for-wait-循环-asyncsequence"><a class="markdownIt-Anchor" href="#使用-for-wait-循环-asyncsequence"></a> 使用 for wait 循环 AsyncSequence</h3><blockquote><p><a href="https://developer.apple.com/documentation/foundation/url/3767315-lines">URL lines</a>: The URL’s resource data, as an asynchronous sequence of lines of text.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fetchUsers</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/users.csv&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> line <span class="keyword">in</span> url.lines &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received user: <span class="subst">\(line)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try?</span> <span class="keyword">await</span> fetchUsers()</span><br></pre></td></tr></table></figure><p>使用异步序列可以有效地生成一个迭代器，然后重复调用它的 <code>next()</code> 直到它返回 <code>nil</code> ，此时循环结束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printUsers</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/users.csv&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> iterator <span class="operator">=</span> url.lines.makeAsyncIterator()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> line <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> iterator.next() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first user is <span class="subst">\(line)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span> <span class="operator">...</span> <span class="number">5</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> line <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> iterator.next() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;User #<span class="subst">\(i)</span>: <span class="subst">\(line)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> remainingResults <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> iterator.next() &#123;</span><br><span class="line">    remainingResults.append(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;There were <span class="subst">\(remainingResults.count)</span> other users.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try?</span> <span class="keyword">await</span> printUsers()</span><br></pre></td></tr></table></figure><h3 id="使用-map-filter-等操作-asyncsequence"><a class="markdownIt-Anchor" href="#使用-map-filter-等操作-asyncsequence"></a> 使用 map ()、filter () 等操作 AsyncSequence</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getQuotes</span>() <span class="keyword">async</span> -&gt; <span class="keyword">some</span> <span class="type">AsyncSequence</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/quotes.txt&quot;</span>)<span class="operator">!</span></span><br><span class="line">  <span class="keyword">let</span> anonymousQuotes <span class="operator">=</span> url.lines.filter &#123; <span class="variable">$0</span>.contains(<span class="string">&quot;Anonymous&quot;</span>) &#125;</span><br><span class="line">  <span class="keyword">let</span> topAnonymousQuotes <span class="operator">=</span> anonymousQuotes.prefix(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">let</span> shoutingTopAnonymousQuotes <span class="operator">=</span> topAnonymousQuotes.map(\.localizedUppercase)</span><br><span class="line">  <span class="keyword">return</span> shoutingTopAnonymousQuotes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> getQuotes()</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> quote <span class="keyword">in</span> result &#123;</span><br><span class="line">    <span class="built_in">print</span>(quote)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Error fetching quotes&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，所有转换都创建了新的异步序列，因此我们不需要将它们与 <code>await</code> 一起使用，但许多转换也会生成单个值。这些必须使用 <code>await</code> 才能挂起，直到返回序列的所有部分，并且如果序列抛出，可能还需要使用 <code>try</code>。例如， <code>allSatisfy()</code>，检查异步序列中的所有元素是否都通过您选择的谓词。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">checkQuotes</span>() <span class="keyword">async</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/quotes.txt&quot;</span>)<span class="operator">!</span></span><br><span class="line">  <span class="keyword">let</span> noShortQuotes <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> url.lines.allSatisfy &#123; <span class="variable">$0</span>.count <span class="operator">&gt;</span> <span class="number">30</span> &#125;</span><br><span class="line">  <span class="built_in">print</span>(noShortQuotes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try?</span> <span class="keyword">await</span> checkQuotes()</span><br></pre></td></tr></table></figure><p>其他类似的函数也是如此，例如 <code>min()</code> 、 <code>max()</code> 和 <code>reduce()</code>。</p><h3 id="创建自定义异步序列"><a class="markdownIt-Anchor" href="#创建自定义异步序列"></a> 创建自定义异步序列</h3><p>创建 <code>AsyncSequence</code>：</p><ul><li>需要遵守 <code>AsyncSequence</code> 和 <code>AsyncIteratorProtocol</code> 协议</li><li>迭代器的 <code>next()</code> 方法必须标记为 <code>async</code></li><li>需要创建一个 <code>makeAsyncIterator()</code> 方法</li></ul><p>下面是一个简单的每次调用 next() 时数字都会加倍的异步序列：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DoubleGenerator</span>: <span class="title class_">AsyncSequence</span>, <span class="title class_">AsyncIteratorProtocol</span> &#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Element</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> current <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">next</span>() <span class="keyword">async</span> -&gt; <span class="type">Element</span>? &#123;</span><br><span class="line">    <span class="keyword">defer</span> &#123; current <span class="operator">&amp;*=</span> <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> current</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">makeAsyncIterator</span>() -&gt; <span class="type">DoubleGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sequence <span class="operator">=</span> <span class="type">DoubleGenerator</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> number <span class="keyword">in</span> sequence &#123;</span><br><span class="line">  <span class="built_in">print</span>(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另：在 Swift 编程语言中，<code>&amp;*=</code> 是一个复合赋值运算符，用于执行带符号整数的溢出乘法操作。该运算符结合了溢出乘法运算符 <code>&amp;*</code> 和赋值运算符 <code>=</code>。它可以确保在计算结果超出变量存储范围时，不会抛出溢出错误，而是保留溢出的结果。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span> <span class="operator">=</span> <span class="type">Int</span>.max</span><br><span class="line">a <span class="operator">&amp;*=</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// 输出为 -2</span></span><br></pre></td></tr></table></figure><h3 id="将-asyncsequence-转换为-sequence"><a class="markdownIt-Anchor" href="#将-asyncsequence-转换为-sequence"></a> 将 AsyncSequence 转换为 Sequence</h3><p>最简单的方法是在序列上调用 <code>reduce(into:)</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">AsyncSequence</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">collect</span>() <span class="keyword">async</span> <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="keyword">await</span> reduce(into: [<span class="type">Element</span>]()) &#123; <span class="variable">$0</span>.append(<span class="variable">$1</span>) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="task"><a class="markdownIt-Anchor" href="#task"></a> Task</h2><p>在 Swift 中使用 <code>async/await</code> 允许我们编写易于阅读和理解的异步代码，但它本身仍然会按顺序执行。为了创建实际的并发性（提供同时运行多个工作的能力），Swift 为我们提供了两种特定的类型： <code>Task</code> 和 <code>TaskGroup</code>。</p><p>如果只是开始一两个独立的工作，那么 <code>Task</code> 是正确的选择。如果想将一项作业拆分为多个并发操作，那么 <code>TaskGroup</code> 更适合。</p><p><code>Task</code> 和 <code>TaskGroup</code> 的优先级从高到低依次是 <code>high</code>、<code>medium</code>、<code>low</code>、<code>background</code>。与 DispatchQueue 的 quality-of-service 相比，<code>.high</code> 等同于 <code>.userInitiated</code>，<code>.low</code> 等同于 <code>.utility</code>。</p><h3 id="task-的创建和运行"><a class="markdownIt-Anchor" href="#task-的创建和运行"></a> Task 的创建和运行</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NewsItem</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HighScore</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> score: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchUpdates</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newsTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; [<span class="type">NewsItem</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/headlines.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">NewsItem</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> highScoreTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; [<span class="type">HighScore</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/scores.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">HighScore</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> news <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> newsTask.value</span><br><span class="line">    <span class="keyword">let</span> highScores <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> highScoreTask.value</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Latest news loaded with <span class="subst">\(news.count)</span> items.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> topScore <span class="operator">=</span> highScores.first &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(topScore.name)</span> has the highest score with <span class="subst">\(topScore.score)</span>, out of <span class="subst">\(highScores.count)</span> total results.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;There was an error loading user data.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> fetchUpdates()</span><br></pre></td></tr></table></figure><ul><li>Taxks 并不总是需要返回值，这里的返回值是 <code>[NewsItem]</code>；</li><li>一旦创建了任务，它就会开始运行；</li><li>如果要读取任务的返回值，则需要使用 <code>await</code> 访问其 <code>value</code> 属性。</li></ul><h3 id="detached-task"><a class="markdownIt-Anchor" href="#detached-task"></a> Detached Task</h3><p><code>Task</code> 会继承并运行在调用它的当前任务的执行环境和优先级下。它通常用于创建一个附属于当前上下文的任务，这样可以共享当前上下文的一些特性，例如：Actor 的隔离状态或结构化并发的范围。</p><p><code>Task.detached</code> 会创建一个与当前上下文分离的独立任务。它不会继承创建它的上下文的优先级和任务状态，而是作为一个全新的任务来执行。通常在需要完全独立的并发执行时使用 <code>Task.detached</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> model <span class="operator">=</span> <span class="type">ViewModel</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Authenticate&quot;</span>, action: doWork)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">doWork</span>() &#123;</span><br><span class="line">    <span class="type">Task</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10_000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In Task 1: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Task</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10_000</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In Task 2: <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中的两个 <code>Task</code>，但它们也是按顺序执行的，因为 <code>@StateObject</code> 视图模型将整个视图强制到 <code>main actor</code> 上，这意味着它一次只能做一件事。这时，将 <code>Task</code> 更改为 <code>Task.detached</code>，这两个任务就可以同时运行。</p><h3 id="从任务中获取结果"><a class="markdownIt-Anchor" href="#从任务中获取结果"></a> 从任务中获取结果</h3><p>如果你想直接读取一个任务（Task）的返回值，应该使用 <code>await</code> 来读取其值，或者如果它包含抛出操作（throwing operation），则使用 <code>try await</code>。然而，所有任务也都有一个 <code>result</code> 属性，该属性返回一个 Swift 的 <code>Result</code> 结构实例，泛型化为任务返回的类型以及它是否可能包含错误。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">LoadError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> fetchFailed, decodeFailed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fetchQuotes</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> downloadTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/quotes.txt&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> data: <span class="type">Data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">LoadError</span>.fetchFailed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> string <span class="operator">=</span> <span class="type">String</span>(data: data, encoding: .utf8) &#123;</span><br><span class="line">      <span class="keyword">return</span> string</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">LoadError</span>.decodeFailed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> downloadTask.result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> string <span class="operator">=</span> <span class="keyword">try</span> result.get()</span><br><span class="line">    <span class="built_in">print</span>(string)</span><br><span class="line">  &#125; <span class="keyword">catch</span> <span class="type">LoadError</span>.fetchFailed &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unable to fetch the quotes.&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> <span class="type">LoadError</span>.decodeFailed &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unable to convert quotes to text.&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unknown error.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> fetchQuotes()</span><br></pre></td></tr></table></figure><h3 id="任务优先级"><a class="markdownIt-Anchor" href="#任务优先级"></a> 任务优先级</h3><p>创建一个具有优先级的任务：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span>(priority: .high) &#123; () -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">  <span class="comment">// More code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然您可以在创建任务时直接为其分配优先级，但如果不指定优先级，Swift 将遵循三个规则自动确定优先级：</p><ol><li>如果该任务是从另一个任务创建的，则子任务将继承父任务的优先级。</li><li>如果新任务是直接从主线程而不是任务创建的，则会自动为其分配最高优先级 <code>.userInitiated</code> 。</li><li>如果新任务不是由另一个任务或主线程创建的，Swift 将尝试查询线程的优先级或为其赋予 <code>nil</code> 优先级。</li></ol><p>任何任务都可以使用 <code>Task.currentPriority</code> 查询其当前优先级。</p><h3 id="优先级升级"><a class="markdownIt-Anchor" href="#优先级升级"></a> 优先级升级</h3><p>每个任务都可以创建为具有特定的优先级，也可以从其他地方继承优先级。但在两种特定情况下，Swift 会提高任务的优先级，以便能够更快地完成。</p><ol><li>如果较高优先级任务 A 开始等待较低优先级任务 B 的结果，则任务 B 的优先级将提升到与任务 A 相同的优先级。</li><li>如果较低优先级的任务 A 已开始在某个 Actor 上运行，并且较高优先级的任务 B 已在该 Actor 上排队，则任务 A 的优先级将提升以匹配任务 B。</li></ol><p>注意，第 2 种情况下，低优先级任务，其优先级会升级，但不会改变其 <code>currentPriority</code> 的值。</p><h3 id="取消任务"><a class="markdownIt-Anchor" href="#取消任务"></a> 取消任务</h3><p>虽然我们可以告诉任务停止工作，但任务本身可以完全忽略该指令并根据需要继续执行。</p><ol><li>可以通过调用任务的 <code>cancel()</code> 方法显式取消任务。</li><li>可以检查 <code>Task.isCancelled</code> 来确定任务是否已被取消。</li><li>可以调用 <code>Task.checkCancellation()</code> 方法，如果任务已取消，该方法将抛出 <code>CancellationError</code>，否则不做任何操作。</li><li>Foundation 的某些部分会自动检查任务取消情况，即使没有你的输入也会抛出它们自己的取消错误</li><li>如果你使用 <code>Task.sleep()</code> 来等待一段时间，取消你的任务将自动终止等待并抛出 <code>CancellationError</code>。</li><li>如果任务是一个组的一部分，并且组的任何部分抛出错误，其他任务将被取消并等待。</li><li>如果你使用 SwiftUI 的 <code>task()</code> 修饰符启动了一个任务，该任务将在视图消失时自动取消。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getAverageTemperature</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fetchTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">Double</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/readings.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">    <span class="keyword">try</span> <span class="type">Task</span>.checkCancellation()</span><br><span class="line">    <span class="keyword">let</span> readings <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Double</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> readings.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line">    <span class="keyword">return</span> sum <span class="operator">/</span> <span class="type">Double</span>(readings.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> fetchTask.value</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Average temperature: <span class="subst">\(result)</span>&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to get data.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> getAverageTemperature()</span><br></pre></td></tr></table></figure><p><code>URLSession.shared.data(from:)</code> 存在隐式取消，其调用将在继续之前检查其任务是否仍处于活动状态。如果任务已被取消，<code>data(from:)</code> 将自动抛出 <code>URLError</code> 并且任务的其余部分将不会执行。<br />这里使用 <code>Task.checkCancellation()</code>，以在网络请求后显式检查取消。</p><p>下面的代码在任务创建后立即取消任务，并返回默认值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getAverageTemperature</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fetchTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">Double</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/readings.json&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">      <span class="keyword">if</span> <span class="type">Task</span>.isCancelled &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> readings <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Double</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">      <span class="keyword">let</span> sum <span class="operator">=</span> readings.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line">      <span class="keyword">return</span> sum <span class="operator">/</span> <span class="type">Double</span>(readings.count)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetchTask.cancel()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> fetchTask.value</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Average temperature: <span class="subst">\(result)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> getAverageTemperature()</span><br></pre></td></tr></table></figure><p>现在我们有一个通过 <code>data(from:)</code> 调用的隐式取消点，以及一个通过 <code>Task.isCancelled</code> 检查的显式取消点。如果其中任何一个被触发，任务将返回 0 而不是抛出错误。</p><h3 id="休眠任务"><a class="markdownIt-Anchor" href="#休眠任务"></a> 休眠任务</h3><p>使当前任务休眠至少 3 秒：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">await</span> <span class="type">Task</span>.sleep(nanoseconds: <span class="number">3_000_000_000</span>)</span><br></pre></td></tr></table></figure><ul><li>需要使用 <code>await</code> 调用 <code>Task.sleep()</code>；</li><li>需要使用 <code>try</code> ，因为 <code>Task.sleep()</code> 会自动检查取消，如果任务被取消，将会抛出一个 <code>CancellationError</code> 错误。</li></ul><p>注意：调用 <code>Task.sleep()</code> 将使当前任务至少休眠您要求的时间，而不是您要求的确切时间。因为当睡眠结束时系统可能正忙于做其他工作。</p><p>另外，与使线程休眠不同，<code>Task.sleep()</code> 不会阻塞底层线程，因此在需要时它可以从其他地方获取工作。</p><h3 id="主动暂停任务"><a class="markdownIt-Anchor" href="#主动暂停任务"></a> 主动暂停任务</h3><p>可以调用 <code>Task.yield()</code> 来自动挂起当前任务。但调用 <code>yield()</code> 并不总是意味着任务会停止运行：如果它的优先级高于其他等待的任务，你的任务完全有可能立即恢复工作。将其视为一种指导——我们只是给 Swift 一个临时执行其他任务的机会，而不是强制它这样做。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">factors</span>(<span class="params">for</span> <span class="params">number</span>: <span class="type">Int</span>) <span class="keyword">async</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> result <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> check <span class="keyword">in</span> <span class="number">1</span> <span class="operator">...</span> number &#123;</span><br><span class="line">    <span class="keyword">if</span> number.isMultiple(of: check) &#123;</span><br><span class="line">      result.append(check)</span><br><span class="line">      <span class="keyword">await</span> <span class="type">Task</span>.yield()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> factors <span class="operator">=</span> <span class="keyword">await</span> factors(for: <span class="number">120</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Found <span class="subst">\(factors.count)</span> factors for 120.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="task-group"><a class="markdownIt-Anchor" href="#task-group"></a> Task Group</h2><h3 id="创建任务组并向其中添加任务"><a class="markdownIt-Anchor" href="#创建任务组并向其中添加任务"></a> 创建任务组并向其中添加任务</h3><p>并不是直接创建 <code>TaskGroup</code> 实例，而是通过调用 <code>withTaskGroup(of:)</code> 函数，并告诉它任务组将返回的数据类型。</p><p>下面是一个简单的示例，它返回 5 个常量字符串，将它们添加到一个数组中，然后将该数组连接到一个字符串中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printMessage</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> string <span class="operator">=</span> <span class="keyword">await</span> withTaskGroup(of: <span class="type">String</span>.<span class="keyword">self</span>) &#123; group -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    group.addTask &#123; <span class="string">&quot;Hello&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;From&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;A&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;Task&quot;</span> &#125;</span><br><span class="line">    group.addTask &#123; <span class="string">&quot;Group&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> collected <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> value <span class="keyword">in</span> group &#123;</span><br><span class="line">      collected.append(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> collected.joined(separator: <span class="string">&quot; &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(string)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> printMessage()</span><br></pre></td></tr></table></figure><ol><li>我们必须指定任务组将返回的数据的确切类型，在我们的例子中是 <code>String.self</code> ，以便每个子任务都可以返回一个字符串。</li><li>我们需要使用 <code>group -&gt; String in</code> 准确指定组的返回值。</li><li>对于要添加到组中的每个任务，可以调用 <code>addTask()</code>。</li><li>任务组符合 <code>AsyncSequence</code> ，因此我们可以使用 <code>for await</code> 或重复调用 <code>group.next()</code> 从其子级读取所有值。</li><li>因为整个任务组是异步执行的，所以我们必须使用 <code>await</code> 来调用它。</li><li>注意返回的结果是按完成顺序而不是创建的顺序。</li><li>使用 <code>withTaskGroup()</code> 创建的任务不能抛出错误。如果您希望它们能够抛出向上冒泡的错误（即在任务组之外处理的错误），您应该使用 <code>withThrowingTaskGroup()</code> 来代替。</li></ol><p>无论您使用的是抛出任务还是非抛出任务，组中的所有任务都必须在组返回之前完成。您在这里有三个选择：</p><ol><li>等待组中的所有任务完成。</li><li>调用 <code>waitForAll()</code> 将自动等待您未明确等待的任务，并丢弃它们返回的任何结果。</li><li>如果您没有显式等待任何子任务，它们将被隐式等待 - Swift 无论如何都会等待它们，即使您没有使用它们的返回值。</li></ol><h3 id="取消任务组"><a class="markdownIt-Anchor" href="#取消任务组"></a> 取消任务组</h3><p>Swift 的任务组可以通过以下三种方式之一取消：</p><ol><li>如果任务组的父任务被取消。</li><li>如果您在组上明确调用 <code>cancelAll()</code>。</li><li>如果您的子任务之一引发未捕获的错误，则所有剩余任务将被隐式取消。</li></ol><p>首先，调用 <code>cancelAll()</code> 将取消所有剩余的任务。与独立任务一样，取消任务组是合作性的：你的子任务可以使用 <code>Task.isCancelled</code> 或 <code>Task.checkCancellation()</code> 来检查是否被取消，但如果它们愿意，也可以完全忽略取消操作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printMessage</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">String</span>.<span class="keyword">self</span>) &#123; group -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    group.addTask &#123;</span><br><span class="line">      <span class="string">&quot;Testing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    group.addTask &#123;</span><br><span class="line">      <span class="string">&quot;Group&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    group.addTask &#123;</span><br><span class="line">      <span class="string">&quot;Cancellation&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    group.cancelAll()</span><br><span class="line">    <span class="keyword">var</span> collected <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> <span class="keyword">try</span> <span class="keyword">await</span> value <span class="keyword">in</span> group &#123;</span><br><span class="line">        collected.append(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> collected.joined(separator: <span class="string">&quot; &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> printMessage()</span><br></pre></td></tr></table></figure><p>上面的代码，在创建所有三个任务后立即调用 <code>cancelAll()</code>，但是当代码运行时，您仍然会看到所有三个字符串都打印出来。因为取消任务组是合作性的，所以除非你添加的任务隐式或显式地检查取消状态，否则单独调用 <code>cancelAll()</code> 并不会有太大作用。</p><p>尝试将第一个 <code>addTask()</code> 调用替换为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group.addTask &#123;</span><br><span class="line">  <span class="keyword">try</span> <span class="type">Task</span>.checkCancellation()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Testing&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现其结果还是不确定的，这是因为：Swift 将立即启动所有三个任务，它们可能全部并行运行，尽管我们立即调用 <code>cancelAll()</code>，但某些任务可能已经开始运行。</p><p>请记住，调用 <code>cancelAll()</code> 只会取消剩余的任务，这意味着它不会撤销已经完成的工作。即便如此，取消也是合作性的，因此你需要确保你添加到组中的任务会检查取消状态。</p><h3 id="如何处理任务组中的不同结果类型"><a class="markdownIt-Anchor" href="#如何处理任务组中的不同结果类型"></a> 如何处理任务组中的不同结果类型</h3><p>Swift 任务组中的每个任务必须返回与组中所有其他任务相同类型的数据，如果需要一个任务组来处理多种不同类型的数据，如果可以的话，您应该考虑使用 <code>async let</code> 来实现并发。</p><p>还有一个解决方案：创建一个具有关联值的枚举，该值包装您想要返回的基础数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">FetchResult</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> username(<span class="type">String</span>)</span><br><span class="line">  <span class="keyword">case</span> favorites(<span class="type">Set</span>&lt;<span class="type">Int</span>&gt;)</span><br><span class="line">  <span class="keyword">case</span> messages([<span class="type">Message</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">loadUser</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> user <span class="operator">=</span> <span class="keyword">await</span> withThrowingTaskGroup(of: <span class="type">FetchResult</span>.<span class="keyword">self</span>) &#123; <span class="keyword">_</span> -&gt; <span class="type">User</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// more code here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> loadUser()</span><br></pre></td></tr></table></figure><h2 id="swiftui-中的-task-修饰符"><a class="markdownIt-Anchor" href="#swiftui-中的-task-修饰符"></a> SwiftUI 中的 task() 修饰符</h2><p>SwiftUI 提供了一个 <code>task()</code> 修饰符，一旦视图出现，它就会启动一个新的分离任务，并在视图消失时自动取消该任务。</p><ol><li>最简单的也是常用的，在 <code>task()</code> 中加载视图初始数据。</li><li>更高级的 <code>task()</code> 用法是附加某种 <code>Equatable</code> 的标识值 <code>.task(id:)</code> ——当该值发生变化时，SwiftUI 会自动取消之前的任务，并使用新值创建一个新任务。</li><li><code>task()</code> 的一个特别有趣的用例是与连续生成值的 <code>AsyncSequence</code> 集合一起使用。</li></ol><h2 id="actors"><a class="markdownIt-Anchor" href="#actors"></a> Actors</h2><p>Swift 的 actors 在概念上类似于类，但在并发环境中使用是安全的。这种安全性是因为 Swift 自动确保没有两段代码试图同时访问 actor 的数据——这是由编译器强制实现的，而不是要求开发人员编写使用锁等系统的样板代码。</p><ul><li>Actors 是使用 <code>actor</code> 关键字创建的。</li><li>Actors 是引用类型。</li><li>Actors 具有许多与类相同的特性：你可以为它们定义属性、方法（异步或其他方法）、初始化器和下标，它们可以遵循协议，并且可以是泛型。</li><li>Actors 不支持继承，因此它们不能有便利初始化器，也不支持 <code>final</code> 或 <code>override</code>。</li><li>所有 actors 会自动遵循 <code>Actor</code> 协议，而其他类型不能使用该协议。这使你可以编写仅限于与 actor 一起工作的代码。</li></ul><p>除此之外，actor 还有一个核心行为：如果你尝试读取 actor 的变量属性或调用其方法，并且是在 actor 外部进行的，那么你必须使用 <code>await</code> 以异步方式进行。</p><p>下面是一个简单的示例。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> score <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">printScore</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My score is <span class="subst">\(score)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">copyScore</span>(<span class="params">from</span> <span class="params">other</span>: <span class="type">User</span>) <span class="keyword">async</span> &#123;</span><br><span class="line">    score <span class="operator">=</span> <span class="keyword">await</span> other.score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actor1 <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"><span class="keyword">let</span> actor2 <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">print</span>(actor1.score)</span><br><span class="line"><span class="keyword">await</span> actor1.copyScore(from: actor2)</span><br></pre></td></tr></table></figure><p>从 actor 外部写入属性是不允许的，无论是否使用 <code>await</code>。</p><h3 id="函数参数隔离"><a class="markdownIt-Anchor" href="#函数参数隔离"></a> 函数参数隔离</h3><p>属于 actor 的任何属性和方法都是隔离到该 actor 的，但如果需要，你可以让外部函数也隔离到某个 actor。这样，该函数就可以像在该 actor 内部一样访问 actor 隔离的状态，而无需使用 <code>await</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">DataStore</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> username <span class="operator">=</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line">  <span class="keyword">var</span> friends <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">  <span class="keyword">var</span> highScores <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">  <span class="keyword">var</span> favorites <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="comment">// load data here</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123;</span><br><span class="line">    <span class="comment">// save data here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">debugLog</span>(<span class="params">dataStore</span>: <span class="keyword">isolated</span> <span class="type">DataStore</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Username: <span class="subst">\(dataStore.username)</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Friends: <span class="subst">\(dataStore.friends)</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;High scores: <span class="subst">\(dataStore.highScores)</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Favorites: <span class="subst">\(dataStore.favorites)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">DataStore</span>()</span><br><span class="line"><span class="keyword">await</span> debugLog(dataStore: data)</span><br></pre></td></tr></table></figure><p>函数签名中添加的 <code>isolated</code> 关键字，它允许直接访问 <code>DataStore</code> 的属性而不需要使用 <code>await</code>，整个函数必须在该 actor 上运行，因此需要使用 <code>await</code> 调用 <code>debugLog(dataStore:)</code>。</p><h3 id="部分隔离"><a class="markdownIt-Anchor" href="#部分隔离"></a> 部分隔离</h3><p>默认情况下，Actor 内部的所有方法和可变属性都与该 Actor 隔离，可以使用 <code>nonisolated</code> 关键字将某些方法排除在外。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoKit</span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">actor</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> username: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> password: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> isOnline <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(<span class="params">username</span>: <span class="type">String</span>, <span class="params">password</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.username <span class="operator">=</span> username</span><br><span class="line">    <span class="keyword">self</span>.password <span class="operator">=</span> password</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">nonisolated</span> <span class="keyword">func</span> <span class="title function_">passwordHash</span>() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> passwordData <span class="operator">=</span> <span class="type">Data</span>(password.utf8)</span><br><span class="line">    <span class="keyword">let</span> hash <span class="operator">=</span> <span class="type">SHA256</span>.hash(data: passwordData)</span><br><span class="line">    <span class="keyword">return</span> hash.compactMap &#123; <span class="type">String</span>(format: <span class="string">&quot;%02x&quot;</span>, <span class="variable">$0</span>) &#125;.joined()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user <span class="operator">=</span> <span class="type">User</span>(username: <span class="string">&quot;twostraws&quot;</span>, password: <span class="string">&quot;s3kr1t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user.passwordHash())</span><br></pre></td></tr></table></figure><ul><li>将 <code>passwordHash()</code> 标记为 <code>nonisolated</code> 意味着我们可以在外部调用它，而无需使用 <code>await</code>。</li><li>还可以将 <code>nonisolated</code> 与计算属性一起使用。</li><li>非隔离属性和方法只能访问其他非隔离属性和方法。</li></ul><h3 id="使用-mainactor-在主队列上运行代码"><a class="markdownIt-Anchor" href="#使用-mainactor-在主队列上运行代码"></a> 使用 @MainActor 在主队列上运行代码</h3><p><code>@MainActor</code> 是一个全局 actor，它使用主队列来执行其工作。</p><p>例如，我们可以创建一个具有两个 <code>@Published</code> 属性的可观察对象，并且因为它们都会更新 UI，所以我们将用 <code>@MainActor</code> 标记整个类，以确保这些 UI 更新始终发生在 main actor：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> username <span class="operator">=</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> isAuthenticated <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，不需要显式地将 <code>@MainActor</code> 添加到可观察对象，因为 SwiftUI 视图的 <code>body</code> 属性始终在主 actor 上运行。如果您需要某些方法或计算属性来选择不在主 actor 上运行，可以使用 <code>nonisolated</code>。</p><p>更广泛地说，任何包含 <code>@MainActor</code> 对象作为属性的类型也会隐式地被认为是 <code>@MainActor</code>，这是通过全局 actor 推断实现的。</p><p><code>@MainActor</code> 会自动强制方法或整个类型在主 actor 上运行，大多数情况下无需我们做任何额外的工作。以前我们需要手动完成这项工作，记得在每个需要的地方使用诸如 <code>DispatchQueue.main.async()</code> 之类的代码，但现在编译器会自动为我们处理这一切。</p><p><code>MainActor.run()</code> 方法是 Swift 中用于在主线程上执行代码的一种便捷方式。使用这个方法，你可以确保指定的代码块在主线程上运行，从而避免手动切换线程的麻烦。</p><ol><li>简化线程切换：<code>MainActor.run()</code> 简化了将代码调度到主线程的过程，不需要手动调用 <code>DispatchQueue.main.async()</code>。</li><li>支持异步代码：<code>MainActor.run()</code> 支持异步代码，你可以在其内部使用 <code>await</code>。</li><li>保证主线程执行：使用 <code>MainActor.run()</code> 可以确保代码在主线程上执行，适用于需要在主线程上运行的 UI 更新等任务。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">couldBeAnywhere</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> <span class="type">MainActor</span>.run &#123; () -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is on the main actor.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> couldBeAnywhere()</span><br></pre></td></tr></table></figure><p>也可以将任务的结束标记为 <code>@MainActor</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">couldBeAnywhere</span>() &#123;</span><br><span class="line">  <span class="type">Task</span> &#123; <span class="meta">@MainActor</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is on the main actor.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">couldBeAnywhere()</span><br></pre></td></tr></table></figure><p><code>MainActor.run()</code> 代码将立即执行 - 它不会像 <code>DispatchQueue.main.async()</code> 那样等到下一个运行循环。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span> <span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">runTest</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="type">Task</span> &#123; <span class="meta">@MainActor</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MainActor.run()</code> 的调用将在调用 <code>runTest()</code> 时立即运行。但是，内部的 <code>Task</code> 不会立即运行，因此代码将打印 1, 2, 4, 5, 3。</p><h3 id="全局-actor-推断的工作原理"><a class="markdownIt-Anchor" href="#全局-actor-推断的工作原理"></a> 全局 actor 推断的工作原理</h3><ol><li><p>如果一个类被标记为 <code>@MainActor</code> ，那么它的所有子类也自动被标记为 <code>@MainActor</code>。</p></li><li><p>如果类中的方法被标记为 <code>@MainActor</code> ，则该方法的任何重写也会自动标记为 <code>@MainActor</code>。</p></li><li><p>任何使用 <code>@MainActor</code> 作为其包装值的属性包装器的结构或类将自动为 <code>@MainActor</code>。</p></li><li><p>如果一个协议声明了一个方法是 <code>@MainActor</code>，那么任何遵循该协议的类型都会自动将该方法视为 <code>@MainActor</code>，除非你将协议的遵循与方法的实现分开。</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A protocol with a single `@MainActor` method.</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">save</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A struct that does not conform to the protocol.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore1</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When we make it conform and add save() at the same time, our method is implicitly @MainActor.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore1</span>: <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A struct that conforms to the protocol.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore2</span>: <span class="title class_">DataStoring</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we later add the save() method, it will *not* be implicitly @MainActor so we need to mark it as such ourselves.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore2</span> &#123;</span><br><span class="line">  <span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果整个协议标记为 <code>@MainActor</code>，那么任何遵循该协议的类型在不显式分离协议遵循与主类型声明的情况下，也会自动成为 <code>@MainActor</code>；而如果你将协议的遵循与主类型声明分离开来，那么只有方法会被标记为 <code>@MainActor</code>。</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A protocol marked as @MainActor.</span></span><br><span class="line"><span class="meta">@MainActor</span> <span class="keyword">protocol</span> <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A struct that conforms to DataStoring as part of its primary type definition.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore1</span>: <span class="title class_">DataStoring</span> &#123; <span class="comment">// This struct is automatically @MainActor.</span></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This method is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Another struct that conforms to DataStoring as part of its primary type definition.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore2</span>: <span class="title class_">DataStoring</span> &#123; &#125; <span class="comment">// This struct is automatically @MainActor.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The method is provided in an extension, but it&#x27;s the same as if it were in the primary type definition.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore2</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This method is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A third struct that does *not* conform to DataStoring in its primary type definition.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataStore3</span> &#123; &#125; <span class="comment">// This struct is not @MainActor.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The conformance is added as an extension</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">DataStore3</span>: <span class="title class_">DataStoring</span> &#123;</span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">save</span>() &#123; &#125; <span class="comment">// This method is automatically @MainActor.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="actor-跳跃"><a class="markdownIt-Anchor" href="#actor-跳跃"></a> actor 跳跃</h3><p>当一个线程暂停一个 actor 上的工作，转而开始在另一个 actor 上工作时，我们称之为 actor 跳跃（actor hopping）。这种情况会在一个 actor 调用另一个 actor 时发生。Actor hopping 的发生可以由编译器自动管理，确保并发操作的线程安全性和顺序执行，而无需开发人员显式管理线程切换。</p><p>但还是有一些注意事项：</p><ol><li>性能影响：Actor 跳跃可能会引入额外的性能开销，因为线程需要在不同的 actor 之间切换。尽管 Swift 的并发模型尽可能地优化了这些切换过程，但频繁的 actor 跳跃仍可能影响到应用程序的响应性能。</li><li>线程安全：由于 Swift 的 Actor 模型确保了同一时间只有一个 actor 的代码可以执行，因此 actor 跳跃可以保证并发访问的线程安全性。然而，开发人员仍需注意避免可能导致竞态条件或数据不一致的操作。</li><li>异步操作：在执行 actor 跳跃时，可能涉及异步操作和等待。特别是当一个 actor 调用另一个 actor 的异步方法时，可能需要使用 await 来等待结果的返回，以确保异步操作的正确顺序。</li><li>代码设计：合理的代码设计可以减少 actor 跳跃的频率。尽量将相关的操作和数据封装在同一个 actor 内部，减少不同 actor 之间的交互，可以降低 actor 跳跃的发生频率，提升性能和可维护性。</li></ol><p>下面是一个简单的示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actor</span> <span class="title class_">NumberGenerator</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> lastNumber <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">getNext</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> &#123; lastNumber <span class="operator">+=</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> lastNumber</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@MainActor</span> <span class="keyword">func</span> <span class="title function_">run</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span> <span class="operator">...</span> <span class="number">100</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> nextNumber <span class="operator">=</span> <span class="keyword">await</span> getNext()</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Loading <span class="subst">\(nextNumber)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generator <span class="operator">=</span> <span class="type">NumberGenerator</span>()</span><br><span class="line"><span class="keyword">await</span> generator.run()</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>run()</code> 方法必须在主 actor 上执行，因为它带有 <code>@MainActor</code> 属性，然而 <code>getNext()</code> 方法将在协作池（cooperative pool）的某个地方运行，这意味着 Swift 需要在循环内频繁地在主 actor 和协作池之间进行上下文切换。</p><h3 id="actors-classes-and-structs-之间的区别"><a class="markdownIt-Anchor" href="#actors-classes-and-structs-之间的区别"></a> actors, classes, and structs 之间的区别</h3><p>Actors:</p><ul><li>是引用类型，适合用于共享可变状态。</li><li>可以拥有属性、方法、初始化器和下标。</li><li>不支持继承。</li><li>自动遵循 Actor 协议。</li><li>自动遵循 AnyObject 协议，因此可以在不添加显式 id 属性的情况下遵循 Identifiable 协议。</li><li>可以有析构器。</li><li>不能直接从外部访问其公共属性和方法；必须使用 await。</li><li>只能同时执行一个方法，无论它们如何被访问。</li></ul><p>Classes：</p><ul><li>是引用类型，适合用于共享可变状态。</li><li>可以拥有属性、方法、初始化器和下标。</li><li>支持继承。</li><li>不能遵循 Actor 协议。</li><li>自动遵循 AnyObject 协议，因此可以在不添加显式 id 属性的情况下遵循 Identifiable 协议。</li><li>可以有析构器。</li><li>可以直接从外部访问其公共属性和方法。</li><li>可能同时执行多个方法。</li></ul><p>Structs：</p><ul><li>是值类型，会被复制而不是共享。</li><li>可以拥有属性、方法、初始化器和下标。</li><li>不支持继承。</li><li>不能遵循 Actor 协议。</li><li>不能遵循 AnyObject 协议；如果要添加 Identifiable 协议的遵循，必须自己添加 id 属性。</li><li>不能有析构器。</li><li>可以直接从外部访问其公共属性和方法。</li><li>可能同时执行多个方法。</li></ul><h2 id="另见"><a class="markdownIt-Anchor" href="#另见"></a> 另见</h2><ul><li><a href="https://developer.apple.com/documentation/swift/concurrency">Concurrency Documentation</a></li><li><a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a></li></ul>]]></content>
    
    
    <summary type="html">本篇是 Swift Concurrency by Example 的学习笔记。简要记录，备忘清单。推荐看原教程，配合代码示例更佳清晰易懂。</summary>
    
    
    
    
    <category term="Concurrency" scheme="http://kiligwyu.com/tags/Concurrency/"/>
    
  </entry>
  
</feed>
