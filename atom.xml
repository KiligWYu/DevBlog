<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>𝕶𝖎𝖑𝖎𝖌&#39;𝖘 𝕭𝖑𝖔𝖌</title>
  
  
  <link href="http://kiligwyu.com/atom.xml" rel="self"/>
  
  <link href="http://kiligwyu.com/"/>
  <updated>2022-04-08T07:32:48.594Z</updated>
  <id>http://kiligwyu.com/</id>
  
  <author>
    <name>𝓚𝓲𝓵𝓲𝓰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三余 ── 每日一文非官方开源客户端</title>
    <link href="http://kiligwyu.com/ThreeSpare/"/>
    <id>http://kiligwyu.com/ThreeSpare/</id>
    <published>2022-04-08T06:16:28.168Z</published>
    <updated>2022-04-08T07:32:48.594Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%85%B3%E4%BA%8E%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87">关于每日一文</a></li><li><a href="#%E7%BC%98%E8%B5%B7">缘起</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E4%B8%89%E4%BD%99">关于三余</a></li></ul><h2 id="关于每日一文"><a href="#关于每日一文" class="headerlink" title="关于每日一文"></a>关于每日一文</h2><p>官方网站：<a href="https://meiriyiwen.com/">每日一文</a>。</p><blockquote><p>每天花 10 分钟阅读一篇文章，一个月可以有大约 50000 字的阅读量，一年有近 60 万字的阅读量，专注、执着，每天阅读。</p><p>只为简单的纯净的阅读而生。</p><p>简单生活，每日一文。</p></blockquote><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>很多年前，当我还在上大学时候，偶然发现了每日一文网站，非常喜欢每日一文的理念，每日一篇短文，没有推荐、简单纯净，每日一文也成为我关注的最喜欢的文艺网站之一（喜欢的网站现在好多都已经关停了，一声叹息）。</p><p>我并不是一个爱读书的人，但我知道阅读的重要性，所以也时常强迫自己多读些书，而我那点可怜的阅读量里，每日一文就贡献了不少。🤣</p><p>每日一文官方也出过客户端，就叫『每日一文』，再后来 app 升级改名『观止』，再后来就下架了 🤣。而我做为一名 iOS 开发者，也想为每日一文做个客户端。于是我在我偏自用的工具 app『iCollect』里集成了每日一文，后来我也把这个 app 下架了，因为它功能太过杂乱。</p><p>直到年前，我想再为每日一文做个客户端，于是有了『三余』，并没有很强的动力去做，拖了很久才完成。年后试着上架 App Store，果不其然被拒，收到了 <code>4.1 CopyCats</code> 大礼包，就更没心情去做了，因为 app 的设计就是从别的 app 抄来拼凑成的，图标抄袭『<a href="https://apps.apple.com/us/app/id1592613682">读库</a>』，分析抄袭『<a href="https://apps.apple.com/us/app/id1507361706">HiCoffee</a>』，我也意识到了自己存在抄袭问题，并反省了，以后再做产品，希望可以多些创新。</p><p>既然不上架了，那就开源了吧，于是又拖了很长时间，整理一下代码(使用 Combine 简单重构下，并去掉了一些错误处理)然后开源，开源地址：<a href="https://github.com/KiligWYu/ThreeSpare-iOS">KiligWYu&#x2F;ThreeSpare-iOS</a>。本来计划的很多功能也没做，比如横屏适配、iPadOS 适配、iCloud 同步等，以后有时间再做吧。咕咕咕……</p><h2 id="关于三余"><a href="#关于三余" class="headerlink" title="关于三余"></a>关于三余</h2><p>『三余』是每日一文非官方客户端。</p><p><code>冬者岁之余，夜者日之余，阴雨者时之余也。</code> 是谓三余。</p><p><img src="https://github.com/KiligWYu/ThreeSpare-iOS/raw/main/ScreenShot.JPG" alt="ScreenShot"></p><p>『三余』主要功能分为两块，一是阅读，一是分析。阅读部分，有丰富的设置（有我最喜欢的修改字体功能）；分析部分，简单按周和月来统计阅读量。使用到的技术的话，页面主要使用 SwiftUI 和 Combine 框架，数据存储使用 CoreData，阅读文字排版使用 CoreText。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87&quot;&gt;关于每日一文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BC%98%E8%B5%B7&quot;&gt;缘起&lt;/a&gt;&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="每日一文" scheme="http://kiligwyu.com/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>30 Days of XXX</title>
    <link href="http://kiligwyu.com/30DaysofXXX/"/>
    <id>http://kiligwyu.com/30DaysofXXX/</id>
    <published>2022-04-04T05:48:08.338Z</published>
    <updated>2022-04-10T14:24:08.024Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E8%B5%B7%E5%9B%A0">起因</a></li><li><a href="#30-Days-of-WWDC">30 Days of WWDC</a><ul><li><a href="#Day-1-2022-04-07">Day 1 - 2022.04.07</a></li><li><a href="#Day-2-2022-04-08">Day 2 - 2022.04.08</a></li><li><a href="#Day-3-2022-04-09">Day 3 - 2022.04.09</a></li><li><a href="#Day-4-2022-04-10">Day 4 - 2022.04.10</a></li></ul></li><li><a href="#30-Days-of-Read">30 Days of Read</a></li></ul><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这几天想起来很早之前听 <a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615">UX Coffee 设计咖</a> 的一期播客，<a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615?i=1000461867693">#74：100 天，你可以完成什么？</a>，翻出来又听了一遍，之所以想起来这个，是因为我也一直想做些阶段性的针对某一块儿内容的学习或训练。</p><p>又快要到 WWDC 了<del>（咋还没官宣今年 WWDC 时间呢 😄）</del>，那么专项学习就从 WWDC 开始吧，目标 30 天，每天看些历年 WWDC 视频，并做好笔记和练习，就在这里做个记录吧。WWDC 其实是最好的第一手的学习资料，之前 WWDC 看的太少了 🤣。</p><p>不断更新中…</p><p>另外再开个 30 天阅读挑战吧，每日阅读一小时左右，一本书能拖好久才能读完，拯救一下我那可怜的阅读量 🤣。</p><h2 id="30-Days-of-WWDC"><a href="#30-Days-of-WWDC" class="headerlink" title="30 Days of WWDC"></a>30 Days of WWDC</h2><h3 id="Day-1-2022-04-07"><a href="#Day-1-2022-04-07" class="headerlink" title="Day 1 - 2022.04.07"></a>Day 1 - 2022.04.07</h3><ul><li><input checked="" disabled="" type="checkbox"> Symbolication: Beyond the basics</li></ul><h3 id="Day-2-2022-04-08"><a href="#Day-2-2022-04-08" class="headerlink" title="Day 2 - 2022.04.08"></a>Day 2 - 2022.04.08</h3><ul><li><input checked="" disabled="" type="checkbox"> LLDB: Beyond “po”</li></ul><h3 id="Day-3-2022-04-09"><a href="#Day-3-2022-04-09" class="headerlink" title="Day 3- 2022.04.09"></a>Day 3- 2022.04.09</h3><ul><li><input checked="" disabled="" type="checkbox"> Demystify SwiftUI</li></ul><h3 id="Day-4-2022-04-10"><a href="#Day-4-2022-04-10" class="headerlink" title="Day 4 - 2022.04.10"></a>Day 4 - 2022.04.10</h3><ul><li><input checked="" disabled="" type="checkbox"> Streamline your localized strings</li><li><input checked="" disabled="" type="checkbox"> Localize your SwiftUI app</li><li><input checked="" disabled="" type="checkbox"> SF Symbols in SwiftUI</li><li><input checked="" disabled="" type="checkbox"> Add rich graphics to your SwiftUI app</li></ul><h2 id="30-Days-of-Read"><a href="#30-Days-of-Read" class="headerlink" title="30 Days of Read"></a>30 Days of Read</h2><ul><li>2022.04.08 - 04.10: <a href="https://book.douban.com/subject/26264163/">《跳舞女郎》</a></li></ul><img src="https://img9.doubanio.com/view/subject/s/public/s28425864.jpg" referrerpolicy="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%B5%B7%E5%9B%A0&quot;&gt;起因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#30-Days-of-WWDC&quot;&gt;30 Days of WWDC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Day-1-2022-04-07&quot;&gt;Da</summary>
      
    
    
    
    
    <category term="WWDC" scheme="http://kiligwyu.com/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #7</title>
    <link href="http://kiligwyu.com/newsletter/7/"/>
    <id>http://kiligwyu.com/newsletter/7/</id>
    <published>2022-03-28T05:53:44.000Z</published>
    <updated>2022-04-04T14:47:38.323Z</updated>
    
    <content type="html"><![CDATA[<p>Hi there! 感谢订阅 Kilig 的碎周报，这里是碎周报第 7 期。另外，也可以 <a href="https://www.getrevue.co/profile/Kilig">通过邮件订阅本周报</a>。</p><hr><ul><li><a href="#%E4%BA%A7%E5%93%81%E5%8A%A8%E6%80%81">产品动态</a></li><li><a href="#%E8%AF%AD%E5%BD%95">语录</a></li><li><a href="#%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE">开源项目</a></li><li><a href="#App">App</a></li><li><a href="#%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85">新冠疫情</a></li><li><a href="#%E5%A3%81%E7%BA%B8">壁纸</a></li><li><a href="#%E8%BE%93%E5%85%A5%E6%B3%95">输入法</a></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a></li></ul><p>这几天想起来很早之前听 <a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615">UX Coffee 设计咖</a> 的一期播客，<a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615?i=1000461867693">#74：100 天，你可以完成什么？</a>，翻出来又听了一遍，之所以想起来这个，是因为我也一直想做些阶段性的针对某一块儿内容的学习或训练。</p><p>又快要到 WWDC 了（咋还没官宣今年 WWDC 时间呢 😄），那么就从 WWDC 开始吧，目标 30 天，每天看些历年 WWDC 视频，并做好笔记和练习，另外也在 <a href="https://kiligwyu.com/30DaysofWWDC/">这里</a> 做个记录。WWDC 其实是最好的第一手的学习资料，之前 WWDC 看的太少了 🤣。</p><h2 id="产品动态"><a href="#产品动态" class="headerlink" title="产品动态"></a>产品动态</h2><p>之前做了一款阅读类的应用，<a href="http://meiriyiwen.com/">每日一文</a> 非官方客户端 ── 三余，试着上架 App Store，结果收到了 4.1 CopyCats 大礼包，然后也没心情继续开发了，就简单整理一下 <a href="https://github.com/KiligWYu/ThreeSpare-iOS">开源了吧</a>，因为毕竟此应用的设计也确实都是抄袭来的，图标设计抄袭 <a href="https://apps.apple.com/us/app/id1592613682">读库</a> app，分析抄袭 <a href="https://apps.apple.com/us/app/id1507361706">HiCoffee</a> app，希望自己以后上架的 app 可以多些创新。</p><p>三余还有很多不完善的地方，以及很多本来要做的功能，比如横屏适配、iPadOS 适配、iCloud 同步等等，当前版本也存在很多问题，比如错误处理等等，以后有时间再做吧。咕咕咕~</p><p><img src="https://github.com/KiligWYu/ThreeSpare-iOS/raw/main/ScreenShot.JPG" alt="ScreenShot"></p><h2 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h2><p>作家崔成浩：动物其实比人类聪明，它们不会让族群里最愚蠢的那一个当首领。</p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul><li><p>⭐️ <a href="https://github.com/Hackl0us/GeoIP2-CN">GeoIP2-CN</a><br>小巧精悍、准确、实用 GeoIP2 数据库。</p></li><li><p><a href="https://github.com/peazip/PeaZip">PeaZip</a><br>开源跨平台的文件压缩软件，有空也试用一下 😄。</p></li></ul><h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><ul><li><p><a href="https://starorder.app/">Star Order</a> ── Github Star 管理工具</p><p><a href="https://twitter.com/ftium4/status/1510616818112630789">Twitter - @ftium4</a>: Star Order 是一个用于管理 GitHub Star 的使用 SwiftUI 开发的纯原生专业工具。通过方便灵活的标签，全面准确的排序检索，让您面对成百上千的 Star 仓库时，能够快速的挑选出最需要的那一个。</p></li><li><p><a href="https://apps.apple.com/us/app/id1234625785">XcLauncher</a><br>菜单栏 Xcode 项目快起工具。</p></li><li><p><a href="https://apps.apple.com/cn/app/id1501532023">ServerCat for macOS</a><br><a href="https://apps.apple.com/us/app/id1319191852">熊猫吃短信</a> 作者八爷的 ServerCat for macOS 终于发布了 😄，可惜我不是其目标用户。</p></li></ul><h2 id="新冠疫情"><a href="#新冠疫情" class="headerlink" title="新冠疫情"></a>新冠疫情</h2><ul><li><a href="https://www.youtube.com/watch?v=JhkIclg7OOI">上海市民和疾控中心对话录音</a></li><li><a href="https://mp.weixin.qq.com/s/fRIIgKe2OrDT6gTaOjdSnQ">汪诘不吐不快：面对疫情，上海人真正怕的是什么？（附上海疾控专家采访录音）</a></li></ul><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><ul><li>⭐️ <a href="https://1drv.ms/u/s!AuQ7aUGVDnCMgrsADJceZ7bIpHwsLA">必应 3 月壁纸</a><br>月更壁纸包更新了 😄。</li></ul><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><ul><li>⭐️ <a href="https://bugeshan.com/getting-started-with-squirrel-20210824">从零开始的鼠须管</a><br><a href="https://rime.im/">鼠鬚管</a> 是 Mac 上优秀输入法，<a href="https://github.com/rime/squirrel">开源</a>、<a href="https://github.com/rime/home/wiki/CustomizationGuide">高度自定义</a>，替换原生输入法的不二之选，不过想要顺手，还需要配置一番，还得搞词库，这边文章对鼠须管进行了介绍并推荐了一些配置。我也使用鼠须管很长时间了，非常的好用。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>⭐️ YouTube - <a href="https://www.youtube.com/watch?v=SnWyCRj6nEI">qián麻疹还是xún麻疹？凭什么把“对”的读音改成“错”的？【柴司ChaiCo】</a><br>对于一些字词的读音、拼写的更改修订，一开始我也是不能接受的，看了视频，思考了一番，觉得有道理，于是，就接受了。一个时代有一个时代的特点，语言也在不断的发展进化当中，我们也没必要守旧，看现在的简体字，跟古文字简直是翻天覆地的变化。</p></li><li><p>⭐️ 油猴脚本 - <a href="https://greasyfork.org/zh-CN/scripts/442187-open-the-link-directly">open the link directly</a><br>外链直接打开工具，作者在这里 <a href="https://twitter.com/varNediiii/status/1507981501371383814">@varNediiii</a>。</p></li></ul><hr><p>【完】以上就是本期周报的全部内容了，再次感谢订阅和阅读。Have an A-1 week.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi there! 感谢订阅 Kilig 的碎周报，这里是碎周报第 7 期。另外，也可以 &lt;a href=&quot;https://www.getrevue.co/profile/Kilig&quot;&gt;通过邮件订阅本周报&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #6</title>
    <link href="http://kiligwyu.com/newsletter/6/"/>
    <id>http://kiligwyu.com/newsletter/6/</id>
    <published>2022-03-21T05:13:12.000Z</published>
    <updated>2022-03-28T05:45:46.612Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第 6 期。</p><p>本周以来，开封封城，本市户口居民禁止出市，外来人员禁止入市，什么沙雕防疫政策 🙄，防疫过度用力过猛了，政策一天一个样也没个官方发布，高速口、高铁站、郑开大道物流通道政策还不一样，封了又没完全封，跨区上班太难了，郑开拼车群里怨声载道。本周只好住在 brother-in-law 家里 😑。</p><p>防疫不力要被问责，那就过度防疫，宁可封城 🙄。 正如土摩托老师所说的：<code>如果一旦防疫不力就得被关禁闭甚至被撤职，那么这种防疫策略就是最人性的体现。</code></p><ul><li><a href="#%E8%AF%AD%E5%BD%95">语录</a></li><li><a href="#YouTube">YouTube</a></li><li><a href="#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7">开发工具</a></li><li><a href="#%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE">开源项目</a></li><li><a href="#TIL">TIL</a></li><li><a href="#%F0%9F%94%9E-NSFW">🔞 NSFW</a></li></ul><h2 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h2><ul><li><p><a href="https://twitter.com/shrugged_hi/status/1415007808626434048">@shrugged_hi</a>:</p><blockquote><p>读历史和非虚构，常给我一种感觉，看起再牢不可破的社会认可、生活方式、人生期许，都是变化和脆弱的。革命、战争、灾难、基因的诅咒、掉落的花瓶，我们在意外和巧合中前进、退后、消失。<br>生活没有范式，没有标准，恐怕也没有意义，你可以选择任何生活方式，只要有付出代价的觉悟。</p></blockquote></li><li><p><a href="https://twitter.com/ayuan1000/status/1507158672266330127">@ayuan1000</a>:</p><blockquote><p>有人骂这是毫无人性的防疫策略，错了，这才是最能体现人性的事件。如果每个人都相信新冠病毒沾了就死，如果一旦防疫不力就得被关禁闭甚至被撤职，那么这种防疫策略就是最人性的体现。所以，人性是靠不住的，只有科学才能拯救人类。</p></blockquote></li></ul><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><ul><li>⭐️ <a href="https://www.youtube.com/watch?v=GyNXwq52qSw">【什么值得捡 008】6 块钱的菲律宾 Globe 手机卡，订阅 Spotify 会员每月只要 4 元？最划算的 Spotify 声破天订阅教程</a></li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><p>⭐️ <a href="https://www.shell.how/">shell.how</a>，shell 命令及参数详解，来源：Twitter - <a href="https://twitter.com/vikingmute/status/1507286542183632903">@vikingmute</a>。</p></li><li><p><a href="https://github.com/wez/wezterm">WezTerm</a>，来源：Twitter - <a href="https://twitter.com/yihong0618/status/1506800869802901505">@yihong0618</a>。</p><blockquote><p>A GPU-accelerated cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust</p></blockquote><p>就是配置起来有些麻烦，没有 GUI 设置页面，终端工具用下来，个人感觉还是 iTerm 最顺手，喜欢 iTerm 的 Hotkey Window，个人需求也不多，iTerm 的卡顿问题我也没遇到。</p></li></ul><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul><li>⭐️ SwiftUI - <a href="https://github.com/lacklock/SwiftUI-Guide">lacklock&#x2F;SwiftUI-Guide</a>，来源：微博 - <a href="https://m.weibo.cn/1926303682/4749408447760589">@没故事的卓同学</a>。<br>SwiftUI 学习资料以及 WWDC 上有关的所有视频。</li><li>⭐️ Quick Look - <a href="https://github.com/sbarex/SourceCodeSyntaxHighlight">sbarex&#x2F;SourceCodeSyntaxHighlight</a><br>macOS 上最强的 Quick Look 软件。</li><li>⭐️ 字体 - <a href="https://github.com/welai/glow-sans">welai&#x2F;glow-sans</a><br>好看的字体：未來熒黑，<a href="https://welai.github.io/glow-sans">字体预览</a>。</li></ul><h2 id="TIL"><a href="#TIL" class="headerlink" title="TIL"></a>TIL</h2><p>Lighting 线缆也是支持反向传输电力的。见 <a href="https://www.cnbeta.com/articles/tech/1251343.htm">中国厂商开发出 Lightning 输出口充电器，果粉也能一根线走天下</a>，来源：Twitter - <a href="https://twitter.com/kimihuang/status/1507554646780362752">@kimihuang</a>。</p><h2 id="🔞-NSFW"><a href="#🔞-NSFW" class="headerlink" title="🔞 NSFW"></a>🔞 NSFW</h2><p><a href="https://twitter.com/tianlan/status/1507665130263224326">@tianlan</a>:</p><blockquote><p>应推友要求，建了个我推荐的 av 女优 list. 列表中多数是现役女优（很多引退后会删除社交媒体）。仅代表个人喜好。持续更新。<a href="https://twitter.com/i/lists/1507662539362308096">https://twitter.com/i/lists/1507662539362308096</a></p></blockquote><hr><p>【完】以上就是本期周报的全部内容了，再次感谢您的订阅和阅读。Have an A-1 week.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第 6 期。&lt;/p&gt;
&lt;p&gt;本周以来，开封封城，本市户口居民禁止出市，外来人员禁止入市，什么沙雕防疫政策 🙄，防疫过度用力过猛了，政策一天一个样也没个官方发布，高速口、高铁站、郑开大道物流通道政策还不一样，封了又没完全封</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #5</title>
    <link href="http://kiligwyu.com/newsletter/5/"/>
    <id>http://kiligwyu.com/newsletter/5/</id>
    <published>2022-03-14T03:25:16.000Z</published>
    <updated>2022-03-21T05:11:33.367Z</updated>
    
    <content type="html"><![CDATA[<p>嗨~ 朋友，感谢订阅 Kilig 的碎周报，这里是碎周报第 5 期。</p><!--- more ---><ul><li><a href="#%E9%9F%B3%E4%B9%90">音乐</a></li><li><a href="#%E6%92%AD%E5%AE%A2">播客</a></li><li><a href="#%E5%BC%80%E6%BA%90app">开源 App</a></li><li><a href="#%E5%A3%81%E7%BA%B8">壁纸</a></li><li><a href="#newsletter">Newsletter</a></li><li><a href="#%E8%AE%BE%E8%AE%A1">设计</a></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a></li><li><a href="#%E2%AD%90%EF%B8%8F%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%9F%EF%BC%882020%E5%B9%B4%E7%89%88%EF%BC%89-https-www-codedump-infopost20200605-how-to-read-code-v2020"><a href="https://www.codedump.info/post/20200605-how-to-read-code-v2020/">如何阅读一份源代码？（2020 年版）</a></a></li><li><a href="#%E2%AD%90%EF%B8%8F%E8%81%8C%E4%B8%9A%E5%BB%BA%E8%AE%AE">职业建议</a></li><li><a href="#%E6%9C%AC%E5%91%A8%E8%BF%98%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88">本周还做了什么</a></li></ul><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><ul><li><p>⭐️ <a href="https://music.apple.com/us/album/used-to-know-me/1592545087?i=1592545898">Used To Know Me - Charli XCX</a><br><a href="https://zh.wikipedia.org/wiki/%E6%9F%A5%E8%8E%89%C2%B7XCX">酷娃恰莉</a> 新专辑<a href="https://music.apple.com/us/album/crash/1592545087">《CRASH》</a>中的一首。整张专辑我只喜欢这一首。专辑封面非常的吸睛 😄🤣。</p></li><li><p>⭐️ <a href="https://www.youtube.com/watch?v=T_44JMunArM">《漠河舞厅》— Cover by 陈一发儿</a><br>陈一发儿 的翻唱也非常的好听。然后才去找听了下 <a href="https://music.apple.com/us/album/%E6%BC%A0%E6%B2%B3%E8%88%9E%E5%8E%85/1583184153?i=1583184486">原唱</a>，才知道这首歌背后还有一个 <a href="https://baike.baidu.com/item/%E6%BC%A0%E6%B2%B3%E8%88%9E%E5%BB%B3/55383637#1">那么动人的故事</a>。</p></li></ul><h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><ul><li><p>⭐️ 卖鱼桥分桥 - <a href="https://podcasts.apple.com/us/podcast/%E5%8D%96%E9%B1%BC%E6%A1%A5%E5%88%86%E6%A1%A5/id1564630230?i=1000553888189">47. 大胆投诉，放肆维权</a><br>在 315 消费者权益日之际，主播西子和富贵分享了他们的维权经历。</p><blockquote><p>希望大家在自身权益受到侵犯时，大胆投诉，放肆维权，重拳出击！</p></blockquote></li><li><p>⭐️ 声东击西 - <a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000554351536">#205 经济学家眼里的算法之蠢和治理难题</a></p></li></ul><h2 id="开源-App"><a href="#开源-App" class="headerlink" title="开源 App"></a>开源 App</h2><ul><li><p>macOS - <a href="https://fig.io/">Fig</a>，来源：Twitter - <a href="https://twitter.com/Blankwonder/status/1504691742653575173">@Blankwonder</a>。<br>终端自动补全工具。第二期 newsletter 里介绍的 macOS 原生终端应用 <a href="https://www.warp.dev/">Warp</a> 自带补全，这段时间一直在使用 Warp，但总感觉差点意思跟 iTerm 比。<br>Fig 也是开源的，项目地址：<a href="https://github.com/withfig/autocomplete">github.com&#x2F;withfig&#x2F;autocomplete</a>。</p></li><li><p>⭐️ macOS - <a href="https://github.com/neilsardesai/Manila">Manila</a>，来源：Twitter - <a href="https://twitter.com/neilsardesai/status/1504576487516684301">@neilsardesai</a>。<br>访达拓展，可以更改文件夹颜色。之前都是给文件夹打标签，现在可以直接修改文件夹颜色，更加直观。</p></li><li><p>Windows - <a href="https://github.com/Chuyu-Team/Dism-Multi-language/releases">Dism++</a>，来源：Twitter - <a href="https://twitter.com/scomper/status/1503335017564368900">@scomper</a>。<br>DISM 工具的多语言包。</p><blockquote><p>DISM（Deployment Image Servicing and Management）就是部署映像服务和管理 (DISM.exe) 用于安装、卸载、配置和更新脱机 Windows (R) 映像和脱机 Windows 预安装环境 (Windows PE) 映像中的功能和程序包。── 百度百科</p></blockquote></li></ul><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><ul><li>⭐️ <a href="https://drive.google.com/drive/folders/1QN6MN_8Uy45NyWJ0ej2iRJDiTSWODxXN?usp=sharing">iPhone SE Wallpapers for iPad, Mac &amp; iPhone</a>，来源：Twitter - <a href="https://twitter.com/BasicAppleGuy/status/1503749688289341440">@BasicAppleGuy</a>。</li></ul><h2 id="Newsletter"><a href="#Newsletter" class="headerlink" title="Newsletter"></a>Newsletter</h2><ul><li><p>⭐️ <a href="https://zhiy.cc/messy">草稿拾遗</a></p><blockquote><p>潦草学者 的思考与感受 长期关注效率工具，互联网商业。</p></blockquote></li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul><li><p>⭐️ 字体 - <a href="https://www.kowloontype.com/purchase/">空明朝體</a>，来源：Twitter - <a href="https://twitter.com/yitianshijieipn/status/1503608987765583872">@yitianshijiepn</a>。<br>非常好看的一套中文字体，忍不住想剁手，HK$2,500.00 还是忍住了 🤣。</p></li><li><p>⭐️ <a href="https://mp.weixin.qq.com/s/fL-1LJ3I81YydHBARtkpjw">为什么有的设计看起来好看？</a>，来源：<a href="https://zhiy.cc/letter/1818">草稿拾遗 022期</a>。</p><ol><li>排版和留白：将元素和文字对齐到参考线</li><li>层次感：通过颜色、尺寸、阴影等，建立清晰的层次感</li><li>一致性：保持一致性</li></ol></li><li><p>小红书产品设计中心 - <a href="http://rpdc.xiaohongshu.com/52-design-principles">52 个设计原则</a>，来源：Twitter - <a href="https://twitter.com/ftium4/status/1504376449507102720">@ftium4</a>。<br>虽然<a href="https://twitter.com/nishuang/status/1504456404370870275">网站设计的不咋地</a>，但知识还是值得一学的。</p></li><li><p>飞书设计团队 - <a href="https://s75w5y7vut.feishu.cn/docs/doccn3BatnScBJe7wD7K3S5poFf">认知偏差知识手册</a>，来源：Twitter - <a href="https://twitter.com/hzlzh/status/1504690388535181313">@hzlzh</a>。</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>⭐️ YouTube - <a href="https://www.youtube.com/watch?v=lri6O8EBnlI">【亦】唠唠苹果 M1 Ultra：半导体新时代！</a>，来源：Twitter - <a href="https://twitter.com/taresky/status/1505453691226103818">@taresky</a>。<br>刷新了我对苹果 M 系列芯片的认知，一套设计满足所有产品线，分摊成本，Cook 真切片大师。</p></li><li><p>视觉同盟专访 - <a href="http://www.visionunion.com/article.jsp?code=200612120024">2006 国际 GUI 冠军赛全场最佳个人应骏赳 (JJ.Ying) 专访</a>，来源：Twitter - <a href="https://twitter.com/ftium4/status/1504416076720922625">@ftium4</a>。<br>对应骏赳老师又多了一丝了解 😄。</p></li><li><p><strong>“Bad programmers worry about the code. Good programmers worry about data structures and their relationships.”</strong> by Linus Torvalds</p></li><li><p><strong>Hanlon’s Razor（汉隆剃刀）</strong><br><strong>Never attribute to malice that which can be adequately explained by neglect.</strong><br>永远不要将那些可以用疏忽来解释的事情归咎于恶意。</p></li><li><p><a href="https://book.douban.com/subject/26892353">《蜥蜴脑法则》</a></p><blockquote><p>行为经济学家 Thaler 和 Sunstein 提出的 “蜥蜴脑” 似乎可以回答这个问题。Thaler 和 Sunstein 指出，虽然人类自诩为理性动物，但事实上，我们在做大多数决定时，其决策过程与低等脊椎动物蜥蜴并无太大区别。换句话说，人脑的决策过程，与蜥蜴脑的几乎一样。<br>每个人身上都有一个 “蜥蜴脑”。蜥蜴脑极其聪明，而且运转极快，能在极短时间内轻松做出准确判断。它不仅高效，而且不知疲倦，昼夜不停，无法阻挡。蜥蜴脑能量极大，总是在不知不觉间控制我们的绝大多数行为，包括那些事关生死的重要行为。<br>所以，无论你是想说服某一个人 —— 比如说你的配偶、孩子或者同事 —— 做一件事，还是想说服成千上万人购买 Apple Watch 或百威啤酒，只要学会跟他的蜥蜴脑对话，效果就会事半功百倍！</p></blockquote></li></ul><h2 id="⭐️-如何阅读一份源代码？（2020-年版）"><a href="#⭐️-如何阅读一份源代码？（2020-年版）" class="headerlink" title="⭐️ 如何阅读一份源代码？（2020 年版）"></a>⭐️ 如何阅读一份源代码？（2020 年版）</h2><p>来源：<a href="https://www.codedump.info/post/20200605-how-to-read-code-v2020/">codedump 的网络日志 - 如何阅读一份源代码？（2020 年版）</a>。</p><ul><li>先跑起来</li><li>明确自己的目的<br>在开始展开阅读之前，需要明确自己的目的：是需要了解其中一个模块的实现，还是需要了解这个框架的大体结构，还是需要具体熟悉其中的一个算法的实现，等等。</li><li>区分主线和支线剧情</li><li>纵向和横向<ul><li>纵向：顺着代码的顺序阅读，在需要具体了解一个流程、算法的时候，经常需要纵向阅读。</li><li>横向：区分不同的模块进行阅读，在需要首先弄清楚整体框架时，经常需要横向阅读。<br>过程中还是以整体为首，在不理解整体的前提之前，不要太过深入某个细节。</li></ul></li><li>情景分析<br>自己构造一些情景，然后通过加断点、调试语句等分析在这些场景下的行为。</li><li>利用好测试用例<br>测试用例往往是针对某个单一的场景，独自构造出一些数据来对程序的流程进行验证。所以，其实跟前面的 “情景分析” 一样，都是让你从大的项目转而关注具体某个场景的手段之一。</li><li>厘清核心数据结构之间的关系</li><li>多问自己几个问题<br>输出的手段有很多，在阅读代码时，比较建议的是自己能够多问自己一些问题，比如：<ul><li>为什么选择这个数据结构来描述这个问题？类似的场景下，其他项目是怎么设计的？都有哪些数据结构做这样的事情？</li><li>如果由我来设计这样的项目，我会怎么做？<br>等等等等。</li></ul></li><li>写自己的代码阅读笔记<ul><li>尽量避免大段的贴代码，如果真要解释某段代码，可以使用伪代码或者缩减代码的方式。如果真的想在代码上加上自己的注释，我有一个建议是 fork 出来一份该项目某个版本的代码，提交到自己的 github 上，上面随时可以加上自己的注释并且保存提交。</li><li>多画图，一图胜千言，使用图形展示代码流程、数据结构之间的关系。</li></ul></li></ul><h2 id="⭐️-职业建议"><a href="#⭐️-职业建议" class="headerlink" title="⭐️ 职业建议"></a>⭐️ 职业建议</h2><p><a href="https://twitter.com/chrishlad/status/1502650707274608644">原推</a>，<a href="https://weibo.com/1727858283/Ljvv75q62">微博</a>，来源：<a href="https://t.me/codedump_notes/158">codedump 的电报频道</a>。</p><ol><li>尽可能为别人减少不确定性<ul><li>Uber解决了打车的不确定性</li><li>亚马逊解决了送包裹的不确定性</li><li>你也可以通过及时更新项目进展来帮老板解决不确定性</li></ul></li><li>公司比职位更重要</li><li>一旦接受了一个任务，无论多小或者多么不起眼，要把它做的特别好，超出别人的预期。这样你就能建立起一个良好的声誉，让别人知道你总能高质量的完成工作。当你建立了这种声誉，你就能得到更多的机会，更大的知名度，以及更大的成功。</li><li>如果我不能信任你，你再聪明都没用。</li><li>在你的职业生涯中，陪你走到最后的只有你自己。不是你的公司，不是你的经理，不是你的团队，只有你自己。<ul><li>在做你所有职业生涯的决定时，优先考虑你自己。</li></ul></li><li>影响你职业生涯的三件事：<ul><li>你做什么？（工作）</li><li>你为谁工作？（客户）</li><li>和你一起工作的人是谁？（团队）<br>  如果你热爱你的工作、客户和团队，你会非常非常幸运。</li></ul></li><li>和一个聪明的能激励你走向伟大的人结婚。</li><li>要么能学东西，要么能赚钱。否则果断离职，去找一个这两者至少占一样的工作。</li><li>如果一个问题你不问，那么答案一定是“不”。</li><li>选择你的老板。<br>  你有权选择谁当你的老板，而在找工作的过程中很多人没有考虑到这一点。<br>  一个优秀的老板可以为你的职业发展提供极大的助力。</li><li>学会阐明你所做的事情的商业价值，而不仅仅是你的工作头衔或者项目。<br>  不好的例子：“我是一个数据科学家。我创建了3个自服务数据应用”<br>  更好的例子：“我帮助管理层发现了一个可以节约2300万美元成本的机会”</li><li>“职业”，本质是一个营销名词，是由那些经营特定类别的梦想的人卖给你的，而他们在贩卖这个梦想时赚了很多钱。<br>  赚钱，承担风险，有冒险精神。<br>  但不要让“职业”来限制自己。</li></ol><h2 id="本周还做了什么"><a href="#本周还做了什么" class="headerlink" title="本周还做了什么"></a>本周还做了什么</h2><ul><li>上周看完的<a href="https://objccn.io/products/thinking-in-swiftui">《SwiftUI 编程思想》</a>一书的练习题，本周做完放 <a href="https://github.com/KiligWYu/ThinkingInSwiftUIExercise">GitHub</a> 上了。</li><li>购买了 itch.io 上的 <a href="https://itch.io/b/1316/bundle-for-ukraine">Bundle for Ukraine</a>。</li><li>终于看完了<a href="https://movie.douban.com/subject/6952149/">《绝命毒师》第 5 季</a> 最后几集，拖了很久了。接下来有空把<a href="https://movie.douban.com/subject_search?search_text=%E7%BB%9D%E5%91%BD%E5%BE%8B%E5%B8%88">《绝命律师》</a>和 <a href="https://movie.douban.com/subject/30372377">《续命之徒》</a> 看喽。</li><li>过了一遍 Golang 的文档，接下来找些项目来写写。</li></ul><hr><p>【完】以上就是本期周报的全部内容了，再次感谢订阅和阅读。Have an A-1 week.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;嗨~ 朋友，感谢订阅 Kilig 的碎周报，这里是碎周报第 5 期。&lt;/p&gt;
&lt;!--- more ---&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%9F%B3%E4%B9%90&quot;&gt;音乐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%92%AD%E5%AE%</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #4</title>
    <link href="http://kiligwyu.com/newsletter/4/"/>
    <id>http://kiligwyu.com/newsletter/4/</id>
    <published>2022-03-07T05:45:14.000Z</published>
    <updated>2022-03-14T05:57:08.457Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第 4 期。</p><h2 id="产品动态"><a href="#产品动态" class="headerlink" title="产品动态"></a>产品动态</h2><p>我开发的每日自动更新必应壁纸的 macOS 小工具 <a href="https://apps.apple.com/us/app/id1573715683">Tapet</a> version 1.6.0 发布了。本次更新优化了状态栏图标的隐藏显示逻辑，增加了桌面图片更新的通知。欢迎下载使用。</p><!--- more ---><h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><ul><li>⭐️ <a href="https://podcasts.apple.com/us/podcast/whats-next-%E7%A7%91%E6%8A%80%E6%97%A9%E7%9F%A5%E9%81%93/id1494812579?i=1000553410716">S6E02｜对话 Parent Lab 创始人 Jill Li：职业女性不必恐婚恐育</a></li></ul><h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><ul><li>⭐️ <a href="https://www.youtube.com/watch?v=DxoGJBb1mWQ">YouTube - Randy Music - 我是如何使用 Logseq 的 | How do I use Logseq</a>，来源：<a href="https://twitter.com/randyloop/status/1501588790988918784">Twitter - @randyloop</a>。<br>之前也听过关于 Logseq 的一期播客，<a href="https://podcasts.apple.com/us/podcast/bytetalk/id1592076190?l=zh&i=1000546084004">跟 Logseq 的创造者天生聊聊 Logseq 的故事</a>，也很值得一听。<br>类似 Logseq 的笔记软件还有 <a href="https://obsidian.md/">Obsidian</a>，很早就听说了双链笔记、Obsidian、Logseq，上周想尝试下 Obsidian，装完玩了一下下就搁置了，看完这个视频，再次拿起 Obsidian，认真研究了一番，看看官方文档，探索下使用用法，配置一番，果然强大好用，之后记笔记就用 Obsidian 了。</li></ul><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul><li><p><a href="https://github.com/TomWright/dasel">GitHub - Dasel</a></p><blockquote><p>Select, put and delete data from JSON, TOML, YAML, XML and CSV files with a single tool. Supports conversion between formats and can be used as a Go package.<br>Comparable to jq &#x2F; yq, but supports JSON, YAML, TOML, XML and CSV with zero runtime dependencies.</p></blockquote></li><li><p><a href="https://github.com/ryanoasis/nerd-fonts">Github - Nerd Font</a></p><blockquote><p>Nerd Fonts is a project that patches developer targeted fonts with a high number of glyphs (icons). Specifically to add a high number of extra glyphs from popular ‘iconic fonts’ such as Font Awesome, Devicons, Octicons, and others.</p></blockquote></li><li><p><a href="https://www.yuque.com/greatghoul/remote">语雀 - greatghoul - 远程工作者</a><br>收录中国国内的远程工作资源或者对国内受众友好的国外远程资源。</p></li><li><p>🍉 <a href="https://github.com/Lakr233/Rayon/issues/30">Rayon Issue - 关于已有软件 ServerCat 的相关说明 #30</a><br>上一期的 newsletter 了也包含了 Rayon 的内容，在我看到 Rayon 时第一时间想到的也是 ServerCat，后来就看到两位开发者在推上吵架了，再后来就有了这个 issue。ServerCat 一早就买了，买了之后也是处于吃灰状态。两位开发者我都不认识，只是关注八爷时间要久一点。<br>这个 issue 也给我敲响了警钟，关于抄袭，要创新，关于使用开源库，要避免违反开源协议。我自己的几个 app 几乎未使用开源库，除了花密，下次更新时加上许可条款。</p></li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul><li>⭐️ <a href="https://www.ftium4.com/ux-weekly-85.html">Newsletter - 体验碎周报第 85 期 (2022.3.7)</a></li><li>⭐️ <a href="http://m.nishuang.net/">Newsletter - 倪爽的“熊猫小学”邮件杂志</a></li><li>Figma 封禁所有被美国制裁的中国企业帐号，来源：<a href="https://twitter.com/ftium4/status/1502503627327344640">Twitter - @ftium4</a>。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>⭐️ <a href="https://weibo.com/tv/show/1034:4741862867795995?from=old_pc_videoshow">微博视频 - 西方对中国的认知作战早在十年前就成功过一次了（鱼翅无删减版）</a>，来源：<a href="https://m.weibo.cn/status/4742266244045127">微博 - @Easy</a>。</p></li><li><p>💬 <a href="https://zhuanlan.zhihu.com/p/476663368">知乎 - 雷鸟电视揭底，无广告还是纯营销？</a><br>很多国产电视是很便宜性价比高，如果你忍受的了无穷无尽的广告的话。我年前也买了电视，毫不犹豫地选择了 SONY，大家电还是得老牌大厂。</p></li><li><p>💬 <a href="https://www.v2ex.com/t/838599">v2ex - 大家都是怎么开始逐渐放弃自己的兴趣爱好的</a>，<a href="http://blog.beartalking.com/more-movies-and-books-when-young/">Bear Blog - 年轻时应该多看片多看书</a>。<br>有同感的人似乎大有人在，单身时自由，时间充裕，婚后有了娃后，个人时间被大大挤压或占用，真的是连不被打扰的看一部电影的时间都没有 😂。最近媳妇儿在看<a href="https://movie.douban.com/subject/35423605/">《我们的婚姻》</a>，我也陪着看了两眼，也是讲事业和家庭 balance，工作和生活 balance，自己和自己(不同角色，纯粹自我、父亲、丈夫等) balance，都需要自己去慢慢找到平衡点。</p></li><li><p>⭐️  <a href="https://www.apple.com.cn/apple-events/march-2022/">Apple 特别活动</a><br>这次没有熬夜看，而是第二天上午看了回放。『M1 Ultra 那么强，解压 Xcode 要多久？能玩游戏吗？预览 SwiftUI 能不卡吗？』😄</p></li><li><p>⭐️ <a href="http://m.kuancaipu.com/">美食作家王刚的宽菜谱网站</a>，来源：<a href="https://twitter.com/ftium4/status/1501452005616676864">Twitter - @ftium4</a>。<br>之前还看到一个 <a href="https://github.com/Anduin2017/HowToCook">程序员在家做饭方法指南</a> 的开源项目，也不错。</p></li><li><p><a href="https://www.youtube.com/watch?v=_sIcqxghUPU">YouTube - 沈晟 | Tomasen - 我的困扰、思考和解决方案</a>，来源：<a href="https://twitter.com/ShooterPlayer/status/1501920983770304512">Twitter - @ShooterPlayer</a>。</p><blockquote><p>我们的教育系统，我们社会的信息流结构，是实用主义的，是服从和消费导向的。激励学校和老师的，是升学率和论文引用指数。激励信息内容生产的，是消费。在这样的世界里，我突然有很多话要和孩子说。</p></blockquote></li></ul><h2 id="本周还做了什么"><a href="#本周还做了什么" class="headerlink" title="本周还做了什么"></a>本周还做了什么</h2><ul><li><p>✅ <a href="https://objccn.io/products/thinking-in-swiftui">《SwiftUI 编程思想》</a><br>课后练习还没做完，下周做完放 GitHub 上。</p></li><li><p>✅ <a href="https://movie.douban.com/subject/35284253">青春变形记 Turning Red (2022)</a></p></li><li><p>✅ <a href="https://movie.douban.com/subject/2133323">白日梦想家 The Secret Life of Walter Mitty (2013)</a></p></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第 4 期。&lt;/p&gt;
&lt;h2 id=&quot;产品动态&quot;&gt;&lt;a href=&quot;#产品动态&quot; class=&quot;headerlink&quot; title=&quot;产品动态&quot;&gt;&lt;/a&gt;产品动态&lt;/h2&gt;&lt;p&gt;我开发的每日自动更新必应壁纸的 macOS </summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #3</title>
    <link href="http://kiligwyu.com/newsletter/3/"/>
    <id>http://kiligwyu.com/newsletter/3/</id>
    <published>2022-02-28T06:14:47.000Z</published>
    <updated>2022-03-07T05:43:29.868Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第三期。</p><p>上期把内容粗暴地分成技术类和非技术类，太宽泛了，这期把内容细分下。</p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p>⭐️ <a href="https://music.apple.com/us/album/the-astounding-eyes-of-rita/1443766830">The Astounding Eyes of Rita - Anouar Brahem</a>，来源：<a href="https://twitter.com/MapleShadow/status/1498132426299613186">Twitter - @MapleShadow</a>。<br>突尼斯的乌得琴音乐家 Anouar Brahem 于 2009 年发行的四重奏专辑 The Astounding Eyes of Rita，第一首就绝了。</p><h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><p><a href="https://espanso.org/">macOS - Espanso</a>，来源：<a href="https://twitter.com/coolXiao/status/1498092333656469505">Twitter - @coolXiao</a>。<br>一个快速输入工具，这类的工具还不少，比如 <a href="https://matthewpalmer.net/rocket/">Rocket</a>、Alfred 的 Snippets 功能、甚至系统自带文本替换，Espanso 上手有点难度，没有 GUI，需要命令行操作，编写 YAML 配置文件，不过 Espanso 功能也更强大，支持 script，具体见 <a href="https://espanso.org/docs/get-started/">官方文档</a>。</p><p>⭐️ <a href="https://www.raycast.com/">macOS - Raycast</a><br>一个可以替换 Alfred 的效率工具，免费且功能强大。其实这款工具在刚发布时候我就已经注意到了，并安装体验了的，然后就卸载了。随着不断迭代完善，现在功能已经很全面很完善了，完全可以替代 Alfred，我也是在看到推友极力推荐后，再次安装尝试，现在已经卸载 Alfred 了 😄。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>⭐️ <a href="https://imgg.gg/">imgggg</a>，来源：<a href="https://twitter.com/ftium4/status/1497047749602131970">Twitter - @ftium4</a>。<br>社交网络动态转换成精美图片的在线工具，支持 Twitter、Telegram、GitHub、Hacker News、v2ex 等。</p><h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000552429729">E608. 情感诈骗王：一场精心布置的顶级骗局 - 故事 FM</a><br>我听的时候也很震惊，这也行，被骗的那个女的可能被爱情冲昏了头脑，先是蠢后面就可能是坏了。生活中的骗子，感情骗子，杀猪盘也确实不少，所以一定要保持警惕，保持理智，防止被骗，天下没有免费的午餐，天上也不会掉馅饼。</p><p>⭐️ <a href="https://podcasts.apple.com/us/podcast/steve%E8%AF%B4/id1073852728?i=1000552218159">Steve 说 272 期 - 袁源 - 伦理无法阻止战争，但让我们更接近和平 - Steve 说</a><br>正值俄罗斯入侵乌克兰，来了解些战争伦理方面的知识。</p><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><p>⭐️ <a href="https://1drv.ms/u/s!AuQ7aUGVDnCMgrp7DJceZ7bIpHwsLA">必应二月壁纸，UHD、无水印</a>，来源：我的 One Drive。以往壁纸也可以在我的 <a href="https://1drv.ms/f/s!AuQ7aUGVDnCMkRYMlx5ntsikfCws">One Drive</a> 上找到。<br>很长很长时间以来，我都拿必应每日图片当壁纸，后来通过定时任务自动获取当日图片，每月图片打包分享到 One Drive，我还写了个 macOS 上的自动更换壁纸的工具 <a href="https://apps.apple.com/us/app/id1573715683">Tapet</a>，也欢迎使用。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>⭐️ <a href="https://weibo.com/ttarticle/p/show?id=2309404595026045829227&sudaref=passport.weibo.com">微博文章 - 一群穷孩子的人生实验</a>，来源：<a href="https://twitter.com/nishuang/status/1352113556163080194">Twitter - @nishuang</a>。<br>现实是残酷的，阶层突破也越来越难。</p><p><a href="https://www.one-among.us/">One Among Us</a>，来源：<a href="https://twitter.com/oneamong_us">Twitter - @oneamong_us</a>。</p><blockquote><p>死亡不是生命的终点，遗忘才是。<br>那些因为各种原因过早离开我们的生命，那些跨性别者和我们的顺性别伙伴们（allies），仍然是我们中的一员（one among us），在默默照顾着、陪伴着我们，赋予我们继续生活的勇气。或许现实中的纪念碑上写着的并不是 ta 们所中意的姓名，也未必体现了 ta 们真实的认同，但我们仍然可以在自己的纪念中实现这一切。<br>我是顺性别者，尊重性别光谱中的所有人群，也希望我们有更好的社会环境，避免对性少数群体的污名、歧视和暴力。</p></blockquote><p>⭐️ <a href="https://youtu.be/W05FYkqv7hM">How to Stop Holding Yourself Back | Simon Sinek</a>，来源：<a href="https://twitter.com/kevinzhow/status/1498191046752157696">Twitter - @kevinzhow</a>。<br>Taking control of your perspective can actually make you much more likely to succeed.</p><p><a href="https://www.tunnelbear.com/">Tunnel Bear - VPN</a>，来源：<a href="https://twitter.com/nishuang/status/1499523820658511877">Twitter - @nishuang</a>。<br>视觉设计非常可爱，完全不像 VPN。个人免费套餐每月 500MB，不过评价不是还好，不是很稳定，不过偶尔拿来应急也是可以的。</p><p>⭐️ <a href="https://twitter.com/Linmiv/status/1498165283609247746">@Linmi 老师在社交平台上选择的策略</a></p><blockquote><ol><li>减少评论；2. 多多点赞；3. 多多赞美；4. 忽略噪音</li></ol></blockquote><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>⭐️ <a href="https://coolshell.cn/articles/21003.html">CoolShell - 计时攻击 TIMING ATTACKS</a>，来源：<a href="https://www.v2ex.com/t/836620#r_11407979">v2ex</a>。<br>有时候算法的设计不光要考虑性能，还要考虑安全性。</p><p>⭐️ <a href="https://sspai.com/post/71863">从头梳理，看看中国的 ICP 备案制度</a>，来源：<a href="https://twitter.com/xiqingongzi/status/1500038262920192004">Twitter - @xiqingongzi</a>。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>⭐️ <a href="https://khushmeen.com/icons.html?ref=producthunt">Doodle icons</a>，来源：<a href="https://www.producthunt.com/posts/doodle-icons">Product Hunt</a>。<br>400+ 免费手绘图标，提供 PNG, SVG 和 figma 格式。</p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><p><a href="https://github.com/skywind3000/preserve-cd">绝版游戏保护工程</a>，来源：<a href="https://www.appinn.com/preserve-cd/">小众软件</a>。<br>绝版游戏保护工程是一个在 GitHub 的开源项目，收集了近 200 款 DOS 时代、早期 Windows 系统的单机游戏，目前只占用两张光盘的容量（640MB x 2），推荐给想要复古怀旧的朋友。</p><p><a href="https://github.com/xnth97/SymbolPicker">SymbolPicker</a>，来源：<a href="https://twitter.com/Lakr233/status/1498847856501075968">Twitter - @Lakr233</a>。<br>A simple and searchable SFSymbol Picker for SwiftUI.</p><p>⭐️ <a href="https://github.com/Lakr233/Rayon">Rayon</a>，来源：<a href="https://twitter.com/Lakr233/status/1499936615942492161">Twitter - @Lakr233</a>。<br>开源 Linux 服务器监控工具，也可以在 App Store 和 Mac App Store 下载其客户端。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第三期。&lt;/p&gt;
&lt;p&gt;上期把内容粗暴地分成技术类和非技术类，太宽泛了，这期把内容细分下。&lt;/p&gt;
&lt;h2 id=&quot;音乐&quot;&gt;&lt;a href=&quot;#音乐&quot; class=&quot;headerlink&quot; title=&quot;音乐&quot;&gt;&lt;/a&gt;音</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #2</title>
    <link href="http://kiligwyu.com/newsletter/2/"/>
    <id>http://kiligwyu.com/newsletter/2/</id>
    <published>2022-02-27T05:53:40.000Z</published>
    <updated>2022-02-28T06:11:46.315Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第二期。</p><p>感谢 <a href="https://twitter.com/coolXiao">Twitter - @coolXiao</a> 老师发起的的 <a href="https://twitter.com/coolXiao/status/1497026857602097154">宣传活动</a> 和转推，让我的周报多了些订阅者，也谢谢各位订阅的朋友。</p><p>自从上周开始写 newsletter，看到听到任何内容后都想随手记录下来，好写到下一期的 newsletter 里，但后来忽然意识到这是不对的，分享就要分享有价值的内容，不能把所有内容都列出来，所以从本期开始，只分享个人觉得有价值的内容。</p><!--- more ---><h2 id="非技术类"><a href="#非技术类" class="headerlink" title="非技术类"></a>非技术类</h2><ul><li>⭐️ <a href="https://sspai.com/post/71349">少数派 - 年度征文｜2021 年，拥抱一个关于女孩的梦</a></li><li>⭐️ <a href="https://steve.hedwig.pub/i/ping-jing-di-mian-dui-quan-wei-steve-shuo-mei-zhou-tong-xun-55">Newsletter - 平静地面对权威｜Steve 说每周通讯 #55</a></li><li>⭐️ <a href="https://daftpunk.lnk.to/Homework25th">Music - Homework (25th Anniversary Edition) - Daft Punk</a>，来源：<a href="https://twitter.com/nishuang/status/1496326961202962434">Twitter - @nishuang</a>。</li><li>⭐️ <a href="https://www.youtube.com/watch?v=tdNRyOoftVI">YouTube - 無界限講堂第一季「陳丹青：母語與母國」</a>, 来源：<a href="https://twitter.com/nixzhu/status/1497598308969496576">Twitter - @nixzhu</a>。非常好的演讲，准备把这一系列的讲座都看掉。</li><li>⭐️ <a href="https://www.youtube.com/watch?v=T0k62O52amM">YouTube - 徐州八孩母親 - 真實荒漠</a></li><li><a href="https://www.youtube.com/watch?v=7rrfJKS434s">YouTube - 亲密关系｜一个人就很好，为什么要取悦另一个人？｜什么是爱情，两个独立个体怎么样共同生活 - Ale</a></li></ul><blockquote><p>人的爱情是一种积极的力量，这种力量可以冲破人与人之间的高墙，并使人与人结合。爱情可以使人克服孤寂和与世隔绝感，但同时又使人保持对自己的忠诚，保持自己的完整性和本来的面貌。── 弗洛姆<br>爱不是一种感情，而是人与人之间的创造力。── 弗洛姆</p></blockquote><p>把 <a href="https://book.douban.com/subject/3026879/">《爱的艺术》- [美国] 艾・弗洛姆</a> 也加到 TODO 里了。</p><ul><li><a href="https://www.youtube.com/watch?v=ChOTz8tRf_4">YouTube - MISSING FINDER PROGRESS BAR FOUND | MAC</a>，来源：<a href="https://twitter.com/Megabits_mzq/status/1495700755944468480">Twitter - @Megabits_mzq</a>。macOS Finder 竟然可以隐藏复制进度条 🤣。</li><li>⭐️ <a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551744478">Podcasts - 我在澳门赌钱，被高利贷囚禁｜故事重播 - 故事 FM</a>，久赌必输，希望我们任何时候都不要碰赌博和高利贷。</li><li><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000552166363">Podcasts - E607. 乌克兰人自述：我们被抛弃了 - 故事 FM</a></li><li>⭐️ <a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000552096439">Podcasts - #202 上头又上瘾，我们的大脑在干嘛？- 声东击西</a>，对多巴胺、成瘾有了新的理解，把节目中提到的延伸阅读内容也加到 TODO 里。</li><li>⭐️ <a href="https://podcasts.apple.com/us/podcast/%E4%B8%89%E4%BA%94%E7%8E%AF/id1475113228?i=1000552008068">Podcasts - No.64 跟梵一如聊聊做播客的体会和对内容行业的认知 - 三五环</a>，对播客行业有了新的认识，前段时间也冒出过做播客的想法，不过对于我这样的素人，现在做播客做内容，有点难 🤣。</li><li><a href="https://twitter.com/MGinTonic/status/1495943279627714562">Twitter - “肆仟里夜送标书”</a>，来源：<a href="https://twitter.com/nishuang/status/1496172420335611905">Twitter - @nishuang</a>。</li><li><a href="https://www.warp.dev/">macOS App - Wrap</a>，来源：<a href="https://twitter.com/Megabits_mzq/status/1495686254968680450">Twitter - @Megabits_mzq</a>。macOS 原生终端，还在内测阶段，粗浅试用了一周，个人非常喜欢，之后会继续使用 Wrap。</li><li><a href="https://apps.apple.com/us/app/id1606306441">iOS App - 谜底黑胶</a>，来源：<a href="https://twitter.com/liuyi0922/status/1496643482366013440">Twitter - @liuyi0922</a>。在播放 Apple Music 时，在桌面小组件显示旋转的黑胶唱片，很有创意的 app，不过也有些 <a href="https://twitter.com/Megabits_mzq/status/1496674123631652864">争议</a>。</li><li>⭐️ <a href="https://www.zhangferry.com/2022/02/13/weekly_interview_fat/">Blog - 人物访谈 | 东坡肘子：健康 &amp; 开发</a></li></ul><h2 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h2><ul><li>⭐️ 看了<a href="https://space.bilibili.com/2919428/channel/seriesdetail?sid=1006553">bilibili - 南京大学《软件分析》课程 2020</a> 的前四节，李樾老师讲的非常好，理解了很多概念术语,对编译器及静态程序分析有了基本的认识和了解。来源：<a href="https://mp.weixin.qq.com/s/Ktk5wCMPZQ5E-UASwHD7uw">iOS摸鱼周报 第四十三期</a>。</li><li>⭐️ <a href="https://coolshell.cn/articles/22173.html">CoolShell - 一把梭：REST API 全用 POST</a>，陈皓老师讲得好，我是一个移动端开发者，经常看到一些写的很烂的接口 🤣。</li><li>⭐️ <a href="https://live.juejin.cn/4354/957689?utm_source=web2&utm_medium=web&utm_campaign=gongkaike03">【掘金公开课】独立之路：从 Side Project 开始你的商业生活</a>，白宦成老师的直播。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hi, 感谢订阅 Kilig 的碎周报，这里是碎周报第二期。&lt;/p&gt;
&lt;p&gt;感谢 &lt;a href=&quot;https://twitter.com/coolXiao&quot;&gt;Twitter - @coolXiao&lt;/a&gt; 老师发起的的 &lt;a href=&quot;https://twitter.c</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>Kilig 的碎周报 - #1</title>
    <link href="http://kiligwyu.com/newsletter/1/"/>
    <id>http://kiligwyu.com/newsletter/1/</id>
    <published>2022-02-20T14:40:02.964Z</published>
    <updated>2022-02-23T14:43:36.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么写周报"><a href="#为什么写周报" class="headerlink" title="为什么写周报"></a>为什么写周报</h2><p>我很长时间以来都是用邮件来处理稍后读内容，看到好的内容随手就转发到自己邮箱里，也订阅了很多 newsletter。最近 newsletter 又火了？，之前在 <a href="https://www.notion.so/kfang/Newsletter-68ee46c0a4574f659fb8a873ead438c6">中文 Newsletter 导航</a> 中订阅了不少创作者的 newsletter。上周在通勤路上，听完 <a href="https://etw.fm/">声东击西</a> 的 <a href="https://etw.fm/198">#198 反抗平台，与老派传播形式的复兴</a> 后，也决定创建一个自己的 newsletter，以记录与分享自己的所见所闻所想。</p><p>我的 newsletter 的订阅地址：<a href="https://www.getrevue.co/profile/Kilig">Kilig 的碎周报</a>，另外周报也将同时发布在 <a href="https://kiligwyu.com/">我的博客</a> 上，也可以通过 <a href="https://kiligwyu.com/atom.xml">RSS</a> 订阅。</p><p>以下是第 1 期周报的内容。</p><!--- more ---><h2 id="听了什么"><a href="#听了什么" class="headerlink" title="听了什么"></a>听了什么</h2><p>每天的通勤时间较长，自己开车要花费两个小时以上，路上就听听播客，以下播客链接均为 Apple Podcast 地址。</p><p>本周听的多，之前假期攒下来的 🤣。</p><h3 id="声东击西"><a href="#声东击西" class="headerlink" title="声东击西"></a><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640">声东击西</a></h3><p><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000551364382">#201 生育问题复杂，但还有更大隐忧</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000550655516">#200 群众基础，和那条通往夺冠之路</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?i=1000547760827">#198 反抗平台，与老派传播形式的复兴</a><br>也就是听了这期节目，才最后决定创建自己的 newsletter。</p><h3 id="故事-FM"><a href="#故事-FM" class="headerlink" title="故事 FM"></a><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960">故事 FM</a></h3><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551510242">E606. 我们在元宇宙里谈恋爱</a><br>挺有趣的两个人。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551263711">E605. 寻找小花梅，另一种存证</a><br>官方通告信他个鬼。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000551017296">E604. 出轨成瘾妻子的自白：我犯了男人都会犯的错</a><br>出轨只有零次和无数次</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000550780355">E603. 整理师自述：我收拾的不是房间，是破碎的爱</a><br>第一次知道还有整理师这个职业，整理不是东西，是家庭。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000550533924">E602. 北京冬奥会的「起点」，一家消失的滑雪场</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000550290745">E601. 韩寒、郭敬明之外，从新概念作文大赛走出的年轻人</a><br>我上学那会儿好像新概念作文挺火的，韩寒、郭敬明的作品看的很少。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000548799177">E598. 腐女和 0 的爱情：错把路灯当月光</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000548571467">E597. 几位鹤岗的「失意者」决定拍电影</a></p><p><a href="https://podcasts.apple.com/us/podcast/%E6%95%85%E4%BA%8B-fm/id1256399960?i=1000548330896">E596. 中国 UFO 往事</a><br>虽然有很多未解之谜，但目前也没确凿证据啊。</p><h3 id="三五环"><a href="#三五环" class="headerlink" title="三五环"></a><a href="https://podcasts.apple.com/us/podcast/%E4%B8%89%E4%BA%94%E7%8E%AF/id1475113228">三五环</a></h3><p><a href="https://podcasts.apple.com/us/podcast/no-63-%E8%B7%9F%E5%B0%91%E6%A5%A0%E8%81%8A%E8%81%8A%E6%88%91%E4%BB%AC%E4%BB%8E%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BE%97%E5%88%B0%E7%9A%84%E4%BA%A7%E5%93%81%E5%90%AF%E5%8F%91/id1475113228?i=1000551265138">No.63 跟少楠聊聊我们从游戏中得到的产品启发</a></p><p><a href="https://podcasts.apple.com/us/podcast/no-61-%E8%B7%9F-61-%E8%81%8A%E8%81%8A%E4%BB%96%E6%9B%B2%E6%8A%98%E5%8F%88%E5%9D%A6%E7%84%B6%E7%9A%84%E5%88%9B%E4%B8%9A%E6%95%85%E4%BA%8B/id1475113228?i=1000548957645">No.61 跟 61 聊聊他曲折又坦然的创业故事</a><br>关注刘老板很久了，非常喜欢刘老板对生活对产品的态度。</p><p><a href="https://podcasts.apple.com/us/podcast/no-57-%E8%B7%9F%E5%86%AF%E5%A4%A7%E8%BE%89%E8%81%8A%E8%81%8A%E5%81%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%8C%BB%E7%96%97%E4%BC%81%E4%B8%9A%E7%9A%84%E4%BD%93%E9%AA%8C/id1475113228?i=1000546231350">No.57 跟冯大辉聊聊做互联网医疗企业的体验</a></p><h3 id="枫言枫语"><a href="#枫言枫语" class="headerlink" title="枫言枫语"></a><a href="https://podcasts.apple.com/us/podcast/%E6%9E%AB%E8%A8%80%E6%9E%AB%E8%AF%AD/id1069600190">枫言枫语</a></h3><p><a href="https://podcasts.apple.com/us/podcast/vol-62-%E5%9C%A8%E5%A4%A7%E8%BF%9E%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB%E6%98%AF%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/id1069600190?i=1000550983283">Vol. 62 在大连工作生活是什么体验</a><br>对简阅的作者有了进一步的了解，终于知道了他去年在三亚呆那么久的原因了 🤣（同期我也去三亚玩了一星期）。<br>佩服伊洪兄。</p><h3 id="卖鱼桥分桥"><a href="#卖鱼桥分桥" class="headerlink" title="卖鱼桥分桥"></a><a href="https://podcasts.apple.com/us/podcast/%E5%8D%96%E9%B1%BC%E6%A1%A5%E5%88%86%E6%A1%A5/id1564630230">卖鱼桥分桥</a></h3><p><a href="https://podcasts.apple.com/us/podcast/42-%E5%9B%9E%E4%B9%A1%E7%9A%84%E8%B7%AF%E4%B8%8A-%E6%88%91%E8%BE%93%E7%BB%99%E4%BA%86%E4%B8%80%E5%BA%A7%E6%A1%A5/id1564630230?i=1000550249724">42. 回乡的路上，我输给了一座桥</a><br>现在还有这么世外桃源的地方？。</p><h3 id="世界莫名其妙物语"><a href="#世界莫名其妙物语" class="headerlink" title="世界莫名其妙物语"></a><a href="https://podcasts.apple.com/us/podcast/%E4%B8%96%E7%95%8C%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E7%89%A9%E8%AF%AD/id1513821443">世界莫名其妙物语</a></h3><p>这女子相声节目相当欢乐啊 😄。</p><p><a href="https://podcasts.apple.com/us/podcast/ep77-%E6%83%85%E4%BA%BA%E8%8A%82%E7%89%B9%E5%88%AB%E8%8A%82%E7%9B%AE-%E4%B8%96%E7%95%8C%E4%BA%BA%E6%B0%91%E5%90%83%E7%B1%B3%E9%A5%AD/id1513821443?i=1000550970708">EP77 情人节特别节目：世界人民吃米饭！</a></p><p><a href="https://podcasts.apple.com/us/podcast/ep76-%E7%88%B1%E6%83%85%E6%98%AF%E4%BB%80%E4%B9%88%E9%A2%9C%E8%89%B2%E7%9A%84/id1513821443?i=1000550243586">EP76 爱情是什么颜色的</a></p><p><a href="https://podcasts.apple.com/us/podcast/ep75-%E9%9B%B6%E5%9F%BA%E7%A1%80-%E7%A5%9E%E6%9B%B2-%E5%85%A5%E9%97%A8/id1513821443?i=1000548754941">EP75 零基础《神曲》入门</a></p><h3 id="UX-Coffee-设计咖"><a href="#UX-Coffee-设计咖" class="headerlink" title="UX Coffee 设计咖"></a><a href="https://podcasts.apple.com/us/podcast/ux-coffee-%E8%AE%BE%E8%AE%A1%E5%92%96/id1099551615">UX Coffee 设计咖</a></h3><p><a href="https://podcasts.apple.com/us/podcast/93-%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%AD%A2%E7%9A%84%E5%88%97%E8%BD%A6-hoka-%E7%9A%84-burnout-%E5%A3%B0%E9%9F%B3%E6%97%A5%E5%BF%97/id1099551615?i=1000550528491">#93：永不停止的列车（Hoka 的 burnout 声音日志）</a></p><h2 id="看了什么"><a href="#看了什么" class="headerlink" title="看了什么"></a>看了什么</h2><p><a href="https://www.bilibili.com/video/BV1R44y1H77u/">bilibili - 经验分享：非计算机专业的人如何转行程序员（宿琛）</a><br>还有价值的分享，把里面推荐的部分课程加到了 TODO 里了。</p><p><a href="https://www.aliyundrive.com/s/o94vsjtnn19">pdf - 高盛 2022 年全球经济展望（中文版）</a><br>该文件已被封杀了，难道是因为下面的两句话？阿里云盘还能下得到。</p><blockquote><p>世界第二大经济体中国的股票不仅大大低于美国股票的表现，而且也是所有主要股票市场中表现最差的，按人民币计算，总回报率为-21.2%。</p></blockquote><blockquote><p>同样，中国的高收益公司债 不仅明显低于美国的表现，而且是表现最差的市场之一，回报率为-26.3%。</p></blockquote><p><a href="https://www.v2ex.com/t/833951#reply40">v2ex - 8 万变 80 万</a><br><a href="https://twitter.com/xiqingongzi">白宦成</a> 老师对这位独立开发老哥的 <a href="https://twitter.com/xiqingongzi/status/1493456735180587008">错误总结</a> 非常到位，值得所有创业者和独立开发者深思。</p><h2 id="读了什么"><a href="#读了什么" class="headerlink" title="读了什么"></a>读了什么</h2><p>正在读《<a href="https://book.douban.com/subject/26264163/">跳舞女郎</a>》 - [加拿大] 玛格丽特・阿特伍德，很不错的短篇小说集。</p><hr><p>【完】</p><p>Thank you for subscribing. Have a great week.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么写周报&quot;&gt;&lt;a href=&quot;#为什么写周报&quot; class=&quot;headerlink&quot; title=&quot;为什么写周报&quot;&gt;&lt;/a&gt;为什么写周报&lt;/h2&gt;&lt;p&gt;我很长时间以来都是用邮件来处理稍后读内容，看到好的内容随手就转发到自己邮箱里，也订阅了很多 newslett</summary>
      
    
    
    
    <category term="碎周报" scheme="http://kiligwyu.com/categories/%E7%A2%8E%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="newsletter" scheme="http://kiligwyu.com/tags/newsletter/"/>
    
  </entry>
  
  <entry>
    <title>在 macOS Big Sur 上运行 Xcode 11</title>
    <link href="http://kiligwyu.com/run-xcode-11-on-big-sur/"/>
    <id>http://kiligwyu.com/run-xcode-11-on-big-sur/</id>
    <published>2021-05-14T02:35:28.000Z</published>
    <updated>2021-10-15T09:17:51.965Z</updated>
    
    <content type="html"><![CDATA[<p>从 iOS 14、Xcode 12 开始，Today Extension 被弃用，Xcode 12 不能再创建 Today Extension Target，需要在 Xcode 11 中创建，而在 macOS Big Sur 上已经打不开 Xcode 11 了，提示如下。</p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20210514101837.png" width="50%" height="50%"><!-- ![The version of Xcode installed on this Mac is not compatible with macOS Big Sur. Download the latest version for free from the App Store.](https://raw.githubusercontent.com/KiligWYu/Pics/master/20210514095838.png) --><p>不过还是有解决办法的，可以通过终端来打开 Xcode 11：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /Applications/Xcode_11.7.app/Contents/MacOS/Xcode</span><br></pre></td></tr></table></figure><!--- more ---><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://stackoverflow.com/questions/64505672/ios-how-to-add-today-extension-target-in-xcode-12-1">https://stackoverflow.com/questions/64505672/ios-how-to-add-today-extension-target-in-xcode-12-1</a></li><li><a href="https://stackoverflow.com/questions/64983664/is-it-possible-to-run-xcode11-in-macos-big-sur">https://stackoverflow.com/questions/64983664/is-it-possible-to-run-xcode11-in-macos-big-sur</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从 iOS 14、Xcode 12 开始，Today Extension 被弃用，Xcode 12 不能再创建 Today Extension Target，需要在 Xcode 11 中创建，而在 macOS Big Sur 上已经打不开 Xcode 11 了，提示如下。&lt;</summary>
      
    
    
    
    
    <category term="Xcode" scheme="http://kiligwyu.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>macOS 文件同步</title>
    <link href="http://kiligwyu.com/macos-rsync/"/>
    <id>http://kiligwyu.com/macos-rsync/</id>
    <published>2021-04-16T05:55:37.000Z</published>
    <updated>2021-10-15T09:09:07.368Z</updated>
    
    <content type="html"><![CDATA[<p>为了数据安全，我们经常需要备份文件，需要保持源文件夹与备份文件夹同步，在 macOS 下我们可以使用系统自带的 CLI 工具 <code>rsync</code> 进行文件同步。</p><h2 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h2><blockquote><p>rsync 是 Unix 下的一款 应用软件，它能同步更新两处计算机的档案与目录，並適当利用差分编码以减少数据传输量。rsync 中的一项同类软件不常见的重要特性是每个目標的镜像只需传送一次。rsync 可以拷贝／显示目录內容，以及拷贝档案，並可选压缩以及递归拷贝。—— 维基百科</p></blockquote><!--- more ---><p>macOS 系统自带的 <code>rsync</code> 版本较老，version 2.6.9，2006 年发布的版本了，十几年未更新了，我们可以使用 <a href="https://brew.sh/">Homebrew</a> 更新到最新版本，version 3.2.3。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rsync</span><br></pre></td></tr></table></figure><p>下面是我一个简单的备份博客的脚本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SOURCE_FOLDER=<span class="string">&quot;<span class="variable">$HOME</span>/Develop/Kilig/KiligWYu.com/&quot;</span></span><br><span class="line">DESTINATION_FOLDER=<span class="string">&quot;<span class="variable">$HOME</span>/OneDrive/Backups/Kilig/KiligWYu.com&quot;</span></span><br><span class="line">EXCLUDE_FOLDER_1=<span class="string">&quot;node_modules&quot;</span></span><br><span class="line">EXCLUDE_FOLDER_2=<span class="string">&quot;.deploy_git&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$DESTINATION_FOLDER</span>&quot;</span></span><br><span class="line">rsync -avu --delete --exclude=<span class="string">&quot;<span class="variable">$EXCLUDE_FOLDER_1</span>&quot;</span> --exclude=<span class="string">&quot;<span class="variable">$EXCLUDE_FOLDER_2</span>&quot;</span> <span class="string">&quot;<span class="variable">$SOURCE_FOLDER</span>&quot;</span> <span class="string">&quot;<span class="variable">$DESTINATION_FOLDER</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>-a</code> 等价于 <code>-rlptgoD</code>，保留所有文件系统属性</li><li><code>-v</code> 显示详细信息，显示同步的每一个文件，默认静默运行</li><li><code>-u</code> 仅复制修改时间较新的文件（如果时间相等，则复制大小不同的文件）</li><li><code>--delete</code> 删除目标文件夹中源文件中不存在的文件</li><li><code>--exclude=PATTERN</code> 忽略文件(夹)</li><li>另外需要注意的是源文件夹末尾的 <code>/</code>，带 <code>/</code> 表示拷贝源文件夹下的内容，不带 <code>/</code> 表示拷贝源文件夹</li></ul><p><code>rsync</code> 功能强大，可选参数非常多，<code>man rsync</code> 可查看其详细说明。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://rsync.samba.org/">https://rsync.samba.org</a></li><li><a href="https://wydtl.com/2020/01/18/347/">rsync, 是时候思考一下文件路径末尾的 “&#x2F;” 了</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了数据安全，我们经常需要备份文件，需要保持源文件夹与备份文件夹同步，在 macOS 下我们可以使用系统自带的 CLI 工具 &lt;code&gt;rsync&lt;/code&gt; 进行文件同步。&lt;/p&gt;
&lt;h2 id=&quot;rsync&quot;&gt;&lt;a href=&quot;#rsync&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="macOS" scheme="http://kiligwyu.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>LayoutConstraints Unable to simultaneously satisfy constraints</title>
    <link href="http://kiligwyu.com/LayoutConstraints-unable-to-simultaneously-satisfy-constraints/"/>
    <id>http://kiligwyu.com/LayoutConstraints-unable-to-simultaneously-satisfy-constraints/</id>
    <published>2021-03-25T08:36:14.000Z</published>
    <updated>2021-10-15T09:09:59.560Z</updated>
    
    <content type="html"><![CDATA[<p>首先请看以下代码，运行结果如何。</p><!--- more ---><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>(frame: .zero, style: .plain)</span><br><span class="line">        tableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.tableHeaderView <span class="operator">=</span> tableHeaderView</span><br><span class="line">        tableView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;CELL&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> tableHeaderView: <span class="type">UIView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> avatarImageView: <span class="type">UIImageView</span> <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(systemName: <span class="string">&quot;person.circle&quot;</span>))</span><br><span class="line">            imageView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> imageView</span><br><span class="line">        &#125;()</span><br><span class="line">        <span class="keyword">let</span> nameLabel: <span class="type">UILabel</span> <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">            label.numberOfLines <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            label.text <span class="operator">=</span> <span class="string">&quot;洛阳城里见秋风，欲作家书意万重&quot;</span></span><br><span class="line">            label.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> label</span><br><span class="line">        &#125;()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> view <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(origin: .zero,</span><br><span class="line">                                        size: <span class="type">CGSize</span>(width: <span class="type">UIScreen</span>.main.bounds.width, height: <span class="number">150</span>)))</span><br><span class="line">        view.addSubview(avatarImageView)</span><br><span class="line">        view.addSubview(nameLabel)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">            avatarImageView.widthAnchor.constraint(equalToConstant: <span class="number">50</span>),</span><br><span class="line">            avatarImageView.heightAnchor.constraint(equalToConstant: <span class="number">50</span>),</span><br><span class="line">            avatarImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),</span><br><span class="line">            avatarImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: <span class="number">16</span>),</span><br><span class="line">            </span><br><span class="line">            nameLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),</span><br><span class="line">            nameLabel.leadingAnchor.constraint(equalTo: avatarImageView.trailingAnchor, constant: <span class="number">12</span>),</span><br><span class="line">            nameLabel.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: <span class="operator">-</span><span class="number">16</span>),</span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        view.addSubview(tableView)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">            tableView.topAnchor.constraint(equalTo: view.topAnchor),</span><br><span class="line">            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),</span><br><span class="line">            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),</span><br><span class="line">            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewController</span>: <span class="title class_">UITableViewDelegate</span>, <span class="title class_">UITableViewDataSource</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;CELL&quot;</span>, for: indexPath)</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(indexPath.row)</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(indexPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，运行之后页面显示正常，但控制台输出了一些约束错误信息：</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20210325165120.png" alt="Unable-to-simultaneously-satisfy-constraints"></p><p>先说解决方法，<code>nameLabel</code> 的约束稍加修改：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">...</span></span><br><span class="line">        nameLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),</span><br><span class="line">        nameLabel.leadingAnchor.constraint(equalTo: avatarImageView.trailingAnchor, constant: <span class="number">12</span>),</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">let</span> nameLabelTrailingConstraint <span class="operator">=</span></span><br><span class="line">        nameLabel.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: <span class="operator">-</span><span class="number">16</span>)</span><br><span class="line">    nameLabelTrailingConstraint.priority <span class="operator">=</span> .defaultHigh</span><br><span class="line">    nameLabelTrailingConstraint.isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> view</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line"><span class="operator">...</span></span><br></pre></td></tr></table></figure><p>当自定义 tableView 的 <code>tableHeaderView</code> 或 <code>tableFooterView</code> 时会遇到这样的错误，如果设置<br><code>tableHeaderView.translatesAutoresizingMaskIntoConstraints = false</code><br>页面显示就更不对了，解决方法就是设置下约束的优先级，就如上边设置 <code>nameLabel</code> 的 <code>trailingConstraint</code> 的优先级。</p><hr><ul><li><a href="https://medium.com/@GoalStack/uiview-encapsulated-layout-width-and-height-constraints-error-10cd25b5fa5e">UIView-Encapsulated-Layout-Width and Height Constraints error</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先请看以下代码，运行结果如何。&lt;/p&gt;
&lt;!--- more ---&gt;

&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Scroll to row for UITableView after reloadData</title>
    <link href="http://kiligwyu.com/scroll-to-row-for-UITableView-after-reloadData/"/>
    <id>http://kiligwyu.com/scroll-to-row-for-UITableView-after-reloadData/</id>
    <published>2021-03-25T07:23:13.000Z</published>
    <updated>2021-10-15T09:17:55.596Z</updated>
    
    <content type="html"><![CDATA[<p>在 tableView <code>reloadData</code> 后滑动到指定位置，比如下拉加载更多聊天记录，并保持列表的当前位置。</p><!--- more ---><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.scrollToRow(at: indexPath, at: .top, animated: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>但是列表有跳动，滑动的位置并不对。解决方法也很简单，在 reloadData 后调用下 <code>tableView.layoutIfNeeded()</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableView.reloadData()</span><br><span class="line">tableView.layoutIfNeeded()</span><br><span class="line">tableView.scrollToRow(at: indexPath, at: .top, animated: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><a href="https://stackoverflow.com/questions/16071503/how-to-tell-when-uitableview-has-completed-reloaddata">How to tell when UITableView has completed ReloadData?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 tableView &lt;code&gt;reloadData&lt;/code&gt; 后滑动到指定位置，比如下拉加载更多聊天记录，并保持列表的当前位置。&lt;/p&gt;
&lt;!--- more ---&gt;

&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>UIStackView 的 removeArrangedSubview 方法</title>
    <link href="http://kiligwyu.com/removeArrangedSubview/"/>
    <id>http://kiligwyu.com/removeArrangedSubview/</id>
    <published>2021-03-25T06:23:36.000Z</published>
    <updated>2021-10-15T09:14:33.908Z</updated>
    
    <content type="html"><![CDATA[<p>当在 UITableViewCell 中使用了 UIStackView 时，在 <code>prepareForReuse()</code> 中调用了 UIStackView 的 <code>removeArrangedSubview:</code> 方法，发现 cell 重用时依然会显示错乱，查了一下文档，发现调用 <code>removeArrangedSubview:</code> 后，子 view 并不会从视图中移除，需要额外调用 <code>removeFromSuperview()</code> 方法。</p><!--- more ---><p>Apple 官方文档：</p><blockquote><p>This method removes the provided view from the stack’s <code>arrangedSubviews</code> array. The view’s position and size will no longer be managed by the stack view. <strong>However, this method does not remove the provided view from the stack’s <code>subviews</code> array; therefore, the view is still displayed as part of the view hierarchy.</strong><br><strong>To prevent the view from appearing on screen after calling the stack’s <code>removeArrangedSubview:</code> method, explicitly remove the view from the subviews array by calling the view’s <code>removeFromSuperview()</code> method</strong>, or set the view’s <code>isHidden</code> property to true.</p></blockquote><hr><ul><li><a href="https://developer.apple.com/documentation/uikit/uistackview/1616235-removearrangedsubview">https://developer.apple.com/documentation/uikit/uistackview/1616235-removearrangedsubview</a></li><li><a href="https://www.hackingwithswift.com/read/31/4/removing-views-from-a-uistackview-with-removearrangedsubview">Removing views from a UIStackView with removeArrangedSubview()</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当在 UITableViewCell 中使用了 UIStackView 时，在 &lt;code&gt;prepareForReuse()&lt;/code&gt; 中调用了 UIStackView 的 &lt;code&gt;removeArrangedSubview:&lt;/code&gt; 方法，发现 cell </summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Alfred 以管理员身份执行脚本</title>
    <link href="http://kiligwyu.com/Alfred-do-shell-script-with-administrator-privileges/"/>
    <id>http://kiligwyu.com/Alfred-do-shell-script-with-administrator-privileges/</id>
    <published>2020-12-12T08:50:25.000Z</published>
    <updated>2021-10-15T09:20:12.226Z</updated>
    
    <content type="html"><![CDATA[<p>为提高工作效率，我们经常会写一些自动化脚本，也会使用些效率工具，比如 Alfred，两者相结合，借助 Alfred 来快速执行些脚本，但有些脚本需要以管理员身份执行，那么如何在 Alfred 中以管理员身份来执行脚本呢？</p><!--- more --><p>需要借助于 AppleScript，在 Alfred 的 workflow action 中选择 <code>Run NSAppleScript</code>，不过这样会在 Alfred 的主线程中执行，要在后台执行可以选择 <code>Run Script</code> action， 并在 Language 中选中 <code>/usr/bin/osascript (AS) </code>，脚本内容为 <code>do shell script &quot;脚本路径&quot; with administrator privileges</code>，这样就可以在后台以管理员身份执行脚本了。如下图</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20201212171932.png" alt="e.g."></p><p>另，上图中的脚本为自动切换正式版和 beta 版 Xcode：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># switch between release and beta xcodes</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">xcswitch</span></span>() &#123;</span><br><span class="line">    RELEASE=<span class="string">&quot;Xcode.app&quot;</span></span><br><span class="line">    BETA=<span class="string">&quot;Xcode-beta.app&quot;</span></span><br><span class="line"></span><br><span class="line">    CURRENT=$(xcode-select -p)</span><br><span class="line">    NEXT=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$CURRENT</span>&quot;</span> =~ <span class="string">&quot;<span class="variable">$RELEASE</span>&quot;</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        NEXT=<span class="string">&quot;<span class="variable">$BETA</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        NEXT=<span class="string">&quot;<span class="variable">$RELEASE</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    sudo xcode-select -s <span class="string">&quot;/Applications/<span class="variable">$NEXT</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Switched to <span class="variable">$NEXT</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xcswitch</span><br></pre></td></tr></table></figure><hr><ul><li><a href="https://www.jessesquires.com/blog/2020/07/07/quickly-switching-between-xcodes/">Quickly switching between Xcodes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为提高工作效率，我们经常会写一些自动化脚本，也会使用些效率工具，比如 Alfred，两者相结合，借助 Alfred 来快速执行些脚本，但有些脚本需要以管理员身份执行，那么如何在 Alfred 中以管理员身份来执行脚本呢？&lt;/p&gt;
&lt;!--- more --&gt;

&lt;p&gt;需要借</summary>
      
    
    
    
    
    <category term="App" scheme="http://kiligwyu.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>Fix Xcode source editor extension not visible in System Preferences - Extensions</title>
    <link href="http://kiligwyu.com/fix-Xcode-source-editor-extension-not-visible-in-System-Preferences-Extensions/"/>
    <id>http://kiligwyu.com/fix-Xcode-source-editor-extension-not-visible-in-System-Preferences-Extensions/</id>
    <published>2020-04-19T09:21:55.000Z</published>
    <updated>2020-04-19T09:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现 Xcode 插件失效了，在「系统偏好设置 - 拓展」里，Xcode Source Editor 也不见了。最后在 <a href="https://github.com/nicklockwood/SwiftFormat/issues/494">这里</a> 找到了解决方法。</p><!--- more ---><blockquote><p>The article <a href="https://nshipster.com/xcode-source-extensions/">Xcode​Kit and Xcode Source Editor Extensions</a> by Zoë Smith, March 25th, 2019, says:</p><p><em>Finally, when multiple copies of Xcode are on the same machine, extensions can stop working completely. In this case, Apple Developer Relations suggests re-registering your main copy of Xcode with Launch Services (it’s easiest to temporarily add lsregister’s location to PATH first):</em></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ PATH=/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support:<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">$ lsregister -f /Applications/Xcode.app</span><br></pre></td></tr></table></figure><p>因为之前我有多个版本的 Xcode，<code>Xcode_10.3.app</code>、<code>Xcode_11.3.1.app</code>、<code>Xcode_11.4.app</code> 等，从 App Store 下载最新版 Xcode (11.4.1) 后，删掉了旧的 Xcode，就出现了这个问题，在终端执行以上命令后就好了。</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20200419174843.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/nicklockwood/SwiftFormat/issues/494">https://github.com/nicklockwood/SwiftFormat/issues/494</a></li><li><a href="https://nshipster.com/xcode-source-extensions/">Xcode​Kit and Xcode Source Editor Extensions</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天发现 Xcode 插件失效了，在「系统偏好设置 - 拓展」里，Xcode Source Editor 也不见了。最后在 &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat/issues/494&quot;&gt;这里&lt;/a&gt; 找到了</summary>
      
    
    
    
    
    <category term="Xcode" scheme="http://kiligwyu.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>优化 Microsoft AutoUpdate 下载慢的问题</title>
    <link href="http://kiligwyu.com/%E4%BC%98%E5%8C%96MicrosoftAutoUpdate%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://kiligwyu.com/%E4%BC%98%E5%8C%96MicrosoftAutoUpdate%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-16T14:29:09.000Z</published>
    <updated>2020-03-16T14:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近 Microsoft AutoUpdate 下载特别慢，还经常失败，于是在 Console 中看了下它的日志，发现其访问了 <code>azurewebsites.net</code> 和 <code>akamaized.net</code>，下载是从 <code>akamaized.net</code> 这里下载的。于是把这两个域名都加入到某软件的自定义规则中，然后下载就快多了。</p><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20200316223835.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近 Microsoft AutoUpdate 下载特别慢，还经常失败，于是在 Console 中看了下它的日志，发现其访问了 &lt;code&gt;azurewebsites.net&lt;/code&gt; 和 &lt;code&gt;akamaized.net&lt;/code&gt;，下载是从 &lt;code&gt;ak</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 编程题 in Swift</title>
    <link href="http://kiligwyu.com/%E5%89%91%E6%8C%87Offer%E7%BC%96%E7%A8%8B%E9%A2%98inSwift/"/>
    <id>http://kiligwyu.com/%E5%89%91%E6%8C%87Offer%E7%BC%96%E7%A8%8B%E9%A2%98inSwift/</id>
    <published>2020-03-16T07:20:05.000Z</published>
    <updated>2021-10-15T09:18:05.643Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0">1. 赋值运算符函数</a></li><li><a href="#2-%E5%AE%9E%E7%8E%B0-Singleton-%E6%A8%A1%E5%BC%8F">2. 实现 Singleton 模式</a></li><li><a href="#3-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97">3. 数组中重复的数字</a><ul><li><a href="#3-1-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97">3.1 找出数组中重复的数字</a></li><li><a href="#3-2-%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97">3.2 不修改数组找出重复的数字</a></li></ul></li><li><a href="#4-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE">4. 二维数组中的查找</a></li><li><a href="#5-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC">5. 替换空格</a></li><li><a href="#6-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8">6. 从尾到头打印链表</a></li><li><a href="#7-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91">7. 重建二叉树</a></li><li><a href="#8-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9">8. 二叉树的下一个节点</a></li><li><a href="#9-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">9. 用两个栈实现队列</a></li><li><a href="#10-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">10. 斐波那契数列</a><ul><li><a href="#10-1-%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%AC-n-%E9%A1%B9">10.1 求斐波那契数列的第 n 项</a></li><li><a href="#10-2-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98">10.2 青蛙跳台阶问题</a></li></ul></li><li><a href="#11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97">11. 旋转数组的最小数字</a></li><li><a href="#%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD">未完待续</a></li></ul><!--- more ---><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="1-赋值运算符函数"><a href="#1-赋值运算符函数" class="headerlink" title="1. 赋值运算符函数"></a>1. 赋值运算符函数</h1><p>Swift 支持运算符重载、<a href="https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID46">自定义运算符</a>。</p><blockquote><p>注意</p><p>以下这些标记 <code>=</code>、<code>-&gt;</code>、<code>//</code>、<code>/*</code>、<code>*/</code>、<code>.</code>，前缀运算符 <code>&lt;</code>、<code>&amp;</code> 和 <code>?</code>，中缀运算符 <code>?</code>，后缀运算符 <code>&gt;</code>、<code>!</code> 和 <code>?</code> 是被系统保留的。这些符号不能被重载，也不能用作自定义运算符。</p></blockquote><p>哪些字符能用于自定义运算符，可见 <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418">https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418</a>。</p><p>下面以重载 <code>*</code> 为例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">*</span>(<span class="params">lhs</span>: <span class="type">String</span>, <span class="params">rhs</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> result <span class="operator">=</span> lhs</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>rhs &#123;</span><br><span class="line">     result <span class="operator">+=</span> lhs</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="string">&quot;a&quot;</span> <span class="operator">*</span> <span class="number">5</span> <span class="comment">// &quot;aaaaa&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-实现-Singleton-模式"><a href="#2-实现-Singleton-模式" class="headerlink" title="2. 实现 Singleton 模式"></a>2. 实现 Singleton 模式</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本的 Swift 单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton_1</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">Singleton_1</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例中静态属性的额外作用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton_2</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> _shared <span class="operator">=</span> <span class="type">Singleton_2</span>()</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> shared: <span class="type">Singleton_2</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;do something&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> _shared</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>对于单例而言，请使用引用类型；</li><li>将单例类型标记为 <code>final</code>，其实例标记为 <code>public</code>，构造器标记为 <code>private</code>；</li><li>在命名的时候，尽量使用更符合 Swift 风格的 <code>shared</code>，而不是 Objective-C 风格的 <code>sharedInstance</code>；</li><li>如果在获取单例的时候还需要引入其他的额外作用，那么可以创建一个静态的只读属性。</li></ul></blockquote><h1 id="3-数组中重复的数字"><a href="#3-数组中重复的数字" class="headerlink" title="3. 数组中重复的数字"></a>3. 数组中重复的数字</h1><h2 id="3-1-找出数组中重复的数字"><a href="#3-1-找出数组中重复的数字" class="headerlink" title="3.1 找出数组中重复的数字"></a>3.1 找出数组中重复的数字</h2><blockquote><p>在一个长度为 n 的数组里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为 7 的数组｛2，3，1，0，2，5，3｝，那么对应的输出是重复的数字 2 或者 3。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getDuplicate</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">guard</span> <span class="operator">!</span>array.contains(where: &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">||</span> <span class="variable">$0</span> <span class="operator">&gt;</span> array.count <span class="operator">-</span> <span class="number">1</span> &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">while</span> array[i] <span class="operator">!=</span> i &#123;</span><br><span class="line">      <span class="keyword">if</span> array[i] <span class="operator">==</span> array[array[i]] &#123;</span><br><span class="line">        <span class="keyword">return</span> array[i]</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      array.swapAt(i, array[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;no duplication&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> array2: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="keyword">var</span> array3 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="operator">-</span><span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> array4 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> array5 <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array1) <span class="comment">// 2</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array2) <span class="comment">// nil, input is empty</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array3) <span class="comment">// nil, input is invalid</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array4) <span class="comment">// nil, input is invalid</span></span><br><span class="line">getDuplicate(<span class="operator">&amp;</span>array5) <span class="comment">// nil, no duplication</span></span><br></pre></td></tr></table></figure><p>时间复杂度为 O(n)，空间复杂度为 O(1)</p><h2 id="3-2-不修改数组找出重复的数字"><a href="#3-2-不修改数组找出重复的数字" class="headerlink" title="3.2 不修改数组找出重复的数字"></a>3.2 不修改数组找出重复的数字</h2><blockquote><p>在一个长度为 n+1 的数组里的所有数字都在 1~n 的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为 8 的数组｛2，3，5，4，3，2，6，7｝，那么对应的输出是重复的数字 2 或者 3</p></blockquote><blockquote><p>二分查找</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">getDuplicate</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is empty&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">guard</span> <span class="operator">!</span>array.contains(where: &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">1</span> <span class="operator">||</span> <span class="variable">$0</span> <span class="operator">&gt;</span> array.count <span class="operator">-</span> <span class="number">1</span> &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">1</span>, right <span class="operator">=</span> array.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> right <span class="operator">&gt;=</span> left &#123;</span><br><span class="line">    <span class="keyword">let</span> middle <span class="operator">=</span> (right <span class="operator">-</span> left) <span class="operator">&gt;&gt;</span> <span class="number">1</span> <span class="operator">+</span> left</span><br><span class="line">    <span class="keyword">let</span> count <span class="operator">=</span> _helper(array, left: left, right: middle)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left <span class="operator">==</span> right &#123;</span><br><span class="line">      <span class="keyword">if</span> count <span class="operator">&gt;</span> <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> count <span class="operator">&gt;</span> middle <span class="operator">-</span> left <span class="operator">+</span> <span class="number">1</span> &#123;</span><br><span class="line">      right <span class="operator">=</span> middle</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      left <span class="operator">=</span> middle <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">_helper</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>], <span class="params">left</span>: <span class="type">Int</span>, <span class="params">right</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">if</span> array[i] <span class="operator">&gt;=</span> left, array[i] <span class="operator">&lt;=</span> right &#123;</span><br><span class="line">      count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">getDuplicate(array) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>时间复杂度为 O(nlogn)，空间复杂度为 O(1)</p><blockquote><p>需要指出的是，这种算法不能保证找出所有重复的数字。例如，该算法不能找出数组｛2，3，5，4，3，2，6，7｝中重复的数字 2。这是因为在 1~2 的范围里有 1 和 2 两个数字，这个范围的数字也出现 2 次，此时我们用该算法不能确定是每个数字各出现一次还是某个数字出现了两次。</p></blockquote><h1 id="4-二维数组中的查找"><a href="#4-二维数组中的查找" class="headerlink" title="4. 二维数组中的查找"></a>4. 二维数组中的查找</h1><blockquote><p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><blockquote><p>右上角、左下角</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">find</span>(<span class="keyword">_</span> <span class="params">number</span>: <span class="type">Int</span>, <span class="params">in</span> <span class="params">array</span>: [[<span class="type">Int</span>]]) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rows <span class="operator">=</span> array.count</span><br><span class="line">  <span class="keyword">guard</span> rows <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> columns <span class="operator">=</span> array[<span class="number">0</span>].count</span><br><span class="line">  <span class="keyword">guard</span> columns <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input is invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> row <span class="operator">=</span> <span class="number">0</span>, column <span class="operator">=</span> columns <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> row <span class="operator">&lt;</span> rows, column <span class="operator">&gt;=</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> number <span class="operator">==</span> array[row][column] &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number <span class="operator">&lt;</span> array[row][column] &#123;</span><br><span class="line">      column <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      row <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">find(<span class="number">7</span>, in: array) <span class="comment">// true</span></span><br><span class="line">find(<span class="number">1</span>, in: array) <span class="comment">// true</span></span><br><span class="line">find(<span class="number">15</span>, in: array) <span class="comment">// true</span></span><br><span class="line">find(<span class="number">20</span>, in: array) <span class="comment">// false</span></span><br><span class="line">find(<span class="number">0</span>, in: array) <span class="comment">// false</span></span><br><span class="line">find(<span class="number">3</span>, in: array) <span class="comment">// false</span></span><br><span class="line">find(<span class="number">5</span>, in: []) <span class="comment">// false, input is invalid</span></span><br></pre></td></tr></table></figure><h1 id="5-替换空格"><a href="#5-替换空格" class="headerlink" title="5. 替换空格"></a>5. 替换空格</h1><blockquote><p>题目：请实现一个函数，把字符串中的每个空格替换成“％20”例如，输入“We are happy.”，则输出“We％20are％20happy.”。</p></blockquote><blockquote><p>倒序、双指针</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">replaceBlank</span>(<span class="keyword">_</span> <span class="params">string</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> chars <span class="operator">=</span> <span class="type">Array</span>(string)</span><br><span class="line">  <span class="keyword">let</span> blankCount <span class="operator">=</span> chars.filter &#123; <span class="variable">$0</span> <span class="operator">==</span> <span class="string">&quot; &quot;</span> &#125;.count</span><br><span class="line">  chars.append(contentsOf:</span><br><span class="line">    <span class="type">Array</span>(repeating: <span class="string">&quot; &quot;</span>, count: blankCount <span class="operator">*</span> <span class="number">2</span>)</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> p1 <span class="operator">=</span> string.count <span class="operator">-</span> <span class="number">1</span>, p2 <span class="operator">=</span> chars.count <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> p1 <span class="operator">!=</span> p2 &#123;</span><br><span class="line">    <span class="keyword">if</span> chars[p1] <span class="operator">!=</span> <span class="string">&quot; &quot;</span> &#123;</span><br><span class="line">      chars[p2] <span class="operator">=</span> chars[p1]</span><br><span class="line">      p2 <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      chars[p2] <span class="operator">=</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">      chars[p2 <span class="operator">-</span> <span class="number">1</span>] <span class="operator">=</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">      chars[p2 <span class="operator">-</span> <span class="number">2</span>] <span class="operator">=</span> <span class="string">&quot;%&quot;</span></span><br><span class="line">      p2 <span class="operator">-=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    p1 <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="type">String</span>(chars)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">replaceBlank(<span class="string">&quot;We are happy.&quot;</span>) <span class="comment">// &quot;We%20are%20happy.&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot; We are happy. &quot;</span>) <span class="comment">// &quot;%20We%20are%20happy.%20&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot;Wearehappy.&quot;</span>) <span class="comment">// &quot;Wearehappy.&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot;  &quot;</span>) <span class="comment">// &quot;%20%20&quot;</span></span><br><span class="line">replaceBlank(<span class="string">&quot;&quot;</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="6-从尾到头打印链表"><a href="#6-从尾到头打印链表" class="headerlink" title="6. 从尾到头打印链表"></a>6. 从尾到头打印链表</h1><blockquote><p>题目：输入一个链表的头节点，从尾到头反过来打印出每个节点的值。</p></blockquote><blockquote><p>栈、递归</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printListReversingly</span>(<span class="keyword">_</span> <span class="params">node</span>: <span class="type">ListNode</span>&lt;<span class="type">Int</span>&gt;?) &#123;</span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> node <span class="operator">=</span> node <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;node is nil&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> node.next <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    printListReversingly(node.next<span class="operator">!</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&lt;<span class="title class_">Int</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> value: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> next: <span class="type">ListNode</span>&lt;<span class="type">Int</span>&gt;?</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(<span class="params">value</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">1</span>)</span><br><span class="line">head.next <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">2</span>)</span><br><span class="line">head.next<span class="operator">?</span>.next <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">3</span>)</span><br><span class="line">head.next<span class="operator">?</span>.next<span class="operator">?</span>.next <span class="operator">=</span> <span class="type">ListNode</span>(value: <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">printListReversingly(head) <span class="comment">// 4 3 2 1</span></span><br><span class="line">printListReversingly(head.next<span class="operator">?</span>.next<span class="operator">?</span>.next) <span class="comment">// 4</span></span><br><span class="line">printListReversingly(head.next<span class="operator">?</span>.next<span class="operator">?</span>.next<span class="operator">?</span>.next) <span class="comment">// node is nil</span></span><br></pre></td></tr></table></figure><h1 id="7-重建二叉树"><a href="#7-重建二叉树" class="headerlink" title="7. 重建二叉树"></a>7. 重建二叉树</h1><blockquote><p>题目：输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p></blockquote><p>二叉树：<code>除根节点之外每个节点只有一个父节点，根节点没有父节点；除叶节点之外所有节点都有一个或多个子节点，叶节点没有子节点。父节点和子节点之间用指针链接。</code></p><ul><li>前序遍历：先访问根节点，再访问左子节点，最后访问右子节点。</li><li>中序遍历：先访问左子节点，再访问根节点，最后访问右子节点。</li><li>后序遍历：先访问左子节点，再访问右子节点，最后访问根节点。</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/384px-Binary_tree.svg.png"></p><p>以上图为例：</p><p>前序遍历：2, 7, 2, 6, 5, 11, 5, 9, 4<br>中序遍历：2, 7, 5, 6, 11, 2, 5, 4, 9<br>后序遍历：2, 5, 11, 6, 7, 4, 9, 5, 2</p><blockquote><p>递归</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">construct</span>(<span class="params">preorder</span>: [<span class="type">Int</span>], <span class="params">inorder</span>: [<span class="type">Int</span>]) -&gt; <span class="type">BinaryTreeNode</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> preorder.count <span class="operator">&gt;</span> <span class="number">0</span>, preorder.count <span class="operator">==</span> inorder.count <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> _helper(preorder, inorder)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">_helper</span>(<span class="keyword">_</span> <span class="params">preorder</span>: [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">inorder</span>: [<span class="type">Int</span>]) -&gt; <span class="type">BinaryTreeNode</span>? &#123;</span><br><span class="line">  <span class="keyword">let</span> root <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: preorder.first<span class="operator">!</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> preorder.count <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> inorder.count <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> root</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// find root node in inorder</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> rootIndex <span class="operator">=</span> inorder.firstIndex(of: preorder.first<span class="operator">!</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Invalid input&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> leftInorder <span class="operator">=</span> inorder[<span class="operator">..&lt;</span>rootIndex]</span><br><span class="line">  <span class="keyword">let</span> rightInorder <span class="operator">=</span> inorder[(rootIndex <span class="operator">+</span> <span class="number">1</span>)<span class="operator">...</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// construct left subtree</span></span><br><span class="line">  <span class="keyword">if</span> leftInorder.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">    root.left <span class="operator">=</span> _helper(<span class="type">Array</span>(preorder[<span class="number">1</span><span class="operator">...</span>rootIndex]),</span><br><span class="line">                        <span class="type">Array</span>(leftInorder))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// construct right subtree</span></span><br><span class="line">  <span class="keyword">if</span> rightInorder.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">    root.right <span class="operator">=</span> _helper(<span class="type">Array</span>(preorder[(rootIndex <span class="operator">+</span> <span class="number">1</span>)<span class="operator">...</span>]),</span><br><span class="line">                         <span class="type">Array</span>(rightInorder))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTreeNode</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> left: <span class="type">BinaryTreeNode</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">var</span> right: <span class="type">BinaryTreeNode</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(<span class="params">value</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> root <span class="operator">=</span> construct(preorder: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>],</span><br><span class="line">                     inorder: [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">root<span class="operator">?</span>.value <span class="comment">// 1</span></span><br><span class="line">root<span class="operator">?</span>.left<span class="operator">?</span>.value <span class="comment">// 2</span></span><br><span class="line">root<span class="operator">?</span>.left<span class="operator">?</span>.left<span class="operator">?</span>.value <span class="comment">// 4</span></span><br><span class="line">root<span class="operator">?</span>.left<span class="operator">?</span>.left<span class="operator">?</span>.right<span class="operator">?</span>.value <span class="comment">// 7</span></span><br><span class="line">root<span class="operator">?</span>.right<span class="operator">?</span>.value <span class="comment">// 3</span></span><br><span class="line">root<span class="operator">?</span>.right<span class="operator">?</span>.right<span class="operator">?</span>.left<span class="operator">?</span>.value <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Invalid input</span></span><br><span class="line"><span class="keyword">let</span> root2 <span class="operator">=</span> construct(preorder: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>],</span><br><span class="line">                      inorder: [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><h1 id="8-二叉树的下一个节点"><a href="#8-二叉树的下一个节点" class="headerlink" title="8. 二叉树的下一个节点"></a>8. 二叉树的下一个节点</h1><blockquote><p>题目：给定一棵二叉树和其中的一个节点，如何找出中序遍历序列的下一个节点？树中的节点除了有两个分别指向左、右子节点的指针，还有个指向父节点的指针。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getNext</span>(<span class="params">node</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">String</span>&gt;) -&gt; <span class="type">BinaryTreeNode</span>&lt;<span class="type">String</span>&gt;? &#123;</span><br><span class="line">  <span class="keyword">if</span> node.right <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next <span class="operator">=</span> node.right</span><br><span class="line">    <span class="keyword">while</span> next<span class="operator">!</span>.left <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">      next <span class="operator">=</span> next<span class="operator">!</span>.left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> node.parent <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next: <span class="type">BinaryTreeNode</span>? <span class="operator">=</span> node, parent <span class="operator">=</span> node.parent</span><br><span class="line">    <span class="keyword">while</span> parent <span class="operator">!=</span> <span class="literal">nil</span>, parent<span class="operator">?</span>.right <span class="operator">==</span> next &#123;</span><br><span class="line">      next <span class="operator">=</span> parent</span><br><span class="line">      parent <span class="operator">=</span> parent<span class="operator">?</span>.parent</span><br><span class="line">    &#125;</span><br><span class="line">    next <span class="operator">=</span> parent</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTreeNode</span>&lt;<span class="title class_">T</span>&gt; <span class="title class_">where</span> <span class="title class_">T</span>: <span class="title class_">Equatable</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">  <span class="keyword">var</span> left: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">var</span> right: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> parent: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(<span class="params">value</span>: <span class="type">T</span>, <span class="params">parent</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">    <span class="keyword">self</span>.parent <span class="operator">=</span> parent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">BinaryTreeNode</span>: <span class="title class_">Equatable</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;, <span class="params">rhs</span>: <span class="type">BinaryTreeNode</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.value <span class="operator">==</span> rhs.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;a&quot;</span>)</span><br><span class="line">a.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;b&quot;</span>, parent: a)</span><br><span class="line">a.left<span class="operator">?</span>.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;d&quot;</span>, parent: a.left)</span><br><span class="line">a.left<span class="operator">?</span>.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;e&quot;</span>, parent: a.left)</span><br><span class="line">a.left<span class="operator">?</span>.right<span class="operator">?</span>.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;h&quot;</span>, parent: a.left<span class="operator">?</span>.right)</span><br><span class="line">a.left<span class="operator">?</span>.right<span class="operator">?</span>.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;i&quot;</span>, parent: a.left<span class="operator">?</span>.right)</span><br><span class="line"></span><br><span class="line">a.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;c&quot;</span>, parent: a)</span><br><span class="line">a.right<span class="operator">?</span>.left <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;f&quot;</span>, parent: a.right)</span><br><span class="line">a.right<span class="operator">?</span>.right <span class="operator">=</span> <span class="type">BinaryTreeNode</span>(value: <span class="string">&quot;g&quot;</span>, parent: a.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> a.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> a.left<span class="operator">!</span>.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> a.left<span class="operator">!</span>.right<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> h <span class="operator">=</span> a.left<span class="operator">!</span>.right<span class="operator">!</span>.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> a.left<span class="operator">!</span>.right<span class="operator">!</span>.right<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> a.right<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> f <span class="operator">=</span> a.right<span class="operator">!</span>.left<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> g <span class="operator">=</span> a.right<span class="operator">!</span>.right<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">getNext(node: b)<span class="operator">?</span>.value <span class="comment">// h</span></span><br><span class="line">getNext(node: a)<span class="operator">?</span>.value <span class="comment">// f</span></span><br><span class="line">getNext(node: d)<span class="operator">?</span>.value <span class="comment">// b</span></span><br><span class="line">getNext(node: f)<span class="operator">?</span>.value <span class="comment">// c</span></span><br><span class="line">getNext(node: i)<span class="operator">?</span>.value <span class="comment">// a</span></span><br><span class="line">getNext(node: g)<span class="operator">?</span>.value <span class="comment">// nil</span></span><br></pre></td></tr></table></figure><h1 id="9-用两个栈实现队列"><a href="#9-用两个栈实现队列" class="headerlink" title="9. 用两个栈实现队列"></a>9. 用两个栈实现队列</h1><blockquote><p>题目：用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead，分别完成在队列尾部插入节点和在队列头部删除节点的功能。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">CQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CQueue</span>(<span class="type">void</span>);</span><br><span class="line">  ~<span class="built_in">CQueue</span>(<span class="type">void</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">appendTail</span><span class="params">(<span class="type">const</span> T&amp; node)</span></span>;</span><br><span class="line">  <span class="function">T <span class="title">deleteHead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  stack&lt;T&gt; stackl;</span><br><span class="line">  stack&lt;T&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Swift 实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack1 <span class="operator">=</span> <span class="type">Stack</span>&lt;<span class="keyword">Any</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> stack2 <span class="operator">=</span> <span class="type">Stack</span>&lt;<span class="keyword">Any</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">appendTail</span>(<span class="params">element</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">  stack1.push(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">deleteHead</span>() -&gt; <span class="keyword">Any</span><span class="operator">?</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> stack2.count <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> stack1.count <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> stack1.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        stack2.push(stack1.pop()<span class="operator">!</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stack2.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stack2.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的 Swift 实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 见：https://kiligwyu.com/数据结构和排序算法inswift/#栈的实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">Stack</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stackArray <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.count</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.last</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="comment">/// push operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">push</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    stackArray.append(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// pop operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">pop</span>() -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="operator">!</span>stackArray.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stackArray.removeLast()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// print all elements</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">printAllElements</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> stackArray.enumerated() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-斐波那契数列"><a href="#10-斐波那契数列" class="headerlink" title="10. 斐波那契数列"></a>10. 斐波那契数列</h1><h2 id="10-1-求斐波那契数列的第-n-项"><a href="#10-1-求斐波那契数列的第-n-项" class="headerlink" title="10.1 求斐波那契数列的第 n 项"></a>10.1 求斐波那契数列的第 n 项</h2><blockquote><p>写一个函数，输入 n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p></blockquote><p>$$<br>f(n)&#x3D;\begin{cases}<br>0 \qquad\qquad\qquad\quad\ \ n &#x3D; 0 \\<br>1 \qquad\qquad\qquad\quad\ \ n &#x3D; 1 \\<br>f(n-1)+f(n-2) \quad n &gt; 1<br>\end{cases}<br>$$</p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><p>时间复杂度为 O(n)</p><blockquote><p>避免重复运算</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">UInt64</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> fibNMinusOne: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> fibNMinusTwo: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> fibN: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">2</span><span class="operator">...</span>n &#123;</span><br><span class="line">    fibN <span class="operator">=</span> fibNMinusOne <span class="operator">+</span> fibNMinusTwo</span><br><span class="line">    </span><br><span class="line">    fibNMinusTwo <span class="operator">=</span> fibNMinusOne</span><br><span class="line">    fibNMinusOne <span class="operator">=</span> fibN</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> fibN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibonacci(n: <span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">fibonacci(n: <span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci(n: <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci(n: <span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line">fibonacci(n: <span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line">fibonacci(n: <span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line">fibonacci(n: <span class="number">6</span>) <span class="comment">// 8</span></span><br><span class="line">fibonacci(n: <span class="number">7</span>) <span class="comment">// 13</span></span><br><span class="line">fibonacci(n: <span class="number">8</span>) <span class="comment">// 21</span></span><br><span class="line">fibonacci(n: <span class="number">9</span>) <span class="comment">// 34</span></span><br><span class="line">fibonacci(n: <span class="number">10</span>) <span class="comment">// 55</span></span><br><span class="line">fibonacci(n: <span class="number">20</span>) <span class="comment">// 6765</span></span><br><span class="line">fibonacci(n: <span class="number">30</span>) <span class="comment">// 832040</span></span><br><span class="line">fibonacci(n: <span class="number">40</span>) <span class="comment">// 102334155</span></span><br><span class="line">fibonacci(n: <span class="number">50</span>) <span class="comment">// 12586269025</span></span><br></pre></td></tr></table></figure><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法 2"></a>解法 2</h3><p>时间复杂度为 O(logn)</p><blockquote><p>矩阵乘方</p><p>$$\begin{bmatrix}f(n) &amp; f(n-1)\\f(n-1) &amp;f(n-2)\end{bmatrix}&#x3D;\begin{bmatrix}1 &amp; 1\\1 &amp;0\end{bmatrix}^{n-1}$$</p><p>$$<br>a^n&#x3D;\begin{cases}<br>a^{n&#x2F;2}a^{n&#x2F;2} \qquad\qquad n 为偶数 \\<br>a^{(n-1)&#x2F;2}a^{(n-1)&#x2F;2}a \quad\ n 为奇数 \\<br>\end{cases}<br>$$</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">fibonacci2</span>(<span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">UInt64</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> _helper(n: n <span class="operator">-</span> <span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">_helper</span>(<span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Matrix</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> matrix0</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">2</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> matrix0 <span class="operator">×</span> matrix0</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> n <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _helper(n: n <span class="operator">/</span> <span class="number">2</span>) <span class="operator">×</span> _helper(n: n <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _helper(n: (n <span class="operator">-</span> <span class="number">1</span>) <span class="operator">/</span> <span class="number">2</span>) <span class="operator">×</span> _helper(n: (n <span class="operator">-</span> <span class="number">1</span>) <span class="operator">/</span> <span class="number">2</span>) <span class="operator">×</span> matrix0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Matrix</span> <span class="operator">=</span> [[<span class="type">UInt64</span>]]</span><br><span class="line"><span class="keyword">let</span> matrix0: <span class="type">Matrix</span> <span class="operator">=</span> [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">×</span> : <span class="type">MultiplicationPrecedence</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">×</span> (<span class="params">lhs</span>: <span class="type">Matrix</span>, <span class="params">rhs</span>: <span class="type">Matrix</span>) -&gt; <span class="type">Matrix</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> row <span class="operator">=</span> lhs.count, col <span class="operator">=</span> rhs.first<span class="operator">!</span>.count, len <span class="operator">=</span> lhs.first<span class="operator">!</span>.count</span><br><span class="line">  <span class="keyword">let</span> rowArray <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="type">UInt64</span>(<span class="number">0</span>), count: col)</span><br><span class="line">  <span class="keyword">var</span> out <span class="operator">=</span> <span class="type">Matrix</span>(repeating: rowArray, count: row)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> row &#123;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> col &#123;</span><br><span class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> len &#123;</span><br><span class="line">        out[i][j] <span class="operator">+=</span> lhs[i][k] <span class="operator">*</span> rhs[k][j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibonacci2(n: <span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">fibonacci2(n: <span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci2(n: <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">fibonacci2(n: <span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line">fibonacci2(n: <span class="number">4</span>) <span class="comment">// 3</span></span><br><span class="line">fibonacci2(n: <span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line">fibonacci2(n: <span class="number">6</span>) <span class="comment">// 8</span></span><br><span class="line">fibonacci2(n: <span class="number">7</span>) <span class="comment">// 13</span></span><br><span class="line">fibonacci2(n: <span class="number">8</span>) <span class="comment">// 21</span></span><br><span class="line">fibonacci2(n: <span class="number">9</span>) <span class="comment">// 34</span></span><br><span class="line">fibonacci2(n: <span class="number">10</span>) <span class="comment">// 55</span></span><br><span class="line">fibonacci2(n: <span class="number">20</span>) <span class="comment">// 6765</span></span><br><span class="line">fibonacci2(n: <span class="number">30</span>) <span class="comment">// 832040</span></span><br><span class="line">fibonacci2(n: <span class="number">40</span>) <span class="comment">// 102334155</span></span><br><span class="line">fibonacci2(n: <span class="number">50</span>) <span class="comment">// 12586269025</span></span><br></pre></td></tr></table></figure><h2 id="10-2-青蛙跳台阶问题"><a href="#10-2-青蛙跳台阶问题" class="headerlink" title="10.2 青蛙跳台阶问题"></a>10.2 青蛙跳台阶问题</h2><blockquote><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p></blockquote><blockquote><p>$$<br>f(n)&#x3D;\begin{cases}<br>1 \qquad\qquad\qquad\quad\ \ n &#x3D; 1 \\<br>2 \qquad\qquad\qquad\quad\ \ n &#x3D; 2 \\<br>f(n-1)+f(n-2) \quad n &gt; 2<br>\end{cases}<br>$$</p><p>解法同 10.1。<br>另，假如该青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶…也可以跳上 n 级，那么该青蛙跳上一个 n 级的台阶总共有多少种跳法。此时 $$f(n)&#x3D;2^{n-1}$$。</p></blockquote><h1 id="11-旋转数组的最小数字"><a href="#11-旋转数组的最小数字" class="headerlink" title="11. 旋转数组的最小数字"></a>11. 旋转数组的最小数字</h1><blockquote><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 {3，4，5，1，2} 为 {1，2，3，4，5} 的一个旋转，该数组的最小值为 1。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">findMin</span>(<span class="params">in</span> <span class="params">numbers</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> numbers.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">  <span class="keyword">guard</span> numbers.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> numbers[<span class="number">0</span>] &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> index1 <span class="operator">=</span> <span class="number">0</span>, index2 <span class="operator">=</span> numbers.count <span class="operator">-</span> <span class="number">1</span>, indexMid <span class="operator">=</span> index1</span><br><span class="line">  <span class="keyword">while</span> numbers[index1] <span class="operator">&gt;=</span> numbers[index2] &#123;</span><br><span class="line">    <span class="keyword">if</span> index2 <span class="operator">-</span> index1 <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">      indexMid <span class="operator">=</span> index2</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    indexMid <span class="operator">=</span> (index1 <span class="operator">+</span> index2) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> numbers[index1] <span class="operator">==</span> numbers[indexMid],</span><br><span class="line">      numbers[index2] <span class="operator">==</span> numbers[indexMid] &#123;</span><br><span class="line">      <span class="keyword">var</span> result <span class="operator">=</span> numbers[index1]</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> index1 <span class="operator">+</span> <span class="number">1</span><span class="operator">...</span>index2 &#123;</span><br><span class="line">        result <span class="operator">=</span> <span class="built_in">min</span>(result, numbers[i])</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> numbers[indexMid] <span class="operator">&gt;=</span> numbers[index1] &#123;</span><br><span class="line">      index1 <span class="operator">=</span> indexMid</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> numbers[indexMid] <span class="operator">&lt;=</span> numbers[index2] &#123;</span><br><span class="line">      index2 <span class="operator">=</span> indexMid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> numbers[indexMid]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findMin(in: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 1</span></span><br><span class="line">findMin(in: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 1</span></span><br><span class="line">findMin(in: [<span class="number">1</span>]) <span class="comment">// 1</span></span><br><span class="line">findMin(in: []) <span class="comment">// nil</span></span><br><span class="line">findMin(in: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://swift.gg/2016/04/19/operator-overloading-swift/">Swift 运算符重载简介</a></li><li><a href="https://swift.gg/2017/01/10/dear-erica-singletons-and-property-observers/">单例中静态属性的额外作用</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0&quot;&gt;1. 赋值运算符函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E5%AE%9E%E7%8E%B0</summary>
      
    
    
    
    
    <category term="算法" scheme="http://kiligwyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和排序算法 in Swift</title>
    <link href="http://kiligwyu.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95inSwift/"/>
    <id>http://kiligwyu.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95inSwift/</id>
    <published>2020-03-03T06:58:53.000Z</published>
    <updated>2020-03-16T07:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">1. 数据结构</a><ul><li><a href="#1-1-%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84-Swift-%E5%AE%9E%E7%8E%B0">1.1 链表、栈和队列的 Swift 实现</a><ul><li><a href="#1-1-1-%E9%93%BE%E8%A1%A8-Linked-List">1.1.1 链表 (Linked List)</a><ul><li><a href="#1-1-1-1-%E8%8A%82%E7%82%B9%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1.1.1.1 节点的抽象数据类型</a></li><li><a href="#1-1-1-2-%E8%8A%82%E7%82%B9%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.1.2 节点的实现</a></li><li><a href="#1-1-1-3-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1.1.1.3 双向链表的抽象数据类型</a></li><li><a href="#1-1-1-4-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.1.4 双向链表的实现</a></li></ul></li><li><a href="#1-1-2-%E6%A0%88-Stack">1.1.2 栈 (Stack)</a><ul><li><a href="#1-1-2-1-%E6%A0%88%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B">1.1.2.1 栈的抽象数据模型</a></li><li><a href="#1-1-2-2-%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.2.2 栈的实现</a></li></ul></li><li><a href="#1-1-3-%E9%98%9F%E5%88%97-Queue">1.1.3 队列 (Queue)</a><ul><li><a href="#1-1-3-1-%E9%98%9F%E5%88%97%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B">1.1.3.1 队列的抽象数据模型</a></li><li><a href="#1-1-3-2-%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0">1.1.3.2 队列的实现</a></li></ul></li></ul></li></ul></li><li><a href="#2-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">2. 排序算法</a><ul><li><a href="#2-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">2.1 冒泡排序</a></li><li><a href="#2-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">2.2 选择排序</a></li><li><a href="#2-3-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">2.3 插入排序</a></li><li><a href="#2-4-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">2.4 归并排序</a></li><li><a href="#2-5-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">2.5 快速排序</a></li></ul></li><li><a href="#3-%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">3. 相关链接</a></li></ul><!--- more ---><h1 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h1><blockquote><p>数据结构（英语： data structure ）是计算机中存储、组织数据的方式。</p></blockquote><blockquote><p>数据结构 (data structure) 是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带 “结构” 的数据元素的集合。“结构” 就是指数据元素之间存在的关系，分为逻辑结构和存储结构。</p></blockquote><p><img src="https://raw.githubusercontent.com/KiligWYu/Pics/master/20200303152502.png" alt="数据结构"></p><p>常用的数据结构：</p><ul><li>数组 (Array)</li><li>栈 (Stack)</li><li>队列 (Queue)</li><li>链表 (Linked List)</li><li>树 (Tree)</li><li>图 (Graph)</li><li>堆 (Heap)</li><li>散列表 (Hash)</li></ul><h2 id="1-1-链表、栈和队列的-Swift-实现"><a href="#1-1-链表、栈和队列的-Swift-实现" class="headerlink" title="1.1 链表、栈和队列的 Swift 实现"></a>1.1 链表、栈和队列的 Swift 实现</h2><h3 id="1-1-1-链表-Linked-List"><a href="#1-1-1-链表-Linked-List" class="headerlink" title="1.1.1 链表 (Linked List)"></a>1.1.1 链表 (Linked List)</h3><p>链表是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针。链表可分为单向链表，双向链表以及循环链表。下文以双向链表为例。</p><h4 id="1-1-1-1-节点的抽象数据类型"><a href="#1-1-1-1-节点的抽象数据类型" class="headerlink" title="1.1.1.1 节点的抽象数据类型"></a>1.1.1.1 节点的抽象数据类型</h4><blockquote><p>抽象数据类型 (ADT，Abstract Data Type) 是指一个数学模型以及定义在此数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ADT 节点(node)</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  value: 持有的数据</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init: 初始化</span><br><span class="line">  previous: 指向上一节点的指针</span><br><span class="line">  next: 指向下一节点的指针</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-1-2-节点的实现"><a href="#1-1-1-2-节点的实现" class="headerlink" title="1.1.1.2 节点的实现"></a>1.1.1.2 节点的实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListNode</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">T</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> previous: <span class="type">LinkedListNode</span>?</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">LinkedListNode</span>?</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">value</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-1-3-双向链表的抽象数据类型"><a href="#1-1-1-3-双向链表的抽象数据类型" class="headerlink" title="1.1.1.3 双向链表的抽象数据类型"></a>1.1.1.3 双向链表的抽象数据类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ADT 链表（linked list）</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  linked list: 持有的线性表</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init: 初始化</span><br><span class="line">  count: 持有节点总个数</span><br><span class="line">  isEmpty: 是否为空</span><br><span class="line">  first: 头节点</span><br><span class="line">  last: 尾节点</span><br><span class="line">  node: 传入 index 返回节点</span><br><span class="line">  insert: 插入 node 到指定 index</span><br><span class="line">  insertToHead: 插入节点到表头</span><br><span class="line">  appendToTail: 插入节点到表尾</span><br><span class="line">  removeAll: 移除所有节点</span><br><span class="line">  remove: 移除传入的节点</span><br><span class="line">  removeAt: 移除传入 index 的节点</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-1-4-双向链表的实现"><a href="#1-1-1-4-双向链表的实现" class="headerlink" title="1.1.1.4 双向链表的实现"></a>1.1.1.4 双向链表的实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Node</span> <span class="operator">=</span> <span class="type">LinkedListNode</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// first node pointer</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> head: <span class="type">Node</span>?</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// first node pointer</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> first: <span class="type">Node</span>? &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// last node pointer</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> last: <span class="type">Node</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> node <span class="operator">=</span> head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> next <span class="operator">=</span> node.next &#123;</span><br><span class="line">      node <span class="operator">=</span> next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123; <span class="keyword">return</span> head <span class="operator">==</span> <span class="literal">nil</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// total count of nodes</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> node <span class="operator">=</span> head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> next <span class="operator">=</span> node.next &#123;</span><br><span class="line">      node <span class="operator">=</span> next</span><br><span class="line">      count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - insert node</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">  <span class="comment">/// get node of index</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">node</span>(<span class="params">atIndex</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">Node</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> index <span class="operator">&lt;</span> count <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> node <span class="operator">=</span> head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>index &#123;</span><br><span class="line">      node <span class="operator">=</span> node<span class="operator">?</span>.next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// insert node to tail</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">appendToTail</span>(<span class="params">node</span>: <span class="type">Node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode <span class="operator">=</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> lastNode <span class="operator">=</span> last &#123;</span><br><span class="line">      newNode.previous <span class="operator">=</span> lastNode</span><br><span class="line">      lastNode.next <span class="operator">=</span> newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head <span class="operator">=</span> newNode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// insert node to head</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">insertToFirst</span>(<span class="params">node</span>: <span class="type">Node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newHead <span class="operator">=</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> head <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">      head <span class="operator">=</span> newHead</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newHead.next <span class="operator">=</span> head</span><br><span class="line">      head<span class="operator">?</span>.previous <span class="operator">=</span> newHead</span><br><span class="line">      head <span class="operator">=</span> newHead</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// insert node to specific index</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">insert</span>(<span class="keyword">_</span> <span class="params">node</span>: <span class="type">Node</span>, <span class="params">atIndex</span> <span class="params">index</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> index <span class="operator">&gt;=</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;invalid input index&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> newNode <span class="operator">=</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> count <span class="operator">==</span> <span class="number">0</span> <span class="operator">||</span> index <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">      insertToFirst(node: newNode)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> index <span class="operator">&lt;</span> count <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;out of range&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> prev <span class="operator">=</span> <span class="keyword">self</span>.node(atIndex: index <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">let</span> next <span class="operator">=</span> prev<span class="operator">?</span>.next</span><br><span class="line">      </span><br><span class="line">      newNode.previous <span class="operator">=</span> prev</span><br><span class="line">      newNode.next <span class="operator">=</span> next</span><br><span class="line">      prev<span class="operator">?</span>.next <span class="operator">=</span> newNode</span><br><span class="line">      next<span class="operator">?</span>.previous <span class="operator">=</span> newNode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - remove node</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">  <span class="comment">/// removing all nodes</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">removeAll</span>() &#123;</span><br><span class="line">    head <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove a node</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">remove</span>(<span class="params">node</span>: <span class="type">Node</span>) -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> head <span class="operator">!=</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;linked list is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> prev <span class="operator">=</span> node.previous</span><br><span class="line">    <span class="keyword">let</span> next <span class="operator">=</span> node.next</span><br><span class="line">    next<span class="operator">?</span>.previous <span class="operator">=</span> prev</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> prev <span class="operator">=</span> prev &#123;</span><br><span class="line">      prev.next <span class="operator">=</span> next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head <span class="operator">=</span> next</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node.previous <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    node.next <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node.value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove a node by it&#x27;s index</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">remove</span>(<span class="keyword">_</span> <span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="operator">!</span>isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;linked list is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> node <span class="operator">=</span> <span class="keyword">self</span>.node(atIndex: index) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> remove(node: node)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove last node</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">removeLast</span>() -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> last <span class="operator">=</span> last <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> remove(node: last)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - print all nodes</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">  <span class="comment">/// print all nodes</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">printAllNodes</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> node <span class="operator">=</span> head</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>count &#123;</span><br><span class="line">      <span class="keyword">if</span> node <span class="operator">==</span> <span class="literal">nil</span> &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(node<span class="operator">!</span>.value)</span>&quot;</span>)</span><br><span class="line">      </span><br><span class="line">      node <span class="operator">=</span> node<span class="operator">?</span>.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-栈-Stack"><a href="#1-1-2-栈-Stack" class="headerlink" title="1.1.2 栈 (Stack)"></a>1.1.2 栈 (Stack)</h3><blockquote><p>堆叠（英语： stack）又称为 栈或堆迭，是计算机科学中的一种抽象资料型別，只允许在有序的线性资料集合的一端（称为堆叠顶端，英语： top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照后进先出（LIFO, Last In First Out）的原理运作。</p></blockquote><h4 id="1-1-2-1-栈的抽象数据模型"><a href="#1-1-2-1-栈的抽象数据模型" class="headerlink" title="1.1.2.1 栈的抽象数据模型"></a>1.1.2.1 栈的抽象数据模型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ADT 栈（Stack）</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  linked list:持有的线性表</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init:初始化</span><br><span class="line">  count:栈的元素个数</span><br><span class="line">  isEmpty:是否为空</span><br><span class="line">  push:入栈</span><br><span class="line">  pop:出栈</span><br><span class="line">  top:返回顶部元素</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-2-2-栈的实现"><a href="#1-1-2-2-栈的实现" class="headerlink" title="1.1.2.2 栈的实现"></a>1.1.2.2 栈的实现</h4><p>将数组（顺序存储）作为栈的线性表的实现。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">Stack</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> stackArray <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.count</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> stackArray.last</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="comment">/// push operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">push</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    stackArray.append(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// pop operation</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">pop</span>() -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="operator">!</span>stackArray.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stackArray.removeLast()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// print all elements</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">printAllElements</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> stackArray.enumerated() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-队列-Queue"><a href="#1-1-3-队列-Queue" class="headerlink" title="1.1.3 队列 (Queue)"></a>1.1.3 队列 (Queue)</h3><blockquote><p>队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为 rear）进行插入操作，在前端（称为 front）进行删除操作。</p></blockquote><h4 id="1-1-3-1-队列的抽象数据模型"><a href="#1-1-3-1-队列的抽象数据模型" class="headerlink" title="1.1.3.1 队列的抽象数据模型"></a>1.1.3.1 队列的抽象数据模型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ADT 队列（Queue）</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">  linked list:持有的线性表</span><br><span class="line"></span><br><span class="line">Operation</span><br><span class="line">  init:初始化</span><br><span class="line">  count:栈的元素个数</span><br><span class="line">  isEmpty:是否为空</span><br><span class="line">  front:获取队列头元素</span><br><span class="line">  enqueue:插入到队尾</span><br><span class="line">  dequeue:删除队列头元素并返回</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="1-1-3-2-队列的实现"><a href="#1-1-3-2-队列的实现" class="headerlink" title="1.1.3.2 队列的实现"></a>1.1.3.2 队列的实现</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> queueArray <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray.count</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray.isEmpty</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> front: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray.first</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="comment">/// add element</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">enqueue</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    queueArray.append(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// remove element</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">dequeue</span>() -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> queueArray.isEmpty &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queueArray.removeFirst()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">printAllElements</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> queueArray.enumerated() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[<span class="subst">\(index)</span>]<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-排序算法"><a href="#2-排序算法" class="headerlink" title="2. 排序算法"></a>2. 排序算法</h1><p>算法复杂度分为 <a href="https://www.wikiwand.com/zh/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">时间复杂度</a> 和 <a href="https://baike.baidu.com/item/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">空间复杂度</a>。</p><p>| 排序算法 | 平均情况 | 最好情况 | 最坏情况 | 稳定性 | 空间复杂度 |<br>| :—: | :—: | :—: | :—: | :—: | :—: | :—: |<br>| 冒泡 | O(n<sup>2</sup>) | O(n) | O(n<sup>2</sup>)    | 稳定 | O(1) |<br>| 选择排序 | O(n<sup>2</sup>) |    O(n<sup>2</sup>) | O(n<sup>2</sup>) | 不稳定 | O(1) |<br>| 插入排序 | O(n<sup>2</sup>)    | O(n) | O(n<sup>2</sup>)    | 稳定 | O(1) |<br>| 希尔排序 | O(nlogn) | 依赖步长 | 依赖步长 | 稳定 | O(1) |<br>| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | 稳定 | O(1) |<br>| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | 稳定 | O(n) |<br>| 快速排序 | O(nlogn) | O(nlogn) | O(n<sup>2</sup>) | 不稳定 | O(logn) |</p><h2 id="2-1-冒泡排序"><a href="#2-1-冒泡排序" class="headerlink" title="2.1 冒泡排序"></a>2.1 冒泡排序</h2><blockquote><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">  <span class="keyword">var</span> isSorted <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count <span class="operator">-</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count <span class="operator">-</span> <span class="number">1</span> <span class="operator">-</span> i &#123;</span><br><span class="line">      <span class="keyword">if</span> array[j] <span class="operator">&gt;</span> array[j <span class="operator">+</span> <span class="number">1</span>] &#123;</span><br><span class="line">        array.swapAt(j, j <span class="operator">+</span> <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        isSorted <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> isSorted &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-选择排序"><a href="#2-2-选择排序" class="headerlink" title="2.2 选择排序"></a>2.2 选择排序</h2><blockquote><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">var</span> min <span class="operator">=</span> i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="operator">+</span> <span class="number">1</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">      <span class="keyword">if</span> array[j] <span class="operator">&lt;</span> array[min] &#123;</span><br><span class="line">        min <span class="operator">=</span> j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array.swapAt(i, min)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-插入排序"><a href="#2-3-插入排序" class="headerlink" title="2.3 插入排序"></a>2.3 插入排序</h2><blockquote><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">    <span class="keyword">var</span> j <span class="operator">=</span> i</span><br><span class="line">    <span class="keyword">while</span> j <span class="operator">&gt;</span> <span class="number">0</span>, array[j] <span class="operator">&lt;</span> array [j <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">      array.swapAt(j, j <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">      j <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-归并排序"><a href="#2-4-归并排序" class="headerlink" title="2.4 归并排序"></a>2.4 归并排序</h2><blockquote><p>采用分治法:<br>分割：递归地把当前序列平均分割成两半。<br>整合：在保持元素顺序的同时将上一步得到的子序列整合到一起（归并）。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> array &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> middleIndex <span class="operator">=</span> array.count <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">let</span> leftArray <span class="operator">=</span> sort(<span class="type">Array</span>(array[<span class="number">0</span><span class="operator">..&lt;</span>middleIndex]))</span><br><span class="line">  <span class="keyword">let</span> rightArray <span class="operator">=</span> sort(<span class="type">Array</span>(array[middleIndex<span class="operator">..&lt;</span>array.count]))</span><br><span class="line">  <span class="keyword">return</span> _merge(leftArray: leftArray, rightArray: rightArray)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">_merge</span>(<span class="params">leftArray</span>: [<span class="type">Int</span>], <span class="params">rightArray</span>: [<span class="type">Int</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> leftIndex <span class="operator">=</span> <span class="number">0</span>, rightIndex <span class="operator">=</span> <span class="number">0</span>, sortedArray <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> leftIndex <span class="operator">&lt;</span> leftArray.count, rightIndex <span class="operator">&lt;</span> rightArray.count &#123;</span><br><span class="line">    <span class="keyword">if</span> leftArray[leftIndex] <span class="operator">&lt;</span> rightArray[rightIndex] &#123;</span><br><span class="line">      sortedArray.append(leftArray[leftIndex])</span><br><span class="line">      leftIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> leftArray[leftIndex] <span class="operator">&gt;</span> rightArray[rightIndex] &#123;</span><br><span class="line">      sortedArray.append(rightArray[rightIndex])</span><br><span class="line">      rightIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sortedArray.append(leftArray[leftIndex])</span><br><span class="line">      leftIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">      sortedArray.append(rightArray[rightIndex])</span><br><span class="line">      rightIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// leftArray is not empty</span></span><br><span class="line">  <span class="keyword">while</span> leftIndex <span class="operator">&lt;</span> leftArray.count &#123;</span><br><span class="line">    sortedArray.append(leftArray[leftIndex])</span><br><span class="line">    leftIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// right array is not empty</span></span><br><span class="line">  <span class="keyword">while</span> rightIndex <span class="operator">&lt;</span> rightArray.count &#123;</span><br><span class="line">    sortedArray.append(rightArray[rightIndex])</span><br><span class="line">    rightIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sortedArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-快速排序"><a href="#2-5-快速排序" class="headerlink" title="2.5 快速排序"></a>2.5 快速排序</h2><blockquote><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为较小和较大的 2 个子序列，然后递归地排序两个子序列。</p></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> array &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> pivot <span class="operator">=</span> array[array.count <span class="operator">/</span> <span class="number">2</span>]</span><br><span class="line">  <span class="keyword">let</span> leftArray <span class="operator">=</span> array.filter &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> pivot &#125;</span><br><span class="line">  <span class="keyword">let</span> equalArray <span class="operator">=</span> array.filter &#123; <span class="variable">$0</span> <span class="operator">==</span> pivot &#125;</span><br><span class="line">  <span class="keyword">let</span> rightArray <span class="operator">=</span> array.filter &#123; <span class="variable">$0</span> <span class="operator">&gt;</span> pivot &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sort(leftArray) <span class="operator">+</span> equalArray <span class="operator">+</span> sort(rightArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-相关链接"><a href="#3-相关链接" class="headerlink" title="3. 相关链接"></a>3. 相关链接</h1><ul><li><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450">https://baike.baidu.com/item/数据结构/1450</a></li><li><a href="https://www.wikiwand.com/zh/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">https://www.wikiwand.com/zh/数据结构</a></li><li><a href="https://baike.baidu.com/item/ADT/8945833?fromtitle=%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&fromid=3227531">https://baike.baidu.com/item/ADT/8945833?fromtitle=抽象数据类型&fromid=3227531</a></li><li><a href="https://knightsj.github.io/2018/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95inSwift%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASwift%E5%9F%BA%E7%A1%80%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构 &amp; 算法 in Swift （一）：Swift 基础和数据结构</a></li><li><a href="https://knightsj.github.io/2018/02/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95inSwift%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80">数据结构 &amp; 算法 in Swift （二）：算法概述和排序算法</a></li><li><a href="https://xiaozhuanlan.com/topic/4297536018">这或许是东半球讲十大排序算法最好的一篇文章</a></li><li><a href="https://www.wikiwand.com/zh/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">https://www.wikiwand.com/zh/排序算法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&quot;&gt;1. 数据结构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-1-%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E5%92%8C%E</summary>
      
    
    
    
    
    <category term="算法" scheme="http://kiligwyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>通知中心要不要移除观察者</title>
    <link href="http://kiligwyu.com/tong-zhi-zhong-xin-yao-bu-yao-yi-chu-guan-cha-zhe/"/>
    <id>http://kiligwyu.com/tong-zhi-zhong-xin-yao-bu-yao-yi-chu-guan-cha-zhe/</id>
    <published>2019-05-31T03:12:18.000Z</published>
    <updated>2021-10-15T09:17:58.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If your app targets iOS 9.0 and later or macOS 10.11 and later, you don’t need to unregister an observer in its dealloc method. Otherwise, you should call removeObserver(_:name:object:) before observer or any object passed to this method is deallocated.</p></blockquote><p>iOS 9.0 和 macOS 10.11 以后不需要手动移除观察者。</p><p>但在用 Block 形式添加观察者时，即 <code>addObserver(forName:object:queue:using:)</code>，却遇到了崩溃的问题，因为观察者并没有被移除，查了下文档，在 <code>addObserver(forName:object:queue:using:)</code> 的文档中看到：</p><blockquote><p>To unregister observations, you pass the object returned by this method to removeObserver(<em>:). You must invoke removeObserver(</em>:) or removeObserver(_:name:object:) before any object specified by addObserver(forName:object:queue:using:) is deallocated.</p></blockquote><p>也就是说 Block 形式的观察者必须要手动移除。</p><p><code>addObserver(forName:object:queue:using:)</code> 是有返回值的，是 <code>NSObjectProtocol</code> 类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectProtocol: <span class="type">NSObjectProtocol</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">objectProtocol <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">    .addObserver(forName: <span class="type">UIApplication</span>.keyboardWillShowNotification,</span><br><span class="line">                 object: <span class="literal">nil</span>,</span><br><span class="line">                 queue: <span class="type">OperationQueue</span>.main) </span><br><span class="line">    &#123; (notification) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.removeObserver(objectProtocol<span class="operator">!</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/notificationcenter/1411723-addobserver">https://developer.apple.com/documentation/foundation/notificationcenter/1411723-addobserver</a></li><li><a href="https://developer.apple.com/documentation/foundation/notificationcenter/1415360-addobserver">https://developer.apple.com/documentation/foundation/notificationcenter/1415360-addobserver</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;If your app targets iOS 9.0 and later or macOS 10.11 and later, you don’t need to unregister an observer in its dealloc meth</summary>
      
    
    
    
    
    <category term="Swift" scheme="http://kiligwyu.com/tags/Swift/"/>
    
  </entry>
  
</feed>
